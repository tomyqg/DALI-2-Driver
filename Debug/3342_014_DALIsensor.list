
3342_014_DALIsensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008784  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  08008844  08008844  00018844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eb0  08008eb0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08008eb0  08008eb0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008eb0  08008eb0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eb0  08008eb0  00018eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008eb4  08008eb4  00018eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a7c  20000088  08008f3c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b04  08008f3c  00020b04  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f735  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cf0  00000000  00000000  0002f7e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  000324d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb0  00000000  00000000  000332b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010890  00000000  00000000  00033f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e0c8  00000000  00000000  000447f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005a4bb  00000000  00000000  000528b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000acd73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f8  00000000  00000000  000acdf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000afee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000aff0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800882c 	.word	0x0800882c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	0800882c 	.word	0x0800882c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_lmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	46ce      	mov	lr, r9
 80003f8:	4647      	mov	r7, r8
 80003fa:	0415      	lsls	r5, r2, #16
 80003fc:	0c2d      	lsrs	r5, r5, #16
 80003fe:	002e      	movs	r6, r5
 8000400:	b580      	push	{r7, lr}
 8000402:	0407      	lsls	r7, r0, #16
 8000404:	0c14      	lsrs	r4, r2, #16
 8000406:	0c3f      	lsrs	r7, r7, #16
 8000408:	4699      	mov	r9, r3
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	437e      	muls	r6, r7
 800040e:	435d      	muls	r5, r3
 8000410:	4367      	muls	r7, r4
 8000412:	4363      	muls	r3, r4
 8000414:	197f      	adds	r7, r7, r5
 8000416:	0c34      	lsrs	r4, r6, #16
 8000418:	19e4      	adds	r4, r4, r7
 800041a:	469c      	mov	ip, r3
 800041c:	42a5      	cmp	r5, r4
 800041e:	d903      	bls.n	8000428 <__aeabi_lmul+0x34>
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	025b      	lsls	r3, r3, #9
 8000424:	4698      	mov	r8, r3
 8000426:	44c4      	add	ip, r8
 8000428:	464b      	mov	r3, r9
 800042a:	4343      	muls	r3, r0
 800042c:	4351      	muls	r1, r2
 800042e:	0c25      	lsrs	r5, r4, #16
 8000430:	0436      	lsls	r6, r6, #16
 8000432:	4465      	add	r5, ip
 8000434:	0c36      	lsrs	r6, r6, #16
 8000436:	0424      	lsls	r4, r4, #16
 8000438:	19a4      	adds	r4, r4, r6
 800043a:	195b      	adds	r3, r3, r5
 800043c:	1859      	adds	r1, r3, r1
 800043e:	0020      	movs	r0, r4
 8000440:	bc0c      	pop	{r2, r3}
 8000442:	4690      	mov	r8, r2
 8000444:	4699      	mov	r9, r3
 8000446:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000448 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	0018      	movs	r0, r3
 8000452:	230c      	movs	r3, #12
 8000454:	001a      	movs	r2, r3
 8000456:	2100      	movs	r1, #0
 8000458:	f008 f8da 	bl	8008610 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800045c:	4b2c      	ldr	r3, [pc, #176]	; (8000510 <MX_ADC_Init+0xc8>)
 800045e:	4a2d      	ldr	r2, [pc, #180]	; (8000514 <MX_ADC_Init+0xcc>)
 8000460:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000462:	4b2b      	ldr	r3, [pc, #172]	; (8000510 <MX_ADC_Init+0xc8>)
 8000464:	2200      	movs	r2, #0
 8000466:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000468:	4b29      	ldr	r3, [pc, #164]	; (8000510 <MX_ADC_Init+0xc8>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800046e:	4b28      	ldr	r3, [pc, #160]	; (8000510 <MX_ADC_Init+0xc8>)
 8000470:	2200      	movs	r2, #0
 8000472:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000474:	4b26      	ldr	r3, [pc, #152]	; (8000510 <MX_ADC_Init+0xc8>)
 8000476:	2201      	movs	r2, #1
 8000478:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800047a:	4b25      	ldr	r3, [pc, #148]	; (8000510 <MX_ADC_Init+0xc8>)
 800047c:	2204      	movs	r2, #4
 800047e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ENABLE;
 8000480:	4b23      	ldr	r3, [pc, #140]	; (8000510 <MX_ADC_Init+0xc8>)
 8000482:	2201      	movs	r2, #1
 8000484:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 8000486:	4b22      	ldr	r3, [pc, #136]	; (8000510 <MX_ADC_Init+0xc8>)
 8000488:	2201      	movs	r2, #1
 800048a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800048c:	4b20      	ldr	r3, [pc, #128]	; (8000510 <MX_ADC_Init+0xc8>)
 800048e:	2200      	movs	r2, #0
 8000490:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000492:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <MX_ADC_Init+0xc8>)
 8000494:	2200      	movs	r2, #0
 8000496:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000498:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <MX_ADC_Init+0xc8>)
 800049a:	22c2      	movs	r2, #194	; 0xc2
 800049c:	32ff      	adds	r2, #255	; 0xff
 800049e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <MX_ADC_Init+0xc8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <MX_ADC_Init+0xc8>)
 80004a8:	2224      	movs	r2, #36	; 0x24
 80004aa:	2100      	movs	r1, #0
 80004ac:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004ae:	4b18      	ldr	r3, [pc, #96]	; (8000510 <MX_ADC_Init+0xc8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004b4:	4b16      	ldr	r3, [pc, #88]	; (8000510 <MX_ADC_Init+0xc8>)
 80004b6:	0018      	movs	r0, r3
 80004b8:	f005 fdf6 	bl	80060a8 <HAL_ADC_Init>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80004c0:	f005 fa0b 	bl	80058da <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2201      	movs	r2, #1
 80004c8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2280      	movs	r2, #128	; 0x80
 80004ce:	0152      	lsls	r2, r2, #5
 80004d0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2207      	movs	r2, #7
 80004d6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004d8:	1d3a      	adds	r2, r7, #4
 80004da:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <MX_ADC_Init+0xc8>)
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f006 f854 	bl	800658c <HAL_ADC_ConfigChannel>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d001      	beq.n	80004ec <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80004e8:	f005 f9f7 	bl	80058da <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2209      	movs	r2, #9
 80004f0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004f2:	1d3a      	adds	r2, r7, #4
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_ADC_Init+0xc8>)
 80004f6:	0011      	movs	r1, r2
 80004f8:	0018      	movs	r0, r3
 80004fa:	f006 f847 	bl	800658c <HAL_ADC_ConfigChannel>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000502:	f005 f9ea 	bl	80058da <Error_Handler>
  }

}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b004      	add	sp, #16
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	200004e8 	.word	0x200004e8
 8000514:	40012400 	.word	0x40012400

08000518 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b08b      	sub	sp, #44	; 0x2c
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	2314      	movs	r3, #20
 8000522:	18fb      	adds	r3, r7, r3
 8000524:	0018      	movs	r0, r3
 8000526:	2314      	movs	r3, #20
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f008 f870 	bl	8008610 <memset>
  if(adcHandle->Instance==ADC1)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a28      	ldr	r2, [pc, #160]	; (80005d8 <HAL_ADC_MspInit+0xc0>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d149      	bne.n	80005ce <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800053a:	4b28      	ldr	r3, [pc, #160]	; (80005dc <HAL_ADC_MspInit+0xc4>)
 800053c:	699a      	ldr	r2, [r3, #24]
 800053e:	4b27      	ldr	r3, [pc, #156]	; (80005dc <HAL_ADC_MspInit+0xc4>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0089      	lsls	r1, r1, #2
 8000544:	430a      	orrs	r2, r1
 8000546:	619a      	str	r2, [r3, #24]
 8000548:	4b24      	ldr	r3, [pc, #144]	; (80005dc <HAL_ADC_MspInit+0xc4>)
 800054a:	699a      	ldr	r2, [r3, #24]
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	4013      	ands	r3, r2
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b21      	ldr	r3, [pc, #132]	; (80005dc <HAL_ADC_MspInit+0xc4>)
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	4b20      	ldr	r3, [pc, #128]	; (80005dc <HAL_ADC_MspInit+0xc4>)
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	0289      	lsls	r1, r1, #10
 8000560:	430a      	orrs	r2, r1
 8000562:	615a      	str	r2, [r3, #20]
 8000564:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <HAL_ADC_MspInit+0xc4>)
 8000566:	695a      	ldr	r2, [r3, #20]
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	029b      	lsls	r3, r3, #10
 800056c:	4013      	ands	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <HAL_ADC_MspInit+0xc4>)
 8000574:	695a      	ldr	r2, [r3, #20]
 8000576:	4b19      	ldr	r3, [pc, #100]	; (80005dc <HAL_ADC_MspInit+0xc4>)
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	02c9      	lsls	r1, r1, #11
 800057c:	430a      	orrs	r2, r1
 800057e:	615a      	str	r2, [r3, #20]
 8000580:	4b16      	ldr	r3, [pc, #88]	; (80005dc <HAL_ADC_MspInit+0xc4>)
 8000582:	695a      	ldr	r2, [r3, #20]
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	02db      	lsls	r3, r3, #11
 8000588:	4013      	ands	r3, r2
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA1     ------> ADC_IN1
    PB1     ------> ADC_IN9 
    */
    GPIO_InitStruct.Pin = AOUT_Pin;
 800058e:	2414      	movs	r4, #20
 8000590:	193b      	adds	r3, r7, r4
 8000592:	2202      	movs	r2, #2
 8000594:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	2203      	movs	r2, #3
 800059a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AOUT_GPIO_Port, &GPIO_InitStruct);
 80005a2:	193a      	adds	r2, r7, r4
 80005a4:	2390      	movs	r3, #144	; 0x90
 80005a6:	05db      	lsls	r3, r3, #23
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f006 fda4 	bl	80070f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR_Pin;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2202      	movs	r2, #2
 80005b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2203      	movs	r2, #3
 80005ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <HAL_ADC_MspInit+0xc8>)
 80005c6:	0019      	movs	r1, r3
 80005c8:	0010      	movs	r0, r2
 80005ca:	f006 fd95 	bl	80070f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b00b      	add	sp, #44	; 0x2c
 80005d4:	bd90      	pop	{r4, r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	40012400 	.word	0x40012400
 80005dc:	40021000 	.word	0x40021000
 80005e0:	48000400 	.word	0x48000400

080005e4 <DALIInit>:
void DALIAppendToQueue(void);
void DALIProcessSendData(struct DALITxData txdata);

/*************************Function implementations*****************************/
void DALIInit(void)
{
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	//Initialize the bus to idle state
	writePin(TX_Pin, DALI_HI);
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	2100      	movs	r1, #0
 80005ee:	0018      	movs	r0, r3
 80005f0:	f004 ffca 	bl	8005588 <writePin>

	daliState = IDLE;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <DALIInit+0x44>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
	DALIFlags.flags_all = 0;
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <DALIInit+0x48>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	801a      	strh	r2, [r3, #0]
	DALIConfigureMode(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f000 f819 	bl	8000638 <DALIConfigureMode>
	rxDataR = 0;
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <DALIInit+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	rxDataW = 0;
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <DALIInit+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	srand(time(0));
 8000612:	2000      	movs	r0, #0
 8000614:	f008 f85a 	bl	80086cc <time>
 8000618:	0003      	movs	r3, r0
 800061a:	000c      	movs	r4, r1
 800061c:	0018      	movs	r0, r3
 800061e:	f007 ffff 	bl	8008620 <srand>
}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	bdb0      	pop	{r4, r5, r7, pc}
 8000628:	200007ec 	.word	0x200007ec
 800062c:	200007f4 	.word	0x200007f4
 8000630:	200007ee 	.word	0x200007ee
 8000634:	200007e4 	.word	0x200007e4

08000638 <DALIConfigureMode>:

void DALIConfigureMode(uint8_t mode)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	0002      	movs	r2, r0
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	701a      	strb	r2, [r3, #0]
	DALIFlags.deviceMode = mode;
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2201      	movs	r2, #1
 800064a:	4013      	ands	r3, r2
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <DALIConfigureMode+0x34>)
 8000650:	2101      	movs	r1, #1
 8000652:	400a      	ands	r2, r1
 8000654:	0010      	movs	r0, r2
 8000656:	785a      	ldrb	r2, [r3, #1]
 8000658:	2101      	movs	r1, #1
 800065a:	438a      	bics	r2, r1
 800065c:	1c11      	adds	r1, r2, #0
 800065e:	1c02      	adds	r2, r0, #0
 8000660:	430a      	orrs	r2, r1
 8000662:	705a      	strb	r2, [r3, #1]
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b002      	add	sp, #8
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200007f4 	.word	0x200007f4

08000670 <DALITimerIntHandler>:
		DALIFlags.cableConnected = 1;
	}
}

void DALITimerIntHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
//	if(halfBitNumber == 50)
//		halfBitNumber = 0;
//	reset_timer(&htim6);
	static uint32_t TE_random;
	uint32_t TE_adjust;
	switch(daliState)
 8000676:	4bd6      	ldr	r3, [pc, #856]	; (80009d0 <DALITimerIntHandler+0x360>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b09      	cmp	r3, #9
 800067c:	d901      	bls.n	8000682 <DALITimerIntHandler+0x12>
 800067e:	f000 fc1a 	bl	8000eb6 <DALITimerIntHandler+0x846>
 8000682:	009a      	lsls	r2, r3, #2
 8000684:	4bd3      	ldr	r3, [pc, #844]	; (80009d4 <DALITimerIntHandler+0x364>)
 8000686:	18d3      	adds	r3, r2, r3
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	469f      	mov	pc, r3
	{
	case SEND_DATA:
		TE_adjust = TE - overlapTime;
 800068c:	4bd2      	ldr	r3, [pc, #840]	; (80009d8 <DALITimerIntHandler+0x368>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4ad2      	ldr	r2, [pc, #840]	; (80009dc <DALITimerIntHandler+0x36c>)
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	603b      	str	r3, [r7, #0]
		overlapTime = 0;
 8000696:	4bd0      	ldr	r3, [pc, #832]	; (80009d8 <DALITimerIntHandler+0x368>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
		switch(halfBitNumber)
 800069c:	4bd0      	ldr	r3, [pc, #832]	; (80009e0 <DALITimerIntHandler+0x370>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b38      	cmp	r3, #56	; 0x38
 80006a4:	d900      	bls.n	80006a8 <DALITimerIntHandler+0x38>
 80006a6:	e075      	b.n	8000794 <DALITimerIntHandler+0x124>
 80006a8:	009a      	lsls	r2, r3, #2
 80006aa:	4bce      	ldr	r3, [pc, #824]	; (80009e4 <DALITimerIntHandler+0x374>)
 80006ac:	18d3      	adds	r3, r2, r3
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	469f      	mov	pc, r3
		{
		case 1:
			// Start bit, reaches the end of 1st half, start 2nd half
			set_timer_reload_val(TE, &htim2);
 80006b2:	4bcd      	ldr	r3, [pc, #820]	; (80009e8 <DALITimerIntHandler+0x378>)
 80006b4:	4ac9      	ldr	r2, [pc, #804]	; (80009dc <DALITimerIntHandler+0x36c>)
 80006b6:	0019      	movs	r1, r3
 80006b8:	0010      	movs	r0, r2
 80006ba:	f005 fbeb 	bl	8005e94 <set_timer_reload_val>
			writePin(TX_Pin, DALI_HI);
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	2100      	movs	r1, #0
 80006c4:	0018      	movs	r0, r3
 80006c6:	f004 ff5f 	bl	8005588 <writePin>
			break;
 80006ca:	e0d5      	b.n	8000878 <DALITimerIntHandler+0x208>
		case 2:
			// Data bit,  start of 1st half
			set_timer_reload_val(TE_adjust, &htim2);
 80006cc:	4ac6      	ldr	r2, [pc, #792]	; (80009e8 <DALITimerIntHandler+0x378>)
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	0011      	movs	r1, r2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f005 fbde 	bl	8005e94 <set_timer_reload_val>
			if ((txPacket & 0x800000) != 0)
 80006d8:	4bc4      	ldr	r3, [pc, #784]	; (80009ec <DALITimerIntHandler+0x37c>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	041b      	lsls	r3, r3, #16
 80006e0:	4013      	ands	r3, r2
 80006e2:	d006      	beq.n	80006f2 <DALITimerIntHandler+0x82>
			{
				// Send a '1' bit, which starts with a DALI_LO
				writePin(TX_Pin, DALI_LO);
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	2101      	movs	r1, #1
 80006ea:	0018      	movs	r0, r3
 80006ec:	f004 ff4c 	bl	8005588 <writePin>
 80006f0:	e005      	b.n	80006fe <DALITimerIntHandler+0x8e>
			}
			else
			{
				// Send a '0' bit, which starts with a DALI_HI
				writePin(TX_Pin, DALI_HI);
 80006f2:	2380      	movs	r3, #128	; 0x80
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	2100      	movs	r1, #0
 80006f8:	0018      	movs	r0, r3
 80006fa:	f004 ff45 	bl	8005588 <writePin>
			}
			prevBit = 1;
 80006fe:	4bbc      	ldr	r3, [pc, #752]	; (80009f0 <DALITimerIntHandler+0x380>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
			break;
 8000704:	e0b8      	b.n	8000878 <DALITimerIntHandler+0x208>
		case 50:
			// STOP BIT 1, 1st half
			set_timer_reload_val(TE_adjust, &htim2);
 8000706:	4ab8      	ldr	r2, [pc, #736]	; (80009e8 <DALITimerIntHandler+0x378>)
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f005 fbc1 	bl	8005e94 <set_timer_reload_val>
			writePin(TX_Pin, DALI_HI);
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	2100      	movs	r1, #0
 8000718:	0018      	movs	r0, r3
 800071a:	f004 ff35 	bl	8005588 <writePin>
			break;
 800071e:	e0ab      	b.n	8000878 <DALITimerIntHandler+0x208>
		case 53:
		case 54:
		case 55:
			// STOP BIT 1, 2nd half
			// STOP BIT 2, 3
			set_timer_reload_val(TE_adjust, &htim2);
 8000720:	4ab1      	ldr	r2, [pc, #708]	; (80009e8 <DALITimerIntHandler+0x378>)
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	0011      	movs	r1, r2
 8000726:	0018      	movs	r0, r3
 8000728:	f005 fbb4 	bl	8005e94 <set_timer_reload_val>
			writePin(TX_Pin, DALI_HI);
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	2100      	movs	r1, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f004 ff28 	bl	8005588 <writePin>
			// No transitions should occur, we should stay put
			break;
 8000738:	e09e      	b.n	8000878 <DALITimerIntHandler+0x208>
		case 56:
			// Transmission finalized OK. Start waiting
			// for a potential backframe. Keep timer running
			if(DALIFlags.txFrameType == 1) // backward frame sent
 800073a:	4bae      	ldr	r3, [pc, #696]	; (80009f4 <DALITimerIntHandler+0x384>)
 800073c:	785b      	ldrb	r3, [r3, #1]
 800073e:	2202      	movs	r2, #2
 8000740:	4013      	ands	r3, r2
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2b00      	cmp	r3, #0
 8000746:	d009      	beq.n	800075c <DALITimerIntHandler+0xec>
			{
				daliState = PRE_IDLE;
 8000748:	4ba1      	ldr	r3, [pc, #644]	; (80009d0 <DALITimerIntHandler+0x360>)
 800074a:	2209      	movs	r2, #9
 800074c:	701a      	strb	r2, [r3, #0]
				set_timer_reload_val(TE_TX_WAIT_FF1, &htim2);
 800074e:	4ba6      	ldr	r3, [pc, #664]	; (80009e8 <DALITimerIntHandler+0x378>)
 8000750:	4aa9      	ldr	r2, [pc, #676]	; (80009f8 <DALITimerIntHandler+0x388>)
 8000752:	0019      	movs	r1, r3
 8000754:	0010      	movs	r0, r2
 8000756:	f005 fb9d 	bl	8005e94 <set_timer_reload_val>
 800075a:	e00b      	b.n	8000774 <DALITimerIntHandler+0x104>
			}
			else
			{
				set_timer_reload_val(TE_RX_BF_MAX, &htim2);
 800075c:	4ba2      	ldr	r3, [pc, #648]	; (80009e8 <DALITimerIntHandler+0x378>)
 800075e:	4aa7      	ldr	r2, [pc, #668]	; (80009fc <DALITimerIntHandler+0x38c>)
 8000760:	0019      	movs	r1, r3
 8000762:	0010      	movs	r0, r2
 8000764:	f005 fb96 	bl	8005e94 <set_timer_reload_val>
				rxPacketTime = 0;
 8000768:	4ba5      	ldr	r3, [pc, #660]	; (8000a00 <DALITimerIntHandler+0x390>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
				daliState = WAIT_FOR_BACKFRAME;
 800076e:	4b98      	ldr	r3, [pc, #608]	; (80009d0 <DALITimerIntHandler+0x360>)
 8000770:	2205      	movs	r2, #5
 8000772:	701a      	strb	r2, [r3, #0]
			}
			if(DALIFlags.sendTwiceFrame == 0)
 8000774:	4b9f      	ldr	r3, [pc, #636]	; (80009f4 <DALITimerIntHandler+0x384>)
 8000776:	785b      	ldrb	r3, [r3, #1]
 8000778:	2204      	movs	r2, #4
 800077a:	4013      	ands	r3, r2
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d000      	beq.n	8000784 <DALITimerIntHandler+0x114>
 8000782:	e078      	b.n	8000876 <DALITimerIntHandler+0x206>
			{
				DALIFlags.txDone = 1;
 8000784:	4b9b      	ldr	r3, [pc, #620]	; (80009f4 <DALITimerIntHandler+0x384>)
 8000786:	781a      	ldrb	r2, [r3, #0]
 8000788:	2102      	movs	r1, #2
 800078a:	430a      	orrs	r2, r1
 800078c:	701a      	strb	r2, [r3, #0]
				DALIAppendToQueue();
 800078e:	f001 f91f 	bl	80019d0 <DALIAppendToQueue>
			}
			break;
 8000792:	e070      	b.n	8000876 <DALITimerIntHandler+0x206>
		default:
			// This case handles all the in-between (data) bits, with a
			// distinction between 1st half (even halfBitNumber) and 2nd
			// half (odd halfBitNumber) of a bit.
			set_timer_reload_val(TE_adjust, &htim2);
 8000794:	4a94      	ldr	r2, [pc, #592]	; (80009e8 <DALITimerIntHandler+0x378>)
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	0011      	movs	r1, r2
 800079a:	0018      	movs	r0, r3
 800079c:	f005 fb7a 	bl	8005e94 <set_timer_reload_val>
			switch(halfBitNumber & 0x01)
 80007a0:	4b8f      	ldr	r3, [pc, #572]	; (80009e0 <DALITimerIntHandler+0x370>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	001a      	movs	r2, r3
 80007a8:	2301      	movs	r3, #1
 80007aa:	4013      	ands	r3, r2
 80007ac:	d002      	beq.n	80007b4 <DALITimerIntHandler+0x144>
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d046      	beq.n	8000840 <DALITimerIntHandler+0x1d0>
					writePin(TX_Pin, DALI_HI);
					break;
				}
				break;
			}
			break;
 80007b2:	e061      	b.n	8000878 <DALITimerIntHandler+0x208>
				switch (txPacket & 0xC00000)
 80007b4:	4b8d      	ldr	r3, [pc, #564]	; (80009ec <DALITimerIntHandler+0x37c>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	23c0      	movs	r3, #192	; 0xc0
 80007ba:	041b      	lsls	r3, r3, #16
 80007bc:	4013      	ands	r3, r2
 80007be:	2280      	movs	r2, #128	; 0x80
 80007c0:	03d2      	lsls	r2, r2, #15
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d016      	beq.n	80007f4 <DALITimerIntHandler+0x184>
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	03d2      	lsls	r2, r2, #15
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d802      	bhi.n	80007d4 <DALITimerIntHandler+0x164>
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d009      	beq.n	80007e6 <DALITimerIntHandler+0x176>
 80007d2:	e024      	b.n	800081e <DALITimerIntHandler+0x1ae>
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	0412      	lsls	r2, r2, #16
 80007d8:	4293      	cmp	r3, r2
 80007da:	d012      	beq.n	8000802 <DALITimerIntHandler+0x192>
 80007dc:	22c0      	movs	r2, #192	; 0xc0
 80007de:	0412      	lsls	r2, r2, #16
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d015      	beq.n	8000810 <DALITimerIntHandler+0x1a0>
 80007e4:	e01b      	b.n	800081e <DALITimerIntHandler+0x1ae>
					writePin(TX_Pin, DALI_HI);
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	2100      	movs	r1, #0
 80007ec:	0018      	movs	r0, r3
 80007ee:	f004 fecb 	bl	8005588 <writePin>
					break;
 80007f2:	e014      	b.n	800081e <DALITimerIntHandler+0x1ae>
					writePin(TX_Pin, DALI_LO);
 80007f4:	2380      	movs	r3, #128	; 0x80
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	2101      	movs	r1, #1
 80007fa:	0018      	movs	r0, r3
 80007fc:	f004 fec4 	bl	8005588 <writePin>
					break;
 8000800:	e00d      	b.n	800081e <DALITimerIntHandler+0x1ae>
					writePin(TX_Pin, DALI_HI);
 8000802:	2380      	movs	r3, #128	; 0x80
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	2100      	movs	r1, #0
 8000808:	0018      	movs	r0, r3
 800080a:	f004 febd 	bl	8005588 <writePin>
					break;
 800080e:	e006      	b.n	800081e <DALITimerIntHandler+0x1ae>
					writePin(TX_Pin, DALI_LO);
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	2101      	movs	r1, #1
 8000816:	0018      	movs	r0, r3
 8000818:	f004 feb6 	bl	8005588 <writePin>
					break;
 800081c:	46c0      	nop			; (mov r8, r8)
				prevBit = (txPacket & 0x800000) ? 1 : 0;
 800081e:	4b73      	ldr	r3, [pc, #460]	; (80009ec <DALITimerIntHandler+0x37c>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	041b      	lsls	r3, r3, #16
 8000826:	4013      	ands	r3, r2
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	4193      	sbcs	r3, r2
 800082c:	b2db      	uxtb	r3, r3
 800082e:	001a      	movs	r2, r3
 8000830:	4b6f      	ldr	r3, [pc, #444]	; (80009f0 <DALITimerIntHandler+0x380>)
 8000832:	701a      	strb	r2, [r3, #0]
				txPacket <<= 1;
 8000834:	4b6d      	ldr	r3, [pc, #436]	; (80009ec <DALITimerIntHandler+0x37c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	005a      	lsls	r2, r3, #1
 800083a:	4b6c      	ldr	r3, [pc, #432]	; (80009ec <DALITimerIntHandler+0x37c>)
 800083c:	601a      	str	r2, [r3, #0]
				break;
 800083e:	e019      	b.n	8000874 <DALITimerIntHandler+0x204>
				switch(txPacket & 0x800000)
 8000840:	4b6a      	ldr	r3, [pc, #424]	; (80009ec <DALITimerIntHandler+0x37c>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	041b      	lsls	r3, r3, #16
 8000848:	4013      	ands	r3, r2
 800084a:	d004      	beq.n	8000856 <DALITimerIntHandler+0x1e6>
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	0412      	lsls	r2, r2, #16
 8000850:	4293      	cmp	r3, r2
 8000852:	d007      	beq.n	8000864 <DALITimerIntHandler+0x1f4>
				break;
 8000854:	e00d      	b.n	8000872 <DALITimerIntHandler+0x202>
					writePin(TX_Pin, DALI_LO);
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	2101      	movs	r1, #1
 800085c:	0018      	movs	r0, r3
 800085e:	f004 fe93 	bl	8005588 <writePin>
					break;
 8000862:	e006      	b.n	8000872 <DALITimerIntHandler+0x202>
					writePin(TX_Pin, DALI_HI);
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	2100      	movs	r1, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f004 fe8c 	bl	8005588 <writePin>
					break;
 8000870:	46c0      	nop			; (mov r8, r8)
				break;
 8000872:	46c0      	nop			; (mov r8, r8)
			break;
 8000874:	e000      	b.n	8000878 <DALITimerIntHandler+0x208>
			break;
 8000876:	46c0      	nop			; (mov r8, r8)
		}
		// Move on in state SEND_DATA, by incrementing the halfbit we're transmitting

		halfBitNumber++;
 8000878:	4b59      	ldr	r3, [pc, #356]	; (80009e0 <DALITimerIntHandler+0x370>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	3301      	adds	r3, #1
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b57      	ldr	r3, [pc, #348]	; (80009e0 <DALITimerIntHandler+0x370>)
 8000884:	701a      	strb	r2, [r3, #0]
		if((DALIFlags.txFrameType == 1) && (halfBitNumber == 18))
 8000886:	4b5b      	ldr	r3, [pc, #364]	; (80009f4 <DALITimerIntHandler+0x384>)
 8000888:	785b      	ldrb	r3, [r3, #1]
 800088a:	2202      	movs	r2, #2
 800088c:	4013      	ands	r3, r2
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d008      	beq.n	80008a6 <DALITimerIntHandler+0x236>
 8000894:	4b52      	ldr	r3, [pc, #328]	; (80009e0 <DALITimerIntHandler+0x370>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b12      	cmp	r3, #18
 800089c:	d103      	bne.n	80008a6 <DALITimerIntHandler+0x236>
		{
			// If sending backward frame, skip to stop bit at half bit 18
			halfBitNumber = 50;
 800089e:	4b50      	ldr	r3, [pc, #320]	; (80009e0 <DALITimerIntHandler+0x370>)
 80008a0:	2232      	movs	r2, #50	; 0x32
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	e015      	b.n	80008d2 <DALITimerIntHandler+0x262>
		}
		else if((DALIFlags.deviceMode == 1) && (DALIFlags.txFrameType == 0) && (halfBitNumber == 34))
 80008a6:	4b53      	ldr	r3, [pc, #332]	; (80009f4 <DALITimerIntHandler+0x384>)
 80008a8:	785b      	ldrb	r3, [r3, #1]
 80008aa:	2201      	movs	r2, #1
 80008ac:	4013      	ands	r3, r2
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00e      	beq.n	80008d2 <DALITimerIntHandler+0x262>
 80008b4:	4b4f      	ldr	r3, [pc, #316]	; (80009f4 <DALITimerIntHandler+0x384>)
 80008b6:	785b      	ldrb	r3, [r3, #1]
 80008b8:	2202      	movs	r2, #2
 80008ba:	4013      	ands	r3, r2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d107      	bne.n	80008d2 <DALITimerIntHandler+0x262>
 80008c2:	4b47      	ldr	r3, [pc, #284]	; (80009e0 <DALITimerIntHandler+0x370>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b22      	cmp	r3, #34	; 0x22
 80008ca:	d102      	bne.n	80008d2 <DALITimerIntHandler+0x262>
		{
			// If sending 16-bit forward frame, skip to stop bit at half bit 34
			halfBitNumber = 50;
 80008cc:	4b44      	ldr	r3, [pc, #272]	; (80009e0 <DALITimerIntHandler+0x370>)
 80008ce:	2232      	movs	r2, #50	; 0x32
 80008d0:	701a      	strb	r2, [r3, #0]
		}
		time_int[halfBitNumber] = get_timer_count(&htim2);
 80008d2:	4b45      	ldr	r3, [pc, #276]	; (80009e8 <DALITimerIntHandler+0x378>)
 80008d4:	0018      	movs	r0, r3
 80008d6:	f005 fb03 	bl	8005ee0 <get_timer_count>
 80008da:	0001      	movs	r1, r0
 80008dc:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <DALITimerIntHandler+0x370>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	001a      	movs	r2, r3
 80008e4:	b289      	uxth	r1, r1
 80008e6:	4b47      	ldr	r3, [pc, #284]	; (8000a04 <DALITimerIntHandler+0x394>)
 80008e8:	0052      	lsls	r2, r2, #1
 80008ea:	52d1      	strh	r1, [r2, r3]
		break;
 80008ec:	e2ea      	b.n	8000ec4 <DALITimerIntHandler+0x854>
	case WAIT_FOR_BACKFRAME:
		// Time-out occurred signal the end of the period in which new frame is interpreted as backward frame
		if(DALIFlags.sendTwiceFrame == 1)
 80008ee:	4b41      	ldr	r3, [pc, #260]	; (80009f4 <DALITimerIntHandler+0x384>)
 80008f0:	785b      	ldrb	r3, [r3, #1]
 80008f2:	2204      	movs	r2, #4
 80008f4:	4013      	ands	r3, r2
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d01b      	beq.n	8000934 <DALITimerIntHandler+0x2c4>
		{
	        daliState = SEND_DATA;
 80008fc:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <DALITimerIntHandler+0x360>)
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
	        DALIFlags.sendTwiceFrame = 0;
 8000902:	4b3c      	ldr	r3, [pc, #240]	; (80009f4 <DALITimerIntHandler+0x384>)
 8000904:	785a      	ldrb	r2, [r3, #1]
 8000906:	2104      	movs	r1, #4
 8000908:	438a      	bics	r2, r1
 800090a:	705a      	strb	r2, [r3, #1]
	        txPacket = txPacket_temp;
 800090c:	4b3e      	ldr	r3, [pc, #248]	; (8000a08 <DALITimerIntHandler+0x398>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b36      	ldr	r3, [pc, #216]	; (80009ec <DALITimerIntHandler+0x37c>)
 8000912:	601a      	str	r2, [r3, #0]
	        halfBitNumber = 1;
 8000914:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <DALITimerIntHandler+0x370>)
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]
	        set_timer_reload_val(TE, &htim2);
 800091a:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <DALITimerIntHandler+0x378>)
 800091c:	4a2f      	ldr	r2, [pc, #188]	; (80009dc <DALITimerIntHandler+0x36c>)
 800091e:	0019      	movs	r1, r3
 8000920:	0010      	movs	r0, r2
 8000922:	f005 fab7 	bl	8005e94 <set_timer_reload_val>
	        writePin(TX_Pin, DALI_LO);
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	2101      	movs	r1, #1
 800092c:	0018      	movs	r0, r3
 800092e:	f004 fe2b 	bl	8005588 <writePin>
		else
		{
			set_timer_reload_val(TE_TX_WAIT_FF1 - TE_RX_BF_MAX, &htim2);
			daliState = PRE_IDLE;
		}
		break;
 8000932:	e2c7      	b.n	8000ec4 <DALITimerIntHandler+0x854>
			set_timer_reload_val(TE_TX_WAIT_FF1 - TE_RX_BF_MAX, &htim2);
 8000934:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <DALITimerIntHandler+0x378>)
 8000936:	4a35      	ldr	r2, [pc, #212]	; (8000a0c <DALITimerIntHandler+0x39c>)
 8000938:	0019      	movs	r1, r3
 800093a:	0010      	movs	r0, r2
 800093c:	f005 faaa 	bl	8005e94 <set_timer_reload_val>
			daliState = PRE_IDLE;
 8000940:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <DALITimerIntHandler+0x360>)
 8000942:	2209      	movs	r2, #9
 8000944:	701a      	strb	r2, [r3, #0]
		break;
 8000946:	e2bd      	b.n	8000ec4 <DALITimerIntHandler+0x854>
	case WAIT_AFTER_RX_BACKFRAME:
		daliState = IDLE;
 8000948:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <DALITimerIntHandler+0x360>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
		disable_timer_int(&htim2);
 800094e:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <DALITimerIntHandler+0x378>)
 8000950:	0018      	movs	r0, r3
 8000952:	f005 fad0 	bl	8005ef6 <disable_timer_int>
		break;
 8000956:	e2b5      	b.n	8000ec4 <DALITimerIntHandler+0x854>
	case BREAK:
		writePin(TX_Pin, DALI_HI);
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	2100      	movs	r1, #0
 800095e:	0018      	movs	r0, r3
 8000960:	f004 fe12 	bl	8005588 <writePin>
		uint8_t wait = 30;
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	221e      	movs	r2, #30
 8000968:	701a      	strb	r2, [r3, #0]
		while (wait--);	// Add a dummy line to make sure the bus line is released before checking it
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	1dfb      	adds	r3, r7, #7
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	1dfa      	adds	r2, r7, #7
 8000972:	1e59      	subs	r1, r3, #1
 8000974:	7011      	strb	r1, [r2, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d1f8      	bne.n	800096c <DALITimerIntHandler+0x2fc>
		if(readPin(RX_Pin) == DALI_LO)
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	0018      	movs	r0, r3
 8000980:	f004 fe36 	bl	80055f0 <readPin>
 8000984:	0003      	movs	r3, r0
 8000986:	2b01      	cmp	r3, #1
 8000988:	d106      	bne.n	8000998 <DALITimerIntHandler+0x328>
		{
			set_timer_reload_val(TE_TX_WAIT_FF1, &htim2);
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <DALITimerIntHandler+0x378>)
 800098c:	4a1a      	ldr	r2, [pc, #104]	; (80009f8 <DALITimerIntHandler+0x388>)
 800098e:	0019      	movs	r1, r3
 8000990:	0010      	movs	r0, r2
 8000992:	f005 fa7f 	bl	8005e94 <set_timer_reload_val>
 8000996:	e015      	b.n	80009c4 <DALITimerIntHandler+0x354>
		}
		else
		{
			// Set the recovery time randomly between the min and max range
			// to avoid collisions
			TE_random = TE_RECOVERY - 1400 + (rand() % 2800); // Between TE_RECOVERY - 1400 and TE_RECOVERY + 1400
 8000998:	f007 fe66 	bl	8008668 <rand>
 800099c:	0002      	movs	r2, r0
 800099e:	23af      	movs	r3, #175	; 0xaf
 80009a0:	0119      	lsls	r1, r3, #4
 80009a2:	0010      	movs	r0, r2
 80009a4:	f7ff fd20 	bl	80003e8 <__aeabi_idivmod>
 80009a8:	000b      	movs	r3, r1
 80009aa:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <DALITimerIntHandler+0x3a0>)
 80009ac:	4694      	mov	ip, r2
 80009ae:	4463      	add	r3, ip
 80009b0:	001a      	movs	r2, r3
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <DALITimerIntHandler+0x3a4>)
 80009b4:	601a      	str	r2, [r3, #0]
			set_timer_reload_val(TE_random, &htim2);
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <DALITimerIntHandler+0x3a4>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <DALITimerIntHandler+0x378>)
 80009bc:	0011      	movs	r1, r2
 80009be:	0018      	movs	r0, r3
 80009c0:	f005 fa68 	bl	8005e94 <set_timer_reload_val>
		}
		DALIAppendToQueue();
 80009c4:	f001 f804 	bl	80019d0 <DALIAppendToQueue>
		daliState = PRE_IDLE;
 80009c8:	4b01      	ldr	r3, [pc, #4]	; (80009d0 <DALITimerIntHandler+0x360>)
 80009ca:	2209      	movs	r2, #9
 80009cc:	701a      	strb	r2, [r3, #0]
		break;
 80009ce:	e279      	b.n	8000ec4 <DALITimerIntHandler+0x854>
 80009d0:	200007ec 	.word	0x200007ec
 80009d4:	08008874 	.word	0x08008874
 80009d8:	200000a4 	.word	0x200000a4
 80009dc:	00000d05 	.word	0x00000d05
 80009e0:	200005cc 	.word	0x200005cc
 80009e4:	0800889c 	.word	0x0800889c
 80009e8:	20000a58 	.word	0x20000a58
 80009ec:	200007e8 	.word	0x200007e8
 80009f0:	200007f8 	.word	0x200007f8
 80009f4:	200007f4 	.word	0x200007f4
 80009f8:	00016828 	.word	0x00016828
 80009fc:	000154a0 	.word	0x000154a0
 8000a00:	20000528 	.word	0x20000528
 8000a04:	2000076c 	.word	0x2000076c
 8000a08:	200007f0 	.word	0x200007f0
 8000a0c:	00001388 	.word	0x00001388
 8000a10:	000080e8 	.word	0x000080e8
 8000a14:	200000a8 	.word	0x200000a8
	case PRE_IDLE:
		if(txDataR != txDataW) // if there is data to send
 8000a18:	4bd7      	ldr	r3, [pc, #860]	; (8000d78 <DALITimerIntHandler+0x708>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4bd7      	ldr	r3, [pc, #860]	; (8000d7c <DALITimerIntHandler+0x70c>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d023      	beq.n	8000a70 <DALITimerIntHandler+0x400>
		{
			if(txData[txDataR].priority <= priorityState)
 8000a28:	4bd3      	ldr	r3, [pc, #844]	; (8000d78 <DALITimerIntHandler+0x708>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	4ad4      	ldr	r2, [pc, #848]	; (8000d80 <DALITimerIntHandler+0x710>)
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	18d3      	adds	r3, r2, r3
 8000a34:	3306      	adds	r3, #6
 8000a36:	781a      	ldrb	r2, [r3, #0]
 8000a38:	4bd2      	ldr	r3, [pc, #840]	; (8000d84 <DALITimerIntHandler+0x714>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d816      	bhi.n	8000a70 <DALITimerIntHandler+0x400>
			{
				DALIProcessSendData(txData[txDataR]);
 8000a42:	4bcd      	ldr	r3, [pc, #820]	; (8000d78 <DALITimerIntHandler+0x708>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	4acd      	ldr	r2, [pc, #820]	; (8000d80 <DALITimerIntHandler+0x710>)
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	5898      	ldr	r0, [r3, r2]
 8000a4e:	18d3      	adds	r3, r2, r3
 8000a50:	6859      	ldr	r1, [r3, #4]
 8000a52:	f000 fedb 	bl	800180c <DALIProcessSendData>
				txDataR = (txDataR + 1) % TX_QUEUE_SIZE;
 8000a56:	4bc8      	ldr	r3, [pc, #800]	; (8000d78 <DALITimerIntHandler+0x708>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	2114      	movs	r1, #20
 8000a60:	0018      	movs	r0, r3
 8000a62:	f7ff fcc1 	bl	80003e8 <__aeabi_idivmod>
 8000a66:	000b      	movs	r3, r1
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4bc3      	ldr	r3, [pc, #780]	; (8000d78 <DALITimerIntHandler+0x708>)
 8000a6c:	701a      	strb	r2, [r3, #0]
				return;
 8000a6e:	e229      	b.n	8000ec4 <DALITimerIntHandler+0x854>
			}
		}
		switch(priorityState)
 8000a70:	4bc4      	ldr	r3, [pc, #784]	; (8000d84 <DALITimerIntHandler+0x714>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b05      	cmp	r3, #5
 8000a78:	d900      	bls.n	8000a7c <DALITimerIntHandler+0x40c>
 8000a7a:	e222      	b.n	8000ec2 <DALITimerIntHandler+0x852>
 8000a7c:	009a      	lsls	r2, r3, #2
 8000a7e:	4bc2      	ldr	r3, [pc, #776]	; (8000d88 <DALITimerIntHandler+0x718>)
 8000a80:	18d3      	adds	r3, r2, r3
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	469f      	mov	pc, r3
		{
		case 1:
			set_timer_reload_val(TE_TX_WAIT_FF2 - TE_TX_WAIT_FF1, &htim2);
 8000a86:	4bc1      	ldr	r3, [pc, #772]	; (8000d8c <DALITimerIntHandler+0x71c>)
 8000a88:	4ac1      	ldr	r2, [pc, #772]	; (8000d90 <DALITimerIntHandler+0x720>)
 8000a8a:	0019      	movs	r1, r3
 8000a8c:	0010      	movs	r0, r2
 8000a8e:	f005 fa01 	bl	8005e94 <set_timer_reload_val>
			priorityState++;
 8000a92:	4bbc      	ldr	r3, [pc, #752]	; (8000d84 <DALITimerIntHandler+0x714>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	3301      	adds	r3, #1
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4bb9      	ldr	r3, [pc, #740]	; (8000d84 <DALITimerIntHandler+0x714>)
 8000a9e:	701a      	strb	r2, [r3, #0]
			break;
 8000aa0:	e036      	b.n	8000b10 <DALITimerIntHandler+0x4a0>
		case 2:
			set_timer_reload_val(TE_TX_WAIT_FF3 - TE_TX_WAIT_FF2, &htim2);
 8000aa2:	4bba      	ldr	r3, [pc, #744]	; (8000d8c <DALITimerIntHandler+0x71c>)
 8000aa4:	4abb      	ldr	r2, [pc, #748]	; (8000d94 <DALITimerIntHandler+0x724>)
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	f005 f9f3 	bl	8005e94 <set_timer_reload_val>
			priorityState++;
 8000aae:	4bb5      	ldr	r3, [pc, #724]	; (8000d84 <DALITimerIntHandler+0x714>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4bb2      	ldr	r3, [pc, #712]	; (8000d84 <DALITimerIntHandler+0x714>)
 8000aba:	701a      	strb	r2, [r3, #0]
			break;
 8000abc:	e028      	b.n	8000b10 <DALITimerIntHandler+0x4a0>
		case 3:
			set_timer_reload_val(TE_TX_WAIT_FF4 - TE_TX_WAIT_FF3, &htim2);
 8000abe:	4ab3      	ldr	r2, [pc, #716]	; (8000d8c <DALITimerIntHandler+0x71c>)
 8000ac0:	23af      	movs	r3, #175	; 0xaf
 8000ac2:	019b      	lsls	r3, r3, #6
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f005 f9e4 	bl	8005e94 <set_timer_reload_val>
			priorityState++;
 8000acc:	4bad      	ldr	r3, [pc, #692]	; (8000d84 <DALITimerIntHandler+0x714>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4bab      	ldr	r3, [pc, #684]	; (8000d84 <DALITimerIntHandler+0x714>)
 8000ad8:	701a      	strb	r2, [r3, #0]
			break;
 8000ada:	e019      	b.n	8000b10 <DALITimerIntHandler+0x4a0>
		case 4:
			set_timer_reload_val(TE_TX_WAIT_FF5 - TE_TX_WAIT_FF4, &htim2);
 8000adc:	4aab      	ldr	r2, [pc, #684]	; (8000d8c <DALITimerIntHandler+0x71c>)
 8000ade:	23c8      	movs	r3, #200	; 0xc8
 8000ae0:	019b      	lsls	r3, r3, #6
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f005 f9d5 	bl	8005e94 <set_timer_reload_val>
			priorityState++;
 8000aea:	4ba6      	ldr	r3, [pc, #664]	; (8000d84 <DALITimerIntHandler+0x714>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	3301      	adds	r3, #1
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4ba3      	ldr	r3, [pc, #652]	; (8000d84 <DALITimerIntHandler+0x714>)
 8000af6:	701a      	strb	r2, [r3, #0]
			break;
 8000af8:	e00a      	b.n	8000b10 <DALITimerIntHandler+0x4a0>
		case 5:
			disable_timer_int(&htim2);
 8000afa:	4ba4      	ldr	r3, [pc, #656]	; (8000d8c <DALITimerIntHandler+0x71c>)
 8000afc:	0018      	movs	r0, r3
 8000afe:	f005 f9fa 	bl	8005ef6 <disable_timer_int>
			daliState = IDLE;
 8000b02:	4ba5      	ldr	r3, [pc, #660]	; (8000d98 <DALITimerIntHandler+0x728>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
			priorityState = 1;
 8000b08:	4b9e      	ldr	r3, [pc, #632]	; (8000d84 <DALITimerIntHandler+0x714>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
			break;
 8000b0e:	46c0      	nop			; (mov r8, r8)
		}
		break;
 8000b10:	e1d7      	b.n	8000ec2 <DALITimerIntHandler+0x852>
		    	// a 1, just to make sure that we exit RECEIVE_DATA after the last
		    	// stop bit has been fully received.
		    	// Otherwise, if this is not the last bit of a frame, we need to
		    	// signal an error.
		 */
		if (((rxPacketLen == 8) || (rxPacketLen == 24)) && ((rxPacket & 0x01) != 0x00))
 8000b12:	4ba2      	ldr	r3, [pc, #648]	; (8000d9c <DALITimerIntHandler+0x72c>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b08      	cmp	r3, #8
 8000b1a:	d004      	beq.n	8000b26 <DALITimerIntHandler+0x4b6>
 8000b1c:	4b9f      	ldr	r3, [pc, #636]	; (8000d9c <DALITimerIntHandler+0x72c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b18      	cmp	r3, #24
 8000b24:	d10e      	bne.n	8000b44 <DALITimerIntHandler+0x4d4>
 8000b26:	4b9e      	ldr	r3, [pc, #632]	; (8000da0 <DALITimerIntHandler+0x730>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	d009      	beq.n	8000b44 <DALITimerIntHandler+0x4d4>
			/*
		    		// The last bit we've received is very likely the last one in the
		    		// transmission, and it is a '1'. Thus, we need to add a 1 Te
		    		// delay.
			 */
			daliState = RECEIVE_DATA_EXTRA_TE;
 8000b30:	4b99      	ldr	r3, [pc, #612]	; (8000d98 <DALITimerIntHandler+0x728>)
 8000b32:	2203      	movs	r2, #3
 8000b34:	701a      	strb	r2, [r3, #0]
			set_timer_reload_val(TE, &htim2);
 8000b36:	4b95      	ldr	r3, [pc, #596]	; (8000d8c <DALITimerIntHandler+0x71c>)
 8000b38:	4a9a      	ldr	r2, [pc, #616]	; (8000da4 <DALITimerIntHandler+0x734>)
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	0010      	movs	r0, r2
 8000b3e:	f005 f9a9 	bl	8005e94 <set_timer_reload_val>
				DALIProcessSendData(txData[txDataR]);
				txDataR = (txDataR + 1) % TX_QUEUE_SIZE;
				return;
		}
#endif
		break;
 8000b42:	e1bf      	b.n	8000ec4 <DALITimerIntHandler+0x854>
			if (rxPacketLen == 8)
 8000b44:	4b95      	ldr	r3, [pc, #596]	; (8000d9c <DALITimerIntHandler+0x72c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b08      	cmp	r3, #8
 8000b4c:	d13a      	bne.n	8000bc4 <DALITimerIntHandler+0x554>
				DALIFlags.rxFrameType = 1;
 8000b4e:	4b96      	ldr	r3, [pc, #600]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000b50:	781a      	ldrb	r2, [r3, #0]
 8000b52:	2120      	movs	r1, #32
 8000b54:	430a      	orrs	r2, r1
 8000b56:	701a      	strb	r2, [r3, #0]
				rxFrame = rxPacket;
 8000b58:	4b91      	ldr	r3, [pc, #580]	; (8000da0 <DALITimerIntHandler+0x730>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b93      	ldr	r3, [pc, #588]	; (8000dac <DALITimerIntHandler+0x73c>)
 8000b5e:	601a      	str	r2, [r3, #0]
				if (DALIFlags.rxFromState != WAIT_FOR_BACKFRAME)
 8000b60:	4b91      	ldr	r3, [pc, #580]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000b62:	785b      	ldrb	r3, [r3, #1]
 8000b64:	220f      	movs	r2, #15
 8000b66:	4393      	bics	r3, r2
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b50      	cmp	r3, #80	; 0x50
 8000b6c:	d007      	beq.n	8000b7e <DALITimerIntHandler+0x50e>
					DALIFlags.rxError = FRAME_TIMING_ERROR;
 8000b6e:	4b8e      	ldr	r3, [pc, #568]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	210c      	movs	r1, #12
 8000b74:	438a      	bics	r2, r1
 8000b76:	1c11      	adds	r1, r2, #0
 8000b78:	2208      	movs	r2, #8
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
				if ((halfBitNumber == 2) && (halfBitNumber == 4))
 8000b7e:	4b8c      	ldr	r3, [pc, #560]	; (8000db0 <DALITimerIntHandler+0x740>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d10c      	bne.n	8000ba2 <DALITimerIntHandler+0x532>
 8000b88:	4b89      	ldr	r3, [pc, #548]	; (8000db0 <DALITimerIntHandler+0x740>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	d107      	bne.n	8000ba2 <DALITimerIntHandler+0x532>
					DALIFlags.rxError = BIT_TIMING_ERROR;
 8000b92:	4b85      	ldr	r3, [pc, #532]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	210c      	movs	r1, #12
 8000b98:	438a      	bics	r2, r1
 8000b9a:	1c11      	adds	r1, r2, #0
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	701a      	strb	r2, [r3, #0]
				set_timer_reload_val(TE_TX_WAIT_FF1, &htim2);
 8000ba2:	4b7a      	ldr	r3, [pc, #488]	; (8000d8c <DALITimerIntHandler+0x71c>)
 8000ba4:	4a83      	ldr	r2, [pc, #524]	; (8000db4 <DALITimerIntHandler+0x744>)
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	0010      	movs	r0, r2
 8000baa:	f005 f973 	bl	8005e94 <set_timer_reload_val>
				DALIFlags.rxDone = 1;
 8000bae:	4b7e      	ldr	r3, [pc, #504]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	701a      	strb	r2, [r3, #0]
				DALIAppendToQueue();
 8000bb8:	f000 ff0a 	bl	80019d0 <DALIAppendToQueue>
				daliState = PRE_IDLE;
 8000bbc:	4b76      	ldr	r3, [pc, #472]	; (8000d98 <DALITimerIntHandler+0x728>)
 8000bbe:	2209      	movs	r2, #9
 8000bc0:	701a      	strb	r2, [r3, #0]
		break;
 8000bc2:	e17f      	b.n	8000ec4 <DALITimerIntHandler+0x854>
			else if (rxPacketLen == 24)
 8000bc4:	4b75      	ldr	r3, [pc, #468]	; (8000d9c <DALITimerIntHandler+0x72c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b18      	cmp	r3, #24
 8000bcc:	d13a      	bne.n	8000c44 <DALITimerIntHandler+0x5d4>
				DALIFlags.rxFrameType = 0;
 8000bce:	4b76      	ldr	r3, [pc, #472]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000bd0:	781a      	ldrb	r2, [r3, #0]
 8000bd2:	2120      	movs	r1, #32
 8000bd4:	438a      	bics	r2, r1
 8000bd6:	701a      	strb	r2, [r3, #0]
				rxFrame = rxPacket;
 8000bd8:	4b71      	ldr	r3, [pc, #452]	; (8000da0 <DALITimerIntHandler+0x730>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b73      	ldr	r3, [pc, #460]	; (8000dac <DALITimerIntHandler+0x73c>)
 8000bde:	601a      	str	r2, [r3, #0]
				if (DALIFlags.rxFromState == WAIT_FOR_BACKFRAME)
 8000be0:	4b71      	ldr	r3, [pc, #452]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000be2:	785b      	ldrb	r3, [r3, #1]
 8000be4:	220f      	movs	r2, #15
 8000be6:	4393      	bics	r3, r2
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b50      	cmp	r3, #80	; 0x50
 8000bec:	d107      	bne.n	8000bfe <DALITimerIntHandler+0x58e>
					DALIFlags.rxError = FRAME_TIMING_ERROR;
 8000bee:	4b6e      	ldr	r3, [pc, #440]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	210c      	movs	r1, #12
 8000bf4:	438a      	bics	r2, r1
 8000bf6:	1c11      	adds	r1, r2, #0
 8000bf8:	2208      	movs	r2, #8
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]
				if ((halfBitNumber == 2) && (halfBitNumber == 4))
 8000bfe:	4b6c      	ldr	r3, [pc, #432]	; (8000db0 <DALITimerIntHandler+0x740>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d10c      	bne.n	8000c22 <DALITimerIntHandler+0x5b2>
 8000c08:	4b69      	ldr	r3, [pc, #420]	; (8000db0 <DALITimerIntHandler+0x740>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	d107      	bne.n	8000c22 <DALITimerIntHandler+0x5b2>
					DALIFlags.rxError = BIT_TIMING_ERROR;
 8000c12:	4b65      	ldr	r3, [pc, #404]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	210c      	movs	r1, #12
 8000c18:	438a      	bics	r2, r1
 8000c1a:	1c11      	adds	r1, r2, #0
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	701a      	strb	r2, [r3, #0]
				DALIFlags.rxDone = 1;
 8000c22:	4b61      	ldr	r3, [pc, #388]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	2110      	movs	r1, #16
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	701a      	strb	r2, [r3, #0]
				set_timer_reload_val(TE_TX_WAIT_BF, &htim2);
 8000c2c:	4b57      	ldr	r3, [pc, #348]	; (8000d8c <DALITimerIntHandler+0x71c>)
 8000c2e:	4a62      	ldr	r2, [pc, #392]	; (8000db8 <DALITimerIntHandler+0x748>)
 8000c30:	0019      	movs	r1, r3
 8000c32:	0010      	movs	r0, r2
 8000c34:	f005 f92e 	bl	8005e94 <set_timer_reload_val>
				DALIAppendToQueue();
 8000c38:	f000 feca 	bl	80019d0 <DALIAppendToQueue>
				daliState = WAIT_TO_SEND_BACKFRAME;
 8000c3c:	4b56      	ldr	r3, [pc, #344]	; (8000d98 <DALITimerIntHandler+0x728>)
 8000c3e:	2206      	movs	r2, #6
 8000c40:	701a      	strb	r2, [r3, #0]
		break;
 8000c42:	e13f      	b.n	8000ec4 <DALITimerIntHandler+0x854>
				DALIFlags.rxError = FRAME_SIZE_ERROR;
 8000c44:	4b58      	ldr	r3, [pc, #352]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000c46:	781a      	ldrb	r2, [r3, #0]
 8000c48:	210c      	movs	r1, #12
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	701a      	strb	r2, [r3, #0]
				DALIFlags.rxDone = 1;
 8000c4e:	4b56      	ldr	r3, [pc, #344]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	2110      	movs	r1, #16
 8000c54:	430a      	orrs	r2, r1
 8000c56:	701a      	strb	r2, [r3, #0]
				set_timer_reload_val(TE_TX_WAIT_FF1, &htim2);
 8000c58:	4b4c      	ldr	r3, [pc, #304]	; (8000d8c <DALITimerIntHandler+0x71c>)
 8000c5a:	4a56      	ldr	r2, [pc, #344]	; (8000db4 <DALITimerIntHandler+0x744>)
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	0010      	movs	r0, r2
 8000c60:	f005 f918 	bl	8005e94 <set_timer_reload_val>
				DALIAppendToQueue();
 8000c64:	f000 feb4 	bl	80019d0 <DALIAppendToQueue>
				daliState = PRE_IDLE;
 8000c68:	4b4b      	ldr	r3, [pc, #300]	; (8000d98 <DALITimerIntHandler+0x728>)
 8000c6a:	2209      	movs	r2, #9
 8000c6c:	701a      	strb	r2, [r3, #0]
		break;
 8000c6e:	e129      	b.n	8000ec4 <DALITimerIntHandler+0x854>
		 * If we didn't have any transition during this last wait
		 * (which is safe to assume as such a transition would have stopped
		 * the transmission and signaled an error already) we can check if
		 * the received frame is valid.
		 */
		if (rxPacketLen == 8)
 8000c70:	4b4a      	ldr	r3, [pc, #296]	; (8000d9c <DALITimerIntHandler+0x72c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b08      	cmp	r3, #8
 8000c78:	d13a      	bne.n	8000cf0 <DALITimerIntHandler+0x680>
		{
			// Backward frame, same checks as during RECEIVE_DATA
			DALIFlags.rxFrameType = 1;
 8000c7a:	4b4b      	ldr	r3, [pc, #300]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000c7c:	781a      	ldrb	r2, [r3, #0]
 8000c7e:	2120      	movs	r1, #32
 8000c80:	430a      	orrs	r2, r1
 8000c82:	701a      	strb	r2, [r3, #0]
			rxFrame = rxPacket;
 8000c84:	4b46      	ldr	r3, [pc, #280]	; (8000da0 <DALITimerIntHandler+0x730>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b48      	ldr	r3, [pc, #288]	; (8000dac <DALITimerIntHandler+0x73c>)
 8000c8a:	601a      	str	r2, [r3, #0]

			if (DALIFlags.rxFromState != WAIT_FOR_BACKFRAME)
 8000c8c:	4b46      	ldr	r3, [pc, #280]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000c8e:	785b      	ldrb	r3, [r3, #1]
 8000c90:	220f      	movs	r2, #15
 8000c92:	4393      	bics	r3, r2
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b50      	cmp	r3, #80	; 0x50
 8000c98:	d007      	beq.n	8000caa <DALITimerIntHandler+0x63a>
			{
				DALIFlags.rxError = FRAME_TIMING_ERROR;
 8000c9a:	4b43      	ldr	r3, [pc, #268]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000c9c:	781a      	ldrb	r2, [r3, #0]
 8000c9e:	210c      	movs	r1, #12
 8000ca0:	438a      	bics	r2, r1
 8000ca2:	1c11      	adds	r1, r2, #0
 8000ca4:	2208      	movs	r2, #8
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
			}

			if ((halfBitNumber == 2) && (halfBitNumber == 4))
 8000caa:	4b41      	ldr	r3, [pc, #260]	; (8000db0 <DALITimerIntHandler+0x740>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d10c      	bne.n	8000cce <DALITimerIntHandler+0x65e>
 8000cb4:	4b3e      	ldr	r3, [pc, #248]	; (8000db0 <DALITimerIntHandler+0x740>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	d107      	bne.n	8000cce <DALITimerIntHandler+0x65e>
			{
				DALIFlags.rxError = BIT_TIMING_ERROR;
 8000cbe:	4b3a      	ldr	r3, [pc, #232]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	210c      	movs	r1, #12
 8000cc4:	438a      	bics	r2, r1
 8000cc6:	1c11      	adds	r1, r2, #0
 8000cc8:	2204      	movs	r2, #4
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
			}


			set_timer_reload_val(TE_TX_WAIT_FF1, &htim2);
 8000cce:	4b2f      	ldr	r3, [pc, #188]	; (8000d8c <DALITimerIntHandler+0x71c>)
 8000cd0:	4a38      	ldr	r2, [pc, #224]	; (8000db4 <DALITimerIntHandler+0x744>)
 8000cd2:	0019      	movs	r1, r3
 8000cd4:	0010      	movs	r0, r2
 8000cd6:	f005 f8dd 	bl	8005e94 <set_timer_reload_val>
			DALIFlags.rxDone = 1;
 8000cda:	4b33      	ldr	r3, [pc, #204]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	2110      	movs	r1, #16
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	701a      	strb	r2, [r3, #0]
			DALIAppendToQueue();
 8000ce4:	f000 fe74 	bl	80019d0 <DALIAppendToQueue>
			daliState = PRE_IDLE;
 8000ce8:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <DALITimerIntHandler+0x728>)
 8000cea:	2209      	movs	r2, #9
 8000cec:	701a      	strb	r2, [r3, #0]
			DALIFlags.rxDone = 1;
			set_timer_reload_val(TE_TX_WAIT_FF1, &htim2);
			DALIAppendToQueue();
			daliState = PRE_IDLE;
		}
		break;
 8000cee:	e0e9      	b.n	8000ec4 <DALITimerIntHandler+0x854>
		else if (rxPacketLen == 24)
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <DALITimerIntHandler+0x72c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b18      	cmp	r3, #24
 8000cf8:	d162      	bne.n	8000dc0 <DALITimerIntHandler+0x750>
			DALIFlags.rxFrameType = 0;
 8000cfa:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000cfc:	781a      	ldrb	r2, [r3, #0]
 8000cfe:	2120      	movs	r1, #32
 8000d00:	438a      	bics	r2, r1
 8000d02:	701a      	strb	r2, [r3, #0]
			rxFrame = rxPacket;
 8000d04:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <DALITimerIntHandler+0x730>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b28      	ldr	r3, [pc, #160]	; (8000dac <DALITimerIntHandler+0x73c>)
 8000d0a:	601a      	str	r2, [r3, #0]
			if (DALIFlags.rxFromState == WAIT_FOR_BACKFRAME)
 8000d0c:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000d0e:	785b      	ldrb	r3, [r3, #1]
 8000d10:	220f      	movs	r2, #15
 8000d12:	4393      	bics	r3, r2
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b50      	cmp	r3, #80	; 0x50
 8000d18:	d107      	bne.n	8000d2a <DALITimerIntHandler+0x6ba>
				DALIFlags.rxError = FRAME_TIMING_ERROR;
 8000d1a:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000d1c:	781a      	ldrb	r2, [r3, #0]
 8000d1e:	210c      	movs	r1, #12
 8000d20:	438a      	bics	r2, r1
 8000d22:	1c11      	adds	r1, r2, #0
 8000d24:	2208      	movs	r2, #8
 8000d26:	430a      	orrs	r2, r1
 8000d28:	701a      	strb	r2, [r3, #0]
			if ((halfBitNumber == 2) && (halfBitNumber == 4))
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <DALITimerIntHandler+0x740>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d10c      	bne.n	8000d4e <DALITimerIntHandler+0x6de>
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <DALITimerIntHandler+0x740>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d107      	bne.n	8000d4e <DALITimerIntHandler+0x6de>
				DALIFlags.rxError = BIT_TIMING_ERROR;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000d40:	781a      	ldrb	r2, [r3, #0]
 8000d42:	210c      	movs	r1, #12
 8000d44:	438a      	bics	r2, r1
 8000d46:	1c11      	adds	r1, r2, #0
 8000d48:	2204      	movs	r2, #4
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
			DALIFlags.rxDone = 1;
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <DALITimerIntHandler+0x738>)
 8000d50:	781a      	ldrb	r2, [r3, #0]
 8000d52:	2110      	movs	r1, #16
 8000d54:	430a      	orrs	r2, r1
 8000d56:	701a      	strb	r2, [r3, #0]
			set_timer_reload_val(TE_TX_WAIT_BF, &htim2);
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <DALITimerIntHandler+0x71c>)
 8000d5a:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <DALITimerIntHandler+0x748>)
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	0010      	movs	r0, r2
 8000d60:	f005 f898 	bl	8005e94 <set_timer_reload_val>
			rxPacketTime = 0;
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <DALITimerIntHandler+0x74c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
			DALIAppendToQueue();
 8000d6a:	f000 fe31 	bl	80019d0 <DALIAppendToQueue>
			daliState = WAIT_TO_SEND_BACKFRAME;
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <DALITimerIntHandler+0x728>)
 8000d70:	2206      	movs	r2, #6
 8000d72:	701a      	strb	r2, [r3, #0]
		break;
 8000d74:	e0a6      	b.n	8000ec4 <DALITimerIntHandler+0x854>
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	200007ef 	.word	0x200007ef
 8000d7c:	2000073c 	.word	0x2000073c
 8000d80:	200005d4 	.word	0x200005d4
 8000d84:	20000004 	.word	0x20000004
 8000d88:	08008980 	.word	0x08008980
 8000d8c:	20000a58 	.word	0x20000a58
 8000d90:	00002774 	.word	0x00002774
 8000d94:	0000396c 	.word	0x0000396c
 8000d98:	200007ec 	.word	0x200007ec
 8000d9c:	20000874 	.word	0x20000874
 8000da0:	200005d0 	.word	0x200005d0
 8000da4:	00000d05 	.word	0x00000d05
 8000da8:	200007f4 	.word	0x200007f4
 8000dac:	20000740 	.word	0x20000740
 8000db0:	200005cc 	.word	0x200005cc
 8000db4:	00016828 	.word	0x00016828
 8000db8:	00009c40 	.word	0x00009c40
 8000dbc:	20000528 	.word	0x20000528
			DALIFlags.rxError = FRAME_SIZE_ERROR;
 8000dc0:	4b42      	ldr	r3, [pc, #264]	; (8000ecc <DALITimerIntHandler+0x85c>)
 8000dc2:	781a      	ldrb	r2, [r3, #0]
 8000dc4:	210c      	movs	r1, #12
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
			DALIFlags.rxDone = 1;
 8000dca:	4b40      	ldr	r3, [pc, #256]	; (8000ecc <DALITimerIntHandler+0x85c>)
 8000dcc:	781a      	ldrb	r2, [r3, #0]
 8000dce:	2110      	movs	r1, #16
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	701a      	strb	r2, [r3, #0]
			set_timer_reload_val(TE_TX_WAIT_FF1, &htim2);
 8000dd4:	4b3e      	ldr	r3, [pc, #248]	; (8000ed0 <DALITimerIntHandler+0x860>)
 8000dd6:	4a3f      	ldr	r2, [pc, #252]	; (8000ed4 <DALITimerIntHandler+0x864>)
 8000dd8:	0019      	movs	r1, r3
 8000dda:	0010      	movs	r0, r2
 8000ddc:	f005 f85a 	bl	8005e94 <set_timer_reload_val>
			DALIAppendToQueue();
 8000de0:	f000 fdf6 	bl	80019d0 <DALIAppendToQueue>
			daliState = PRE_IDLE;
 8000de4:	4b3c      	ldr	r3, [pc, #240]	; (8000ed8 <DALITimerIntHandler+0x868>)
 8000de6:	2209      	movs	r2, #9
 8000de8:	701a      	strb	r2, [r3, #0]
		break;
 8000dea:	e06b      	b.n	8000ec4 <DALITimerIntHandler+0x854>
	case WAIT_TO_SEND_BACKFRAME:
		// If the received forward frame requires send-twice frame,
		// wait for the second frame, else go to idle to send a
		// backward frame if needed
		if(DALIFlags.receiveTwiceFrame == 1)
 8000dec:	4b37      	ldr	r3, [pc, #220]	; (8000ecc <DALITimerIntHandler+0x85c>)
 8000dee:	785b      	ldrb	r3, [r3, #1]
 8000df0:	2208      	movs	r2, #8
 8000df2:	4013      	ands	r3, r2
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00e      	beq.n	8000e18 <DALITimerIntHandler+0x7a8>
		{
			set_timer_reload_val(TE_RX_SEND_TWICE_FF - TE_TX_WAIT_BF, &htim2);
 8000dfa:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <DALITimerIntHandler+0x860>)
 8000dfc:	4a37      	ldr	r2, [pc, #220]	; (8000edc <DALITimerIntHandler+0x86c>)
 8000dfe:	0019      	movs	r1, r3
 8000e00:	0010      	movs	r0, r2
 8000e02:	f005 f847 	bl	8005e94 <set_timer_reload_val>
			daliState = WAIT_FOR_SECOND_FORFRAME;
 8000e06:	4b34      	ldr	r3, [pc, #208]	; (8000ed8 <DALITimerIntHandler+0x868>)
 8000e08:	2204      	movs	r2, #4
 8000e0a:	701a      	strb	r2, [r3, #0]
			DALIFlags.receiveTwiceFrame = 0;
 8000e0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <DALITimerIntHandler+0x85c>)
 8000e0e:	785a      	ldrb	r2, [r3, #1]
 8000e10:	2108      	movs	r1, #8
 8000e12:	438a      	bics	r2, r1
 8000e14:	705a      	strb	r2, [r3, #1]
				return;
			}
			set_timer_reload_val(TE_TX_WAIT_FF1 - TE_TX_WAIT_BF, &htim2);
			daliState = PRE_IDLE;
		}
		break;
 8000e16:	e055      	b.n	8000ec4 <DALITimerIntHandler+0x854>
			if((txDataR != txDataW) && (txData[txDataR].frameType == 1)) // if there is a backward frame to send
 8000e18:	4b31      	ldr	r3, [pc, #196]	; (8000ee0 <DALITimerIntHandler+0x870>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <DALITimerIntHandler+0x874>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d020      	beq.n	8000e6a <DALITimerIntHandler+0x7fa>
 8000e28:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <DALITimerIntHandler+0x870>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4a2e      	ldr	r2, [pc, #184]	; (8000ee8 <DALITimerIntHandler+0x878>)
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	18d3      	adds	r3, r2, r3
 8000e34:	3304      	adds	r3, #4
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d116      	bne.n	8000e6a <DALITimerIntHandler+0x7fa>
				DALIProcessSendData(txData[txDataR]);
 8000e3c:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <DALITimerIntHandler+0x870>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4a29      	ldr	r2, [pc, #164]	; (8000ee8 <DALITimerIntHandler+0x878>)
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	5898      	ldr	r0, [r3, r2]
 8000e48:	18d3      	adds	r3, r2, r3
 8000e4a:	6859      	ldr	r1, [r3, #4]
 8000e4c:	f000 fcde 	bl	800180c <DALIProcessSendData>
				txDataR = (txDataR + 1) % TX_QUEUE_SIZE;
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <DALITimerIntHandler+0x870>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	3301      	adds	r3, #1
 8000e58:	2114      	movs	r1, #20
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff fac4 	bl	80003e8 <__aeabi_idivmod>
 8000e60:	000b      	movs	r3, r1
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <DALITimerIntHandler+0x870>)
 8000e66:	701a      	strb	r2, [r3, #0]
				return;
 8000e68:	e02c      	b.n	8000ec4 <DALITimerIntHandler+0x854>
			set_timer_reload_val(TE_TX_WAIT_FF1 - TE_TX_WAIT_BF, &htim2);
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <DALITimerIntHandler+0x860>)
 8000e6c:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <DALITimerIntHandler+0x87c>)
 8000e6e:	0019      	movs	r1, r3
 8000e70:	0010      	movs	r0, r2
 8000e72:	f005 f80f 	bl	8005e94 <set_timer_reload_val>
			daliState = PRE_IDLE;
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <DALITimerIntHandler+0x868>)
 8000e78:	2209      	movs	r2, #9
 8000e7a:	701a      	strb	r2, [r3, #0]
		break;
 8000e7c:	e022      	b.n	8000ec4 <DALITimerIntHandler+0x854>
	case WAIT_FOR_SECOND_FORFRAME:
		// Time out while waiting for a second frame -> error
		rxFrame = 0;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <DALITimerIntHandler+0x880>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
		DALIFlags.rxError = FRAME_TIMING_ERROR;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <DALITimerIntHandler+0x85c>)
 8000e86:	781a      	ldrb	r2, [r3, #0]
 8000e88:	210c      	movs	r1, #12
 8000e8a:	438a      	bics	r2, r1
 8000e8c:	1c11      	adds	r1, r2, #0
 8000e8e:	2208      	movs	r2, #8
 8000e90:	430a      	orrs	r2, r1
 8000e92:	701a      	strb	r2, [r3, #0]
		DALIFlags.rxDone = 1;
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <DALITimerIntHandler+0x85c>)
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	2110      	movs	r1, #16
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	701a      	strb	r2, [r3, #0]
		set_timer_reload_val(TE_RX_SEND_TWICE_FF - TE_TX_WAIT_BF, &htim2);
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <DALITimerIntHandler+0x860>)
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <DALITimerIntHandler+0x86c>)
 8000ea2:	0019      	movs	r1, r3
 8000ea4:	0010      	movs	r0, r2
 8000ea6:	f004 fff5 	bl	8005e94 <set_timer_reload_val>
		// Add an empty message with rxError
		DALIAppendToQueue();
 8000eaa:	f000 fd91 	bl	80019d0 <DALIAppendToQueue>
		daliState = PRE_IDLE;
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <DALITimerIntHandler+0x868>)
 8000eb0:	2209      	movs	r2, #9
 8000eb2:	701a      	strb	r2, [r3, #0]
		break;
 8000eb4:	e006      	b.n	8000ec4 <DALITimerIntHandler+0x854>
	default:
		disable_timer_int(&htim2);
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <DALITimerIntHandler+0x860>)
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f005 f81c 	bl	8005ef6 <disable_timer_int>
		break;
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	e000      	b.n	8000ec4 <DALITimerIntHandler+0x854>
		break;
 8000ec2:	46c0      	nop			; (mov r8, r8)
	}
}
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b002      	add	sp, #8
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	200007f4 	.word	0x200007f4
 8000ed0:	20000a58 	.word	0x20000a58
 8000ed4:	00016828 	.word	0x00016828
 8000ed8:	200007ec 	.word	0x200007ec
 8000edc:	000b98c0 	.word	0x000b98c0
 8000ee0:	200007ef 	.word	0x200007ef
 8000ee4:	2000073c 	.word	0x2000073c
 8000ee8:	200005d4 	.word	0x200005d4
 8000eec:	0000cbe8 	.word	0x0000cbe8
 8000ef0:	20000740 	.word	0x20000740

08000ef4 <DALIRxIntHandler>:

void DALIRxIntHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	static uint32_t tim2_value;
	static uint16_t tim3_value;
	static uint16_t prev_halfbit;
	// A time-out of TE_STOP_MIN is set every time a transition is detection
	// Time-out means we either received a stop condition or an error
	switch(daliState)
 8000ef8:	4bdf      	ldr	r3, [pc, #892]	; (8001278 <DALIRxIntHandler+0x384>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b09      	cmp	r3, #9
 8000efe:	d901      	bls.n	8000f04 <DALIRxIntHandler+0x10>
 8000f00:	f000 fbfa 	bl	80016f8 <DALIRxIntHandler+0x804>
 8000f04:	009a      	lsls	r2, r3, #2
 8000f06:	4bdd      	ldr	r3, [pc, #884]	; (800127c <DALIRxIntHandler+0x388>)
 8000f08:	18d3      	adds	r3, r2, r3
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	469f      	mov	pc, r3
	{
	case IDLE:
	case WAIT_AFTER_RX_BACKFRAME:
	case PRE_IDLE:
		//Make sure we're not driving the line
		writePin(TX_Pin, DALI_HI);
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	2100      	movs	r1, #0
 8000f14:	0018      	movs	r0, r3
 8000f16:	f004 fb37 	bl	8005588 <writePin>
		if(readPin(RX_Pin) == DALI_HI)
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f004 fb66 	bl	80055f0 <readPin>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d101      	bne.n	8000f2c <DALIRxIntHandler+0x38>
 8000f28:	f000 fbe8 	bl	80016fc <DALIRxIntHandler+0x808>
		else
		{
			// Either there is data on the bus or the cable has been disconnected
			// Assume the former. Set time-out of 4TE, after which we'll signal
			// an error if no transition occurs.
			rxPacket = 0;
 8000f2c:	4bd4      	ldr	r3, [pc, #848]	; (8001280 <DALIRxIntHandler+0x38c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
			rxPacketLen = 0;
 8000f32:	4bd4      	ldr	r3, [pc, #848]	; (8001284 <DALIRxIntHandler+0x390>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
			halfBitNumber = 0;
 8000f38:	4bd3      	ldr	r3, [pc, #844]	; (8001288 <DALIRxIntHandler+0x394>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
			DALIFlags.rxDone = 0;
 8000f3e:	4bd3      	ldr	r3, [pc, #844]	; (800128c <DALIRxIntHandler+0x398>)
 8000f40:	781a      	ldrb	r2, [r3, #0]
 8000f42:	2110      	movs	r1, #16
 8000f44:	438a      	bics	r2, r1
 8000f46:	701a      	strb	r2, [r3, #0]
			DALIFlags.rxError = 0;
 8000f48:	4bd0      	ldr	r3, [pc, #832]	; (800128c <DALIRxIntHandler+0x398>)
 8000f4a:	781a      	ldrb	r2, [r3, #0]
 8000f4c:	210c      	movs	r1, #12
 8000f4e:	438a      	bics	r2, r1
 8000f50:	701a      	strb	r2, [r3, #0]
			DALIFlags.rxFrameType = 0;
 8000f52:	4bce      	ldr	r3, [pc, #824]	; (800128c <DALIRxIntHandler+0x398>)
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	2120      	movs	r1, #32
 8000f58:	438a      	bics	r2, r1
 8000f5a:	701a      	strb	r2, [r3, #0]
			DALIFlags.rxSendTwicePossible = 0;
 8000f5c:	4bcb      	ldr	r3, [pc, #812]	; (800128c <DALIRxIntHandler+0x398>)
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	217f      	movs	r1, #127	; 0x7f
 8000f62:	400a      	ands	r2, r1
 8000f64:	701a      	strb	r2, [r3, #0]
			DALIFlags.rxFromState = daliState;
 8000f66:	4bc4      	ldr	r3, [pc, #784]	; (8001278 <DALIRxIntHandler+0x384>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	1c1a      	adds	r2, r3, #0
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	4013      	ands	r3, r2
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4bc6      	ldr	r3, [pc, #792]	; (800128c <DALIRxIntHandler+0x398>)
 8000f74:	0110      	lsls	r0, r2, #4
 8000f76:	785a      	ldrb	r2, [r3, #1]
 8000f78:	210f      	movs	r1, #15
 8000f7a:	400a      	ands	r2, r1
 8000f7c:	1c11      	adds	r1, r2, #0
 8000f7e:	1c02      	adds	r2, r0, #0
 8000f80:	430a      	orrs	r2, r1
 8000f82:	705a      	strb	r2, [r3, #1]
			reset_timer(&htim2);
 8000f84:	4bc2      	ldr	r3, [pc, #776]	; (8001290 <DALIRxIntHandler+0x39c>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f004 ff91 	bl	8005eae <reset_timer>
			set_timer_reload_val(TE_STOP_MIN, &htim2);
 8000f8c:	4ac0      	ldr	r2, [pc, #768]	; (8001290 <DALIRxIntHandler+0x39c>)
 8000f8e:	2396      	movs	r3, #150	; 0x96
 8000f90:	01db      	lsls	r3, r3, #7
 8000f92:	0011      	movs	r1, r2
 8000f94:	0018      	movs	r0, r3
 8000f96:	f004 ff7d 	bl	8005e94 <set_timer_reload_val>
			enable_timer_int(&htim2);	// In case the timer generate an interrupt during this ISR
 8000f9a:	4bbd      	ldr	r3, [pc, #756]	; (8001290 <DALIRxIntHandler+0x39c>)
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f004 ffbb 	bl	8005f18 <enable_timer_int>
			daliState = RECEIVE_DATA;
 8000fa2:	4bb5      	ldr	r3, [pc, #724]	; (8001278 <DALIRxIntHandler+0x384>)
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000fa8:	f000 fba8 	bl	80016fc <DALIRxIntHandler+0x808>
	case SEND_DATA:
		/** Collision detection: If the timing is in the valid area and
		 * the grey area, do nothing. Otherwise signal an error and
		 * go to BREAK state*/

		if(halfBitNumber == 1)	// 1st half of start bit -> not care
 8000fac:	4bb6      	ldr	r3, [pc, #728]	; (8001288 <DALIRxIntHandler+0x394>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d105      	bne.n	8000fc2 <DALIRxIntHandler+0xce>
		{
			reset_timer(&htim3);
 8000fb6:	4bb7      	ldr	r3, [pc, #732]	; (8001294 <DALIRxIntHandler+0x3a0>)
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f004 ff78 	bl	8005eae <reset_timer>
				return;
			}
#endif
//			prev_halfbit = halfBitNumber;
		}
		break;
 8000fbe:	f000 fba6 	bl	800170e <DALIRxIntHandler+0x81a>
			tim3_value = get_timer_count(&htim3);
 8000fc2:	4bb4      	ldr	r3, [pc, #720]	; (8001294 <DALIRxIntHandler+0x3a0>)
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f004 ff8b 	bl	8005ee0 <get_timer_count>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	4bb2      	ldr	r3, [pc, #712]	; (8001298 <DALIRxIntHandler+0x3a4>)
 8000fd0:	801a      	strh	r2, [r3, #0]
			tim2_value = get_timer_count(&htim2);
 8000fd2:	4baf      	ldr	r3, [pc, #700]	; (8001290 <DALIRxIntHandler+0x39c>)
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f004 ff83 	bl	8005ee0 <get_timer_count>
 8000fda:	0002      	movs	r2, r0
 8000fdc:	4baf      	ldr	r3, [pc, #700]	; (800129c <DALIRxIntHandler+0x3a8>)
 8000fde:	601a      	str	r2, [r3, #0]
			reset_timer(&htim3);
 8000fe0:	4bac      	ldr	r3, [pc, #688]	; (8001294 <DALIRxIntHandler+0x3a0>)
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f004 ff63 	bl	8005eae <reset_timer>
			time_int2[halfBitNumber] = tim3_value;
 8000fe8:	4ba7      	ldr	r3, [pc, #668]	; (8001288 <DALIRxIntHandler+0x394>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	001a      	movs	r2, r3
 8000ff0:	4ba9      	ldr	r3, [pc, #676]	; (8001298 <DALIRxIntHandler+0x3a4>)
 8000ff2:	8819      	ldrh	r1, [r3, #0]
 8000ff4:	4baa      	ldr	r3, [pc, #680]	; (80012a0 <DALIRxIntHandler+0x3ac>)
 8000ff6:	0052      	lsls	r2, r2, #1
 8000ff8:	52d1      	strh	r1, [r2, r3]
			time_int3[halfBitNumber] = tim2_value;
 8000ffa:	4ba8      	ldr	r3, [pc, #672]	; (800129c <DALIRxIntHandler+0x3a8>)
 8000ffc:	6819      	ldr	r1, [r3, #0]
 8000ffe:	4ba2      	ldr	r3, [pc, #648]	; (8001288 <DALIRxIntHandler+0x394>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	001a      	movs	r2, r3
 8001006:	b289      	uxth	r1, r1
 8001008:	4ba6      	ldr	r3, [pc, #664]	; (80012a4 <DALIRxIntHandler+0x3b0>)
 800100a:	0052      	lsls	r2, r2, #1
 800100c:	52d1      	strh	r1, [r2, r3]
			if ((tim3_value >= TE_TX_MIN) && (tim3_value <= TE_TX_MAX))// && (readPin(RX_Pin) == DALI_LO) && (halfBitNumber < 51))
 800100e:	4ba2      	ldr	r3, [pc, #648]	; (8001298 <DALIRxIntHandler+0x3a4>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	4aa5      	ldr	r2, [pc, #660]	; (80012a8 <DALIRxIntHandler+0x3b4>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d800      	bhi.n	800101a <DALIRxIntHandler+0x126>
 8001018:	e0ac      	b.n	8001174 <DALIRxIntHandler+0x280>
 800101a:	4b9f      	ldr	r3, [pc, #636]	; (8001298 <DALIRxIntHandler+0x3a4>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	4aa3      	ldr	r2, [pc, #652]	; (80012ac <DALIRxIntHandler+0x3b8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d900      	bls.n	8001026 <DALIRxIntHandler+0x132>
 8001024:	e0a6      	b.n	8001174 <DALIRxIntHandler+0x280>
				if((halfBitNumber == 2) && ((txPacket & 0x800000) == 0) && (readPin(RX_Pin) == DALI_LO))
 8001026:	4b98      	ldr	r3, [pc, #608]	; (8001288 <DALIRxIntHandler+0x394>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d13f      	bne.n	80010b0 <DALIRxIntHandler+0x1bc>
 8001030:	4b9f      	ldr	r3, [pc, #636]	; (80012b0 <DALIRxIntHandler+0x3bc>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	041b      	lsls	r3, r3, #16
 8001038:	4013      	ands	r3, r2
 800103a:	d139      	bne.n	80010b0 <DALIRxIntHandler+0x1bc>
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	0018      	movs	r0, r3
 8001042:	f004 fad5 	bl	80055f0 <readPin>
 8001046:	0003      	movs	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d131      	bne.n	80010b0 <DALIRxIntHandler+0x1bc>
					DALIFlags.txError = 1;
 800104c:	4b8f      	ldr	r3, [pc, #572]	; (800128c <DALIRxIntHandler+0x398>)
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	430a      	orrs	r2, r1
 8001054:	701a      	strb	r2, [r3, #0]
					DALIFlags.txDone = 0;
 8001056:	4b8d      	ldr	r3, [pc, #564]	; (800128c <DALIRxIntHandler+0x398>)
 8001058:	781a      	ldrb	r2, [r3, #0]
 800105a:	2102      	movs	r1, #2
 800105c:	438a      	bics	r2, r1
 800105e:	701a      	strb	r2, [r3, #0]
					daliState = BREAK;
 8001060:	4b85      	ldr	r3, [pc, #532]	; (8001278 <DALIRxIntHandler+0x384>)
 8001062:	2208      	movs	r2, #8
 8001064:	701a      	strb	r2, [r3, #0]
					reset_timer(&htim2);
 8001066:	4b8a      	ldr	r3, [pc, #552]	; (8001290 <DALIRxIntHandler+0x39c>)
 8001068:	0018      	movs	r0, r3
 800106a:	f004 ff20 	bl	8005eae <reset_timer>
					set_timer_reload_val(TE_BREAK, &htim2);
 800106e:	4b88      	ldr	r3, [pc, #544]	; (8001290 <DALIRxIntHandler+0x39c>)
 8001070:	4a90      	ldr	r2, [pc, #576]	; (80012b4 <DALIRxIntHandler+0x3c0>)
 8001072:	0019      	movs	r1, r3
 8001074:	0010      	movs	r0, r2
 8001076:	f004 ff0d 	bl	8005e94 <set_timer_reload_val>
					enable_timer_int(&htim2);	// In case the timer generate an interrupt during this ISR
 800107a:	4b85      	ldr	r3, [pc, #532]	; (8001290 <DALIRxIntHandler+0x39c>)
 800107c:	0018      	movs	r0, r3
 800107e:	f004 ff4b 	bl	8005f18 <enable_timer_int>
					DALIAppendToQueue();
 8001082:	f000 fca5 	bl	80019d0 <DALIAppendToQueue>
					txDataR = (txDataR == 0) ? (TX_QUEUE_SIZE - 1) : (txDataR - 1);
 8001086:	4b8c      	ldr	r3, [pc, #560]	; (80012b8 <DALIRxIntHandler+0x3c4>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d005      	beq.n	800109c <DALIRxIntHandler+0x1a8>
 8001090:	4b89      	ldr	r3, [pc, #548]	; (80012b8 <DALIRxIntHandler+0x3c4>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	3b01      	subs	r3, #1
 8001098:	b2da      	uxtb	r2, r3
 800109a:	e000      	b.n	800109e <DALIRxIntHandler+0x1aa>
 800109c:	2213      	movs	r2, #19
 800109e:	4b86      	ldr	r3, [pc, #536]	; (80012b8 <DALIRxIntHandler+0x3c4>)
 80010a0:	701a      	strb	r2, [r3, #0]
					writePin(TX_Pin, DALI_LO);
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	2101      	movs	r1, #1
 80010a8:	0018      	movs	r0, r3
 80010aa:	f004 fa6d 	bl	8005588 <writePin>
					return;
 80010ae:	e32e      	b.n	800170e <DALIRxIntHandler+0x81a>
				else if(((((halfBitNumber % 2) == 0) && ((txPacket & 0xC00000) == 0x800000)) || ((halfBitNumber % 2) && prevBit && ((txPacket & 0x800000) == 0))) && (readPin(RX_Pin) == DALI_LO))
 80010b0:	4b75      	ldr	r3, [pc, #468]	; (8001288 <DALIRxIntHandler+0x394>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2201      	movs	r2, #1
 80010b8:	4013      	ands	r3, r2
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d108      	bne.n	80010d2 <DALIRxIntHandler+0x1de>
 80010c0:	4b7b      	ldr	r3, [pc, #492]	; (80012b0 <DALIRxIntHandler+0x3bc>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	23c0      	movs	r3, #192	; 0xc0
 80010c6:	041b      	lsls	r3, r3, #16
 80010c8:	401a      	ands	r2, r3
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	041b      	lsls	r3, r3, #16
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d015      	beq.n	80010fe <DALIRxIntHandler+0x20a>
 80010d2:	4b6d      	ldr	r3, [pc, #436]	; (8001288 <DALIRxIntHandler+0x394>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2201      	movs	r2, #1
 80010da:	4013      	ands	r3, r2
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d100      	bne.n	80010e4 <DALIRxIntHandler+0x1f0>
 80010e2:	e30d      	b.n	8001700 <DALIRxIntHandler+0x80c>
 80010e4:	4b75      	ldr	r3, [pc, #468]	; (80012bc <DALIRxIntHandler+0x3c8>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d100      	bne.n	80010f0 <DALIRxIntHandler+0x1fc>
 80010ee:	e307      	b.n	8001700 <DALIRxIntHandler+0x80c>
 80010f0:	4b6f      	ldr	r3, [pc, #444]	; (80012b0 <DALIRxIntHandler+0x3bc>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	041b      	lsls	r3, r3, #16
 80010f8:	4013      	ands	r3, r2
 80010fa:	d000      	beq.n	80010fe <DALIRxIntHandler+0x20a>
 80010fc:	e300      	b.n	8001700 <DALIRxIntHandler+0x80c>
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	0018      	movs	r0, r3
 8001104:	f004 fa74 	bl	80055f0 <readPin>
 8001108:	0003      	movs	r3, r0
 800110a:	2b01      	cmp	r3, #1
 800110c:	d000      	beq.n	8001110 <DALIRxIntHandler+0x21c>
 800110e:	e2f7      	b.n	8001700 <DALIRxIntHandler+0x80c>
					DALIFlags.txError = 1;
 8001110:	4b5e      	ldr	r3, [pc, #376]	; (800128c <DALIRxIntHandler+0x398>)
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	2101      	movs	r1, #1
 8001116:	430a      	orrs	r2, r1
 8001118:	701a      	strb	r2, [r3, #0]
					DALIFlags.txDone = 0;
 800111a:	4b5c      	ldr	r3, [pc, #368]	; (800128c <DALIRxIntHandler+0x398>)
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	2102      	movs	r1, #2
 8001120:	438a      	bics	r2, r1
 8001122:	701a      	strb	r2, [r3, #0]
					daliState = BREAK;
 8001124:	4b54      	ldr	r3, [pc, #336]	; (8001278 <DALIRxIntHandler+0x384>)
 8001126:	2208      	movs	r2, #8
 8001128:	701a      	strb	r2, [r3, #0]
					reset_timer(&htim2);
 800112a:	4b59      	ldr	r3, [pc, #356]	; (8001290 <DALIRxIntHandler+0x39c>)
 800112c:	0018      	movs	r0, r3
 800112e:	f004 febe 	bl	8005eae <reset_timer>
					set_timer_reload_val(TE_BREAK, &htim2);
 8001132:	4b57      	ldr	r3, [pc, #348]	; (8001290 <DALIRxIntHandler+0x39c>)
 8001134:	4a5f      	ldr	r2, [pc, #380]	; (80012b4 <DALIRxIntHandler+0x3c0>)
 8001136:	0019      	movs	r1, r3
 8001138:	0010      	movs	r0, r2
 800113a:	f004 feab 	bl	8005e94 <set_timer_reload_val>
					enable_timer_int(&htim2);	// In case the timer generate an interrupt during this ISR
 800113e:	4b54      	ldr	r3, [pc, #336]	; (8001290 <DALIRxIntHandler+0x39c>)
 8001140:	0018      	movs	r0, r3
 8001142:	f004 fee9 	bl	8005f18 <enable_timer_int>
					DALIAppendToQueue();
 8001146:	f000 fc43 	bl	80019d0 <DALIAppendToQueue>
					txDataR = (txDataR == 0) ? (TX_QUEUE_SIZE - 1) : (txDataR - 1);
 800114a:	4b5b      	ldr	r3, [pc, #364]	; (80012b8 <DALIRxIntHandler+0x3c4>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <DALIRxIntHandler+0x26c>
 8001154:	4b58      	ldr	r3, [pc, #352]	; (80012b8 <DALIRxIntHandler+0x3c4>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	3b01      	subs	r3, #1
 800115c:	b2da      	uxtb	r2, r3
 800115e:	e000      	b.n	8001162 <DALIRxIntHandler+0x26e>
 8001160:	2213      	movs	r2, #19
 8001162:	4b55      	ldr	r3, [pc, #340]	; (80012b8 <DALIRxIntHandler+0x3c4>)
 8001164:	701a      	strb	r2, [r3, #0]
					writePin(TX_Pin, DALI_LO);
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	2101      	movs	r1, #1
 800116c:	0018      	movs	r0, r3
 800116e:	f004 fa0b 	bl	8005588 <writePin>
					return;
 8001172:	e2cc      	b.n	800170e <DALIRxIntHandler+0x81a>
			else if ((tim3_value >= TE2_TX_MIN) && (tim3_value <= TE2_TX_MAX))// && ((halfBitNumber - prev_halfbit) == 2))
 8001174:	4b48      	ldr	r3, [pc, #288]	; (8001298 <DALIRxIntHandler+0x3a4>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	4a51      	ldr	r2, [pc, #324]	; (80012c0 <DALIRxIntHandler+0x3cc>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d800      	bhi.n	8001180 <DALIRxIntHandler+0x28c>
 800117e:	e0b5      	b.n	80012ec <DALIRxIntHandler+0x3f8>
 8001180:	4b45      	ldr	r3, [pc, #276]	; (8001298 <DALIRxIntHandler+0x3a4>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4a4f      	ldr	r2, [pc, #316]	; (80012c4 <DALIRxIntHandler+0x3d0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d900      	bls.n	800118c <DALIRxIntHandler+0x298>
 800118a:	e0af      	b.n	80012ec <DALIRxIntHandler+0x3f8>
				if((readPin(RX_Pin) == DALI_LO) && (prevBit == 1))
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	0018      	movs	r0, r3
 8001192:	f004 fa2d 	bl	80055f0 <readPin>
 8001196:	0003      	movs	r3, r0
 8001198:	2b01      	cmp	r3, #1
 800119a:	d11c      	bne.n	80011d6 <DALIRxIntHandler+0x2e2>
 800119c:	4b47      	ldr	r3, [pc, #284]	; (80012bc <DALIRxIntHandler+0x3c8>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d117      	bne.n	80011d6 <DALIRxIntHandler+0x2e2>
					if(((halfBitNumber % 2) == 1) && (tim3_value < (TE + TE_TX_MIN)))
 80011a6:	4b38      	ldr	r3, [pc, #224]	; (8001288 <DALIRxIntHandler+0x394>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2201      	movs	r2, #1
 80011ae:	4013      	ands	r3, r2
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d000      	beq.n	80011b8 <DALIRxIntHandler+0x2c4>
 80011b6:	e2a5      	b.n	8001704 <DALIRxIntHandler+0x810>
 80011b8:	4b37      	ldr	r3, [pc, #220]	; (8001298 <DALIRxIntHandler+0x3a4>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	4a42      	ldr	r2, [pc, #264]	; (80012c8 <DALIRxIntHandler+0x3d4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d900      	bls.n	80011c4 <DALIRxIntHandler+0x2d0>
 80011c2:	e29f      	b.n	8001704 <DALIRxIntHandler+0x810>
						overlapTime = 2*TE - tim3_value;
 80011c4:	4b34      	ldr	r3, [pc, #208]	; (8001298 <DALIRxIntHandler+0x3a4>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	001a      	movs	r2, r3
 80011ca:	4b40      	ldr	r3, [pc, #256]	; (80012cc <DALIRxIntHandler+0x3d8>)
 80011cc:	1a9b      	subs	r3, r3, r2
 80011ce:	001a      	movs	r2, r3
 80011d0:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <DALIRxIntHandler+0x3dc>)
 80011d2:	601a      	str	r2, [r3, #0]
					return;
 80011d4:	e296      	b.n	8001704 <DALIRxIntHandler+0x810>
				else if((readPin(RX_Pin) == DALI_HI) && (prevBit == 0))
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	0018      	movs	r0, r3
 80011dc:	f004 fa08 	bl	80055f0 <readPin>
 80011e0:	1e03      	subs	r3, r0, #0
 80011e2:	d121      	bne.n	8001228 <DALIRxIntHandler+0x334>
 80011e4:	4b35      	ldr	r3, [pc, #212]	; (80012bc <DALIRxIntHandler+0x3c8>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d11c      	bne.n	8001228 <DALIRxIntHandler+0x334>
					if(((halfBitNumber % 2) == 0) && (tim3_value > (TE + TE_TX_MAX)))
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <DALIRxIntHandler+0x394>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2201      	movs	r2, #1
 80011f6:	4013      	ands	r3, r2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d000      	beq.n	8001200 <DALIRxIntHandler+0x30c>
 80011fe:	e283      	b.n	8001708 <DALIRxIntHandler+0x814>
 8001200:	4b25      	ldr	r3, [pc, #148]	; (8001298 <DALIRxIntHandler+0x3a4>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	4a33      	ldr	r2, [pc, #204]	; (80012d4 <DALIRxIntHandler+0x3e0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d800      	bhi.n	800120c <DALIRxIntHandler+0x318>
 800120a:	e27d      	b.n	8001708 <DALIRxIntHandler+0x814>
						set_timer_count((tim2_value - (tim3_value - 2*TE)), &htim2);
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <DALIRxIntHandler+0x3a8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a21      	ldr	r2, [pc, #132]	; (8001298 <DALIRxIntHandler+0x3a4>)
 8001212:	8812      	ldrh	r2, [r2, #0]
 8001214:	1a9b      	subs	r3, r3, r2
 8001216:	4a2d      	ldr	r2, [pc, #180]	; (80012cc <DALIRxIntHandler+0x3d8>)
 8001218:	4694      	mov	ip, r2
 800121a:	4463      	add	r3, ip
 800121c:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <DALIRxIntHandler+0x39c>)
 800121e:	0011      	movs	r1, r2
 8001220:	0018      	movs	r0, r3
 8001222:	f004 fe50 	bl	8005ec6 <set_timer_count>
					return;
 8001226:	e26f      	b.n	8001708 <DALIRxIntHandler+0x814>
					DALIFlags.txError = 1;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <DALIRxIntHandler+0x398>)
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	2101      	movs	r1, #1
 800122e:	430a      	orrs	r2, r1
 8001230:	701a      	strb	r2, [r3, #0]
					DALIFlags.txDone = 0;
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <DALIRxIntHandler+0x398>)
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	2102      	movs	r1, #2
 8001238:	438a      	bics	r2, r1
 800123a:	701a      	strb	r2, [r3, #0]
					daliState = BREAK;
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <DALIRxIntHandler+0x384>)
 800123e:	2208      	movs	r2, #8
 8001240:	701a      	strb	r2, [r3, #0]
					reset_timer(&htim2);
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <DALIRxIntHandler+0x39c>)
 8001244:	0018      	movs	r0, r3
 8001246:	f004 fe32 	bl	8005eae <reset_timer>
					set_timer_reload_val(TE_BREAK, &htim2);
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <DALIRxIntHandler+0x39c>)
 800124c:	4a19      	ldr	r2, [pc, #100]	; (80012b4 <DALIRxIntHandler+0x3c0>)
 800124e:	0019      	movs	r1, r3
 8001250:	0010      	movs	r0, r2
 8001252:	f004 fe1f 	bl	8005e94 <set_timer_reload_val>
					enable_timer_int(&htim2);	// In case the timer generate an interrupt during this ISR
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <DALIRxIntHandler+0x39c>)
 8001258:	0018      	movs	r0, r3
 800125a:	f004 fe5d 	bl	8005f18 <enable_timer_int>
					DALIAppendToQueue();
 800125e:	f000 fbb7 	bl	80019d0 <DALIAppendToQueue>
					txDataR = (txDataR == 0) ? (TX_QUEUE_SIZE - 1) : (txDataR - 1);
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <DALIRxIntHandler+0x3c4>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d035      	beq.n	80012d8 <DALIRxIntHandler+0x3e4>
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <DALIRxIntHandler+0x3c4>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	3b01      	subs	r3, #1
 8001274:	b2da      	uxtb	r2, r3
 8001276:	e030      	b.n	80012da <DALIRxIntHandler+0x3e6>
 8001278:	200007ec 	.word	0x200007ec
 800127c:	08008998 	.word	0x08008998
 8001280:	200005d0 	.word	0x200005d0
 8001284:	20000874 	.word	0x20000874
 8001288:	200005cc 	.word	0x200005cc
 800128c:	200007f4 	.word	0x200007f4
 8001290:	20000a58 	.word	0x20000a58
 8001294:	200009d8 	.word	0x200009d8
 8001298:	200000ac 	.word	0x200000ac
 800129c:	200000b0 	.word	0x200000b0
 80012a0:	20000674 	.word	0x20000674
 80012a4:	200007fc 	.word	0x200007fc
 80012a8:	00000b25 	.word	0x00000b25
 80012ac:	00000ee6 	.word	0x00000ee6
 80012b0:	200007e8 	.word	0x200007e8
 80012b4:	000028a0 	.word	0x000028a0
 80012b8:	200007ef 	.word	0x200007ef
 80012bc:	200007f8 	.word	0x200007f8
 80012c0:	0000169a 	.word	0x0000169a
 80012c4:	00001d7a 	.word	0x00001d7a
 80012c8:	0000182a 	.word	0x0000182a
 80012cc:	00001a0a 	.word	0x00001a0a
 80012d0:	200000a4 	.word	0x200000a4
 80012d4:	00001beb 	.word	0x00001beb
 80012d8:	2213      	movs	r2, #19
 80012da:	4bdf      	ldr	r3, [pc, #892]	; (8001658 <DALIRxIntHandler+0x764>)
 80012dc:	701a      	strb	r2, [r3, #0]
					writePin(TX_Pin, DALI_LO);
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	2101      	movs	r1, #1
 80012e4:	0018      	movs	r0, r3
 80012e6:	f004 f94f 	bl	8005588 <writePin>
					return;
 80012ea:	e210      	b.n	800170e <DALIRxIntHandler+0x81a>
				DALIFlags.txError = 1;
 80012ec:	4bdb      	ldr	r3, [pc, #876]	; (800165c <DALIRxIntHandler+0x768>)
 80012ee:	781a      	ldrb	r2, [r3, #0]
 80012f0:	2101      	movs	r1, #1
 80012f2:	430a      	orrs	r2, r1
 80012f4:	701a      	strb	r2, [r3, #0]
				DALIFlags.txDone = 0;
 80012f6:	4bd9      	ldr	r3, [pc, #868]	; (800165c <DALIRxIntHandler+0x768>)
 80012f8:	781a      	ldrb	r2, [r3, #0]
 80012fa:	2102      	movs	r1, #2
 80012fc:	438a      	bics	r2, r1
 80012fe:	701a      	strb	r2, [r3, #0]
				daliState = BREAK;
 8001300:	4bd7      	ldr	r3, [pc, #860]	; (8001660 <DALIRxIntHandler+0x76c>)
 8001302:	2208      	movs	r2, #8
 8001304:	701a      	strb	r2, [r3, #0]
				reset_timer(&htim2);
 8001306:	4bd7      	ldr	r3, [pc, #860]	; (8001664 <DALIRxIntHandler+0x770>)
 8001308:	0018      	movs	r0, r3
 800130a:	f004 fdd0 	bl	8005eae <reset_timer>
				set_timer_reload_val(TE_BREAK, &htim2);
 800130e:	4bd5      	ldr	r3, [pc, #852]	; (8001664 <DALIRxIntHandler+0x770>)
 8001310:	4ad5      	ldr	r2, [pc, #852]	; (8001668 <DALIRxIntHandler+0x774>)
 8001312:	0019      	movs	r1, r3
 8001314:	0010      	movs	r0, r2
 8001316:	f004 fdbd 	bl	8005e94 <set_timer_reload_val>
				enable_timer_int(&htim2);	// In case the timer generate an interrupt during this ISR
 800131a:	4bd2      	ldr	r3, [pc, #840]	; (8001664 <DALIRxIntHandler+0x770>)
 800131c:	0018      	movs	r0, r3
 800131e:	f004 fdfb 	bl	8005f18 <enable_timer_int>
				DALIAppendToQueue();
 8001322:	f000 fb55 	bl	80019d0 <DALIAppendToQueue>
				txDataR = (txDataR == 0) ? (TX_QUEUE_SIZE - 1) : (txDataR - 1);
 8001326:	4bcc      	ldr	r3, [pc, #816]	; (8001658 <DALIRxIntHandler+0x764>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <DALIRxIntHandler+0x448>
 8001330:	4bc9      	ldr	r3, [pc, #804]	; (8001658 <DALIRxIntHandler+0x764>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	3b01      	subs	r3, #1
 8001338:	b2da      	uxtb	r2, r3
 800133a:	e000      	b.n	800133e <DALIRxIntHandler+0x44a>
 800133c:	2213      	movs	r2, #19
 800133e:	4bc6      	ldr	r3, [pc, #792]	; (8001658 <DALIRxIntHandler+0x764>)
 8001340:	701a      	strb	r2, [r3, #0]
				writePin(TX_Pin, DALI_LO);
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	2101      	movs	r1, #1
 8001348:	0018      	movs	r0, r3
 800134a:	f004 f91d 	bl	8005588 <writePin>
				return;
 800134e:	e1de      	b.n	800170e <DALIRxIntHandler+0x81a>
		// The DALIFlags.rxFromWaitForBackframe bit will tell later states
		// that the current frame started being received at this point. If
		// it turns out this is a backward frame, this is a valid frame, whereas
		// if it turns out to be a forward frame, this will flag an error.

		rxPacket = 0;
 8001350:	4bc6      	ldr	r3, [pc, #792]	; (800166c <DALIRxIntHandler+0x778>)
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
		rxPacketLen = 0;
 8001356:	4bc6      	ldr	r3, [pc, #792]	; (8001670 <DALIRxIntHandler+0x77c>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
		halfBitNumber = 0;
 800135c:	4bc5      	ldr	r3, [pc, #788]	; (8001674 <DALIRxIntHandler+0x780>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
		DALIFlags.rxDone = 0;
 8001362:	4bbe      	ldr	r3, [pc, #760]	; (800165c <DALIRxIntHandler+0x768>)
 8001364:	781a      	ldrb	r2, [r3, #0]
 8001366:	2110      	movs	r1, #16
 8001368:	438a      	bics	r2, r1
 800136a:	701a      	strb	r2, [r3, #0]
		DALIFlags.rxError = 0;
 800136c:	4bbb      	ldr	r3, [pc, #748]	; (800165c <DALIRxIntHandler+0x768>)
 800136e:	781a      	ldrb	r2, [r3, #0]
 8001370:	210c      	movs	r1, #12
 8001372:	438a      	bics	r2, r1
 8001374:	701a      	strb	r2, [r3, #0]
		DALIFlags.rxFrameType = 0;		// Assume forward frame although it should be backframe, will re-check after receive the whole frame
 8001376:	4bb9      	ldr	r3, [pc, #740]	; (800165c <DALIRxIntHandler+0x768>)
 8001378:	781a      	ldrb	r2, [r3, #0]
 800137a:	2120      	movs	r1, #32
 800137c:	438a      	bics	r2, r1
 800137e:	701a      	strb	r2, [r3, #0]
		DALIFlags.rxSendTwicePossible = 0;
 8001380:	4bb6      	ldr	r3, [pc, #728]	; (800165c <DALIRxIntHandler+0x768>)
 8001382:	781a      	ldrb	r2, [r3, #0]
 8001384:	217f      	movs	r1, #127	; 0x7f
 8001386:	400a      	ands	r2, r1
 8001388:	701a      	strb	r2, [r3, #0]
		DALIFlags.rxFromState = daliState;
 800138a:	4bb5      	ldr	r3, [pc, #724]	; (8001660 <DALIRxIntHandler+0x76c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	1c1a      	adds	r2, r3, #0
 8001390:	230f      	movs	r3, #15
 8001392:	4013      	ands	r3, r2
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4bb1      	ldr	r3, [pc, #708]	; (800165c <DALIRxIntHandler+0x768>)
 8001398:	0110      	lsls	r0, r2, #4
 800139a:	785a      	ldrb	r2, [r3, #1]
 800139c:	210f      	movs	r1, #15
 800139e:	400a      	ands	r2, r1
 80013a0:	1c11      	adds	r1, r2, #0
 80013a2:	1c02      	adds	r2, r0, #0
 80013a4:	430a      	orrs	r2, r1
 80013a6:	705a      	strb	r2, [r3, #1]
		reset_timer(&htim2);
 80013a8:	4bae      	ldr	r3, [pc, #696]	; (8001664 <DALIRxIntHandler+0x770>)
 80013aa:	0018      	movs	r0, r3
 80013ac:	f004 fd7f 	bl	8005eae <reset_timer>
		set_timer_reload_val(TE_STOP_MIN, &htim2);
 80013b0:	4aac      	ldr	r2, [pc, #688]	; (8001664 <DALIRxIntHandler+0x770>)
 80013b2:	2396      	movs	r3, #150	; 0x96
 80013b4:	01db      	lsls	r3, r3, #7
 80013b6:	0011      	movs	r1, r2
 80013b8:	0018      	movs	r0, r3
 80013ba:	f004 fd6b 	bl	8005e94 <set_timer_reload_val>
		daliState = RECEIVE_DATA;
 80013be:	4ba8      	ldr	r3, [pc, #672]	; (8001660 <DALIRxIntHandler+0x76c>)
 80013c0:	2202      	movs	r2, #2
 80013c2:	701a      	strb	r2, [r3, #0]
		// Timer may have overflowed while we were servicing this
		// interrupt
		enable_timer_int(&htim2);
 80013c4:	4ba7      	ldr	r3, [pc, #668]	; (8001664 <DALIRxIntHandler+0x770>)
 80013c6:	0018      	movs	r0, r3
 80013c8:	f004 fda6 	bl	8005f18 <enable_timer_int>
		break;
 80013cc:	e19f      	b.n	800170e <DALIRxIntHandler+0x81a>
	case WAIT_TO_SEND_BACKFRAME:
		// Transition during this state signals a frame that could be a send-twice frame
		rxPacket = 0;
 80013ce:	4ba7      	ldr	r3, [pc, #668]	; (800166c <DALIRxIntHandler+0x778>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
		rxPacketLen = 0;
 80013d4:	4ba6      	ldr	r3, [pc, #664]	; (8001670 <DALIRxIntHandler+0x77c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
		halfBitNumber = 0;
 80013da:	4ba6      	ldr	r3, [pc, #664]	; (8001674 <DALIRxIntHandler+0x780>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
		DALIFlags.rxDone = 0;
 80013e0:	4b9e      	ldr	r3, [pc, #632]	; (800165c <DALIRxIntHandler+0x768>)
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	2110      	movs	r1, #16
 80013e6:	438a      	bics	r2, r1
 80013e8:	701a      	strb	r2, [r3, #0]
		DALIFlags.rxError = 0;
 80013ea:	4b9c      	ldr	r3, [pc, #624]	; (800165c <DALIRxIntHandler+0x768>)
 80013ec:	781a      	ldrb	r2, [r3, #0]
 80013ee:	210c      	movs	r1, #12
 80013f0:	438a      	bics	r2, r1
 80013f2:	701a      	strb	r2, [r3, #0]
		DALIFlags.rxFrameType = 0;
 80013f4:	4b99      	ldr	r3, [pc, #612]	; (800165c <DALIRxIntHandler+0x768>)
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	2120      	movs	r1, #32
 80013fa:	438a      	bics	r2, r1
 80013fc:	701a      	strb	r2, [r3, #0]
		DALIFlags.rxFromState = daliState;
 80013fe:	4b98      	ldr	r3, [pc, #608]	; (8001660 <DALIRxIntHandler+0x76c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	1c1a      	adds	r2, r3, #0
 8001404:	230f      	movs	r3, #15
 8001406:	4013      	ands	r3, r2
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b94      	ldr	r3, [pc, #592]	; (800165c <DALIRxIntHandler+0x768>)
 800140c:	0110      	lsls	r0, r2, #4
 800140e:	785a      	ldrb	r2, [r3, #1]
 8001410:	210f      	movs	r1, #15
 8001412:	400a      	ands	r2, r1
 8001414:	1c11      	adds	r1, r2, #0
 8001416:	1c02      	adds	r2, r0, #0
 8001418:	430a      	orrs	r2, r1
 800141a:	705a      	strb	r2, [r3, #1]
		DALIFlags.rxSendTwicePossible = 1; // This flag will tell later state to check if this frame is identical to the previous frame
 800141c:	4b8f      	ldr	r3, [pc, #572]	; (800165c <DALIRxIntHandler+0x768>)
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	4249      	negs	r1, r1
 8001424:	430a      	orrs	r2, r1
 8001426:	701a      	strb	r2, [r3, #0]
		reset_timer(&htim2);
 8001428:	4b8e      	ldr	r3, [pc, #568]	; (8001664 <DALIRxIntHandler+0x770>)
 800142a:	0018      	movs	r0, r3
 800142c:	f004 fd3f 	bl	8005eae <reset_timer>
		set_timer_reload_val(TE_STOP_MIN, &htim2);
 8001430:	4a8c      	ldr	r2, [pc, #560]	; (8001664 <DALIRxIntHandler+0x770>)
 8001432:	2396      	movs	r3, #150	; 0x96
 8001434:	01db      	lsls	r3, r3, #7
 8001436:	0011      	movs	r1, r2
 8001438:	0018      	movs	r0, r3
 800143a:	f004 fd2b 	bl	8005e94 <set_timer_reload_val>
		daliState = RECEIVE_DATA;
 800143e:	4b88      	ldr	r3, [pc, #544]	; (8001660 <DALIRxIntHandler+0x76c>)
 8001440:	2202      	movs	r2, #2
 8001442:	701a      	strb	r2, [r3, #0]
		// Timer may have overflowed while we were servicing this
		// interrupt
		enable_timer_int(&htim2);
 8001444:	4b87      	ldr	r3, [pc, #540]	; (8001664 <DALIRxIntHandler+0x770>)
 8001446:	0018      	movs	r0, r3
 8001448:	f004 fd66 	bl	8005f18 <enable_timer_int>
		break;
 800144c:	e15f      	b.n	800170e <DALIRxIntHandler+0x81a>
	case WAIT_FOR_SECOND_FORFRAME:
		// Transition during this state signals a frame that could be a send-twice frame
		rxPacket = 0;
 800144e:	4b87      	ldr	r3, [pc, #540]	; (800166c <DALIRxIntHandler+0x778>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
		rxPacketLen = 0;
 8001454:	4b86      	ldr	r3, [pc, #536]	; (8001670 <DALIRxIntHandler+0x77c>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
		halfBitNumber = 0;
 800145a:	4b86      	ldr	r3, [pc, #536]	; (8001674 <DALIRxIntHandler+0x780>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
		DALIFlags.rxDone = 0;
 8001460:	4b7e      	ldr	r3, [pc, #504]	; (800165c <DALIRxIntHandler+0x768>)
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	2110      	movs	r1, #16
 8001466:	438a      	bics	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
		DALIFlags.rxError = 0;
 800146a:	4b7c      	ldr	r3, [pc, #496]	; (800165c <DALIRxIntHandler+0x768>)
 800146c:	781a      	ldrb	r2, [r3, #0]
 800146e:	210c      	movs	r1, #12
 8001470:	438a      	bics	r2, r1
 8001472:	701a      	strb	r2, [r3, #0]
		DALIFlags.rxFrameType = 0;
 8001474:	4b79      	ldr	r3, [pc, #484]	; (800165c <DALIRxIntHandler+0x768>)
 8001476:	781a      	ldrb	r2, [r3, #0]
 8001478:	2120      	movs	r1, #32
 800147a:	438a      	bics	r2, r1
 800147c:	701a      	strb	r2, [r3, #0]
		DALIFlags.rxFromState = daliState;
 800147e:	4b78      	ldr	r3, [pc, #480]	; (8001660 <DALIRxIntHandler+0x76c>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	1c1a      	adds	r2, r3, #0
 8001484:	230f      	movs	r3, #15
 8001486:	4013      	ands	r3, r2
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4b74      	ldr	r3, [pc, #464]	; (800165c <DALIRxIntHandler+0x768>)
 800148c:	0110      	lsls	r0, r2, #4
 800148e:	785a      	ldrb	r2, [r3, #1]
 8001490:	210f      	movs	r1, #15
 8001492:	400a      	ands	r2, r1
 8001494:	1c11      	adds	r1, r2, #0
 8001496:	1c02      	adds	r2, r0, #0
 8001498:	430a      	orrs	r2, r1
 800149a:	705a      	strb	r2, [r3, #1]
		DALIFlags.rxSendTwicePossible = 1; // This flag will tell later state to check if this frame is identical to the previous frame
 800149c:	4b6f      	ldr	r3, [pc, #444]	; (800165c <DALIRxIntHandler+0x768>)
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	2180      	movs	r1, #128	; 0x80
 80014a2:	4249      	negs	r1, r1
 80014a4:	430a      	orrs	r2, r1
 80014a6:	701a      	strb	r2, [r3, #0]
		reset_timer(&htim2);
 80014a8:	4b6e      	ldr	r3, [pc, #440]	; (8001664 <DALIRxIntHandler+0x770>)
 80014aa:	0018      	movs	r0, r3
 80014ac:	f004 fcff 	bl	8005eae <reset_timer>
		set_timer_reload_val(TE_STOP_MIN, &htim2);
 80014b0:	4a6c      	ldr	r2, [pc, #432]	; (8001664 <DALIRxIntHandler+0x770>)
 80014b2:	2396      	movs	r3, #150	; 0x96
 80014b4:	01db      	lsls	r3, r3, #7
 80014b6:	0011      	movs	r1, r2
 80014b8:	0018      	movs	r0, r3
 80014ba:	f004 fceb 	bl	8005e94 <set_timer_reload_val>
		daliState = RECEIVE_DATA;
 80014be:	4b68      	ldr	r3, [pc, #416]	; (8001660 <DALIRxIntHandler+0x76c>)
 80014c0:	2202      	movs	r2, #2
 80014c2:	701a      	strb	r2, [r3, #0]
		// Timer may have overflowed while we were servicing this
		// interrupt
		enable_timer_int(&htim2);
 80014c4:	4b67      	ldr	r3, [pc, #412]	; (8001664 <DALIRxIntHandler+0x770>)
 80014c6:	0018      	movs	r0, r3
 80014c8:	f004 fd26 	bl	8005f18 <enable_timer_int>
		break;
 80014cc:	e11f      	b.n	800170e <DALIRxIntHandler+0x81a>
	case RECEIVE_DATA:
		tim2_value = get_timer_count(&htim2);
 80014ce:	4b65      	ldr	r3, [pc, #404]	; (8001664 <DALIRxIntHandler+0x770>)
 80014d0:	0018      	movs	r0, r3
 80014d2:	f004 fd05 	bl	8005ee0 <get_timer_count>
 80014d6:	0002      	movs	r2, r0
 80014d8:	4b67      	ldr	r3, [pc, #412]	; (8001678 <DALIRxIntHandler+0x784>)
 80014da:	601a      	str	r2, [r3, #0]
		reset_timer(&htim2);
 80014dc:	4b61      	ldr	r3, [pc, #388]	; (8001664 <DALIRxIntHandler+0x770>)
 80014de:	0018      	movs	r0, r3
 80014e0:	f004 fce5 	bl	8005eae <reset_timer>
		set_timer_reload_val(TE_STOP_MIN, &htim2);
 80014e4:	4a5f      	ldr	r2, [pc, #380]	; (8001664 <DALIRxIntHandler+0x770>)
 80014e6:	2396      	movs	r3, #150	; 0x96
 80014e8:	01db      	lsls	r3, r3, #7
 80014ea:	0011      	movs	r1, r2
 80014ec:	0018      	movs	r0, r3
 80014ee:	f004 fcd1 	bl	8005e94 <set_timer_reload_val>
		enable_timer_int(&htim2);	// In case the timer generate an interrupt during this ISR
 80014f2:	4b5c      	ldr	r3, [pc, #368]	; (8001664 <DALIRxIntHandler+0x770>)
 80014f4:	0018      	movs	r0, r3
 80014f6:	f004 fd0f 	bl	8005f18 <enable_timer_int>
		switch (halfBitNumber)
 80014fa:	4b5e      	ldr	r3, [pc, #376]	; (8001674 <DALIRxIntHandler+0x780>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b04      	cmp	r3, #4
 8001502:	d900      	bls.n	8001506 <DALIRxIntHandler+0x612>
 8001504:	e102      	b.n	800170c <DALIRxIntHandler+0x818>
 8001506:	009a      	lsls	r2, r3, #2
 8001508:	4b5c      	ldr	r3, [pc, #368]	; (800167c <DALIRxIntHandler+0x788>)
 800150a:	18d3      	adds	r3, r2, r3
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	469f      	mov	pc, r3
		 * 	  --> 1 TE means received 2nd half of bit 0, next state is case 1
		 * 	  	  2 TE means received 2nd half of bit 0 and 1st half of bit 1, next state is case 3
		 * We save the bit after received the first half*/

		case 0:
			if ((tim2_value >= TE_RX_MIN) && (tim2_value <= TE_RX_MAX))
 8001510:	4b59      	ldr	r3, [pc, #356]	; (8001678 <DALIRxIntHandler+0x784>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a5a      	ldr	r2, [pc, #360]	; (8001680 <DALIRxIntHandler+0x78c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d908      	bls.n	800152c <DALIRxIntHandler+0x638>
 800151a:	4b57      	ldr	r3, [pc, #348]	; (8001678 <DALIRxIntHandler+0x784>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a59      	ldr	r2, [pc, #356]	; (8001684 <DALIRxIntHandler+0x790>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d803      	bhi.n	800152c <DALIRxIntHandler+0x638>
			{
				// This is a rising at the middle of start bit so next is case 3
				halfBitNumber = 3;
 8001524:	4b53      	ldr	r3, [pc, #332]	; (8001674 <DALIRxIntHandler+0x780>)
 8001526:	2203      	movs	r2, #3
 8001528:	701a      	strb	r2, [r3, #0]
			{
				// Signal reception error if the bit timing isn't
				// respected.
				DALIFlags.rxError = BIT_TIMING_ERROR;
			}
			break;
 800152a:	e0db      	b.n	80016e4 <DALIRxIntHandler+0x7f0>
				DALIFlags.rxError = BIT_TIMING_ERROR;
 800152c:	4b4b      	ldr	r3, [pc, #300]	; (800165c <DALIRxIntHandler+0x768>)
 800152e:	781a      	ldrb	r2, [r3, #0]
 8001530:	210c      	movs	r1, #12
 8001532:	438a      	bics	r2, r1
 8001534:	1c11      	adds	r1, r2, #0
 8001536:	2204      	movs	r2, #4
 8001538:	430a      	orrs	r2, r1
 800153a:	701a      	strb	r2, [r3, #0]
			break;
 800153c:	e0d2      	b.n	80016e4 <DALIRxIntHandler+0x7f0>
		case 1:
			if ((tim2_value >= TE_RX_MIN) && (tim2_value <= TE_RX_MAX))
 800153e:	4b4e      	ldr	r3, [pc, #312]	; (8001678 <DALIRxIntHandler+0x784>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a4f      	ldr	r2, [pc, #316]	; (8001680 <DALIRxIntHandler+0x78c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d914      	bls.n	8001572 <DALIRxIntHandler+0x67e>
 8001548:	4b4b      	ldr	r3, [pc, #300]	; (8001678 <DALIRxIntHandler+0x784>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a4d      	ldr	r2, [pc, #308]	; (8001684 <DALIRxIntHandler+0x790>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d80f      	bhi.n	8001572 <DALIRxIntHandler+0x67e>
			{
				rxPacket <<= 1;
 8001552:	4b46      	ldr	r3, [pc, #280]	; (800166c <DALIRxIntHandler+0x778>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	005a      	lsls	r2, r3, #1
 8001558:	4b44      	ldr	r3, [pc, #272]	; (800166c <DALIRxIntHandler+0x778>)
 800155a:	601a      	str	r2, [r3, #0]
				rxPacketLen++;
 800155c:	4b44      	ldr	r3, [pc, #272]	; (8001670 <DALIRxIntHandler+0x77c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	3301      	adds	r3, #1
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4b42      	ldr	r3, [pc, #264]	; (8001670 <DALIRxIntHandler+0x77c>)
 8001568:	701a      	strb	r2, [r3, #0]
				halfBitNumber = 4;
 800156a:	4b42      	ldr	r3, [pc, #264]	; (8001674 <DALIRxIntHandler+0x780>)
 800156c:	2204      	movs	r2, #4
 800156e:	701a      	strb	r2, [r3, #0]
			{
				// Signal reception error if the bit timing isn't
				// respected.
				DALIFlags.rxError = BIT_TIMING_ERROR;
			}
			break;
 8001570:	e0b8      	b.n	80016e4 <DALIRxIntHandler+0x7f0>
				DALIFlags.rxError = BIT_TIMING_ERROR;
 8001572:	4b3a      	ldr	r3, [pc, #232]	; (800165c <DALIRxIntHandler+0x768>)
 8001574:	781a      	ldrb	r2, [r3, #0]
 8001576:	210c      	movs	r1, #12
 8001578:	438a      	bics	r2, r1
 800157a:	1c11      	adds	r1, r2, #0
 800157c:	2204      	movs	r2, #4
 800157e:	430a      	orrs	r2, r1
 8001580:	701a      	strb	r2, [r3, #0]
			break;
 8001582:	e0af      	b.n	80016e4 <DALIRxIntHandler+0x7f0>
		case 2:
			if ((tim2_value >= TE_RX_MIN) && (tim2_value <= TE_RX_MAX))
 8001584:	4b3c      	ldr	r3, [pc, #240]	; (8001678 <DALIRxIntHandler+0x784>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a3d      	ldr	r2, [pc, #244]	; (8001680 <DALIRxIntHandler+0x78c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d91a      	bls.n	80015c4 <DALIRxIntHandler+0x6d0>
 800158e:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <DALIRxIntHandler+0x784>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a3c      	ldr	r2, [pc, #240]	; (8001684 <DALIRxIntHandler+0x790>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d815      	bhi.n	80015c4 <DALIRxIntHandler+0x6d0>
			{
				rxPacket <<= 1;
 8001598:	4b34      	ldr	r3, [pc, #208]	; (800166c <DALIRxIntHandler+0x778>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	005a      	lsls	r2, r3, #1
 800159e:	4b33      	ldr	r3, [pc, #204]	; (800166c <DALIRxIntHandler+0x778>)
 80015a0:	601a      	str	r2, [r3, #0]
				rxPacket |= 1;
 80015a2:	4b32      	ldr	r3, [pc, #200]	; (800166c <DALIRxIntHandler+0x778>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2201      	movs	r2, #1
 80015a8:	431a      	orrs	r2, r3
 80015aa:	4b30      	ldr	r3, [pc, #192]	; (800166c <DALIRxIntHandler+0x778>)
 80015ac:	601a      	str	r2, [r3, #0]
				rxPacketLen++;
 80015ae:	4b30      	ldr	r3, [pc, #192]	; (8001670 <DALIRxIntHandler+0x77c>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	3301      	adds	r3, #1
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <DALIRxIntHandler+0x77c>)
 80015ba:	701a      	strb	r2, [r3, #0]
				halfBitNumber = 3;
 80015bc:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <DALIRxIntHandler+0x780>)
 80015be:	2203      	movs	r2, #3
 80015c0:	701a      	strb	r2, [r3, #0]
			{
				// Signal reception error if the bit timing isn't
				// respected.
				DALIFlags.rxError = BIT_TIMING_ERROR;
			}
			break;
 80015c2:	e08f      	b.n	80016e4 <DALIRxIntHandler+0x7f0>
				DALIFlags.rxError = BIT_TIMING_ERROR;
 80015c4:	4b25      	ldr	r3, [pc, #148]	; (800165c <DALIRxIntHandler+0x768>)
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	210c      	movs	r1, #12
 80015ca:	438a      	bics	r2, r1
 80015cc:	1c11      	adds	r1, r2, #0
 80015ce:	2204      	movs	r2, #4
 80015d0:	430a      	orrs	r2, r1
 80015d2:	701a      	strb	r2, [r3, #0]
			break;
 80015d4:	e086      	b.n	80016e4 <DALIRxIntHandler+0x7f0>
				writePin(TX_Pin, DALI_LO);
				writePin(LED_Pin, 0);
				asm("nop");
			}
#endif
			if ((tim2_value >= TE_RX_MIN) && (tim2_value <= TE_RX_MAX))
 80015d6:	4b28      	ldr	r3, [pc, #160]	; (8001678 <DALIRxIntHandler+0x784>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a29      	ldr	r2, [pc, #164]	; (8001680 <DALIRxIntHandler+0x78c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d908      	bls.n	80015f2 <DALIRxIntHandler+0x6fe>
 80015e0:	4b25      	ldr	r3, [pc, #148]	; (8001678 <DALIRxIntHandler+0x784>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a27      	ldr	r2, [pc, #156]	; (8001684 <DALIRxIntHandler+0x790>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d803      	bhi.n	80015f2 <DALIRxIntHandler+0x6fe>
			{
				halfBitNumber = 2;
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <DALIRxIntHandler+0x780>)
 80015ec:	2202      	movs	r2, #2
 80015ee:	701a      	strb	r2, [r3, #0]
 80015f0:	e022      	b.n	8001638 <DALIRxIntHandler+0x744>
			}
			else if ((tim2_value >= TE2_RX_MIN) && (tim2_value <= TE2_RX_MAX))
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <DALIRxIntHandler+0x784>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a24      	ldr	r2, [pc, #144]	; (8001688 <DALIRxIntHandler+0x794>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d914      	bls.n	8001626 <DALIRxIntHandler+0x732>
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <DALIRxIntHandler+0x784>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a22      	ldr	r2, [pc, #136]	; (800168c <DALIRxIntHandler+0x798>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d80f      	bhi.n	8001626 <DALIRxIntHandler+0x732>
			{
				rxPacket <<= 1;
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <DALIRxIntHandler+0x778>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	005a      	lsls	r2, r3, #1
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <DALIRxIntHandler+0x778>)
 800160e:	601a      	str	r2, [r3, #0]
				rxPacketLen++;
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <DALIRxIntHandler+0x77c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	3301      	adds	r3, #1
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <DALIRxIntHandler+0x77c>)
 800161c:	701a      	strb	r2, [r3, #0]
				halfBitNumber = 4;
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <DALIRxIntHandler+0x780>)
 8001620:	2204      	movs	r2, #4
 8001622:	701a      	strb	r2, [r3, #0]
 8001624:	e008      	b.n	8001638 <DALIRxIntHandler+0x744>
			}
			else
			{
				// Signal reception error if the bit timing isn't
				// valid.
				DALIFlags.rxError = BIT_TIMING_ERROR;
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <DALIRxIntHandler+0x768>)
 8001628:	781a      	ldrb	r2, [r3, #0]
 800162a:	210c      	movs	r1, #12
 800162c:	438a      	bics	r2, r1
 800162e:	1c11      	adds	r1, r2, #0
 8001630:	2204      	movs	r2, #4
 8001632:	430a      	orrs	r2, r1
 8001634:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001636:	e055      	b.n	80016e4 <DALIRxIntHandler+0x7f0>
 8001638:	e054      	b.n	80016e4 <DALIRxIntHandler+0x7f0>
		case 4:
			if ((tim2_value >= TE_RX_MIN) && (tim2_value <= TE_RX_MAX))
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <DALIRxIntHandler+0x784>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <DALIRxIntHandler+0x78c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d925      	bls.n	8001690 <DALIRxIntHandler+0x79c>
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <DALIRxIntHandler+0x784>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <DALIRxIntHandler+0x790>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d820      	bhi.n	8001690 <DALIRxIntHandler+0x79c>
			{
				halfBitNumber = 1;
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <DALIRxIntHandler+0x780>)
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	e045      	b.n	80016e2 <DALIRxIntHandler+0x7ee>
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	200007ef 	.word	0x200007ef
 800165c:	200007f4 	.word	0x200007f4
 8001660:	200007ec 	.word	0x200007ec
 8001664:	20000a58 	.word	0x20000a58
 8001668:	000028a0 	.word	0x000028a0
 800166c:	200005d0 	.word	0x200005d0
 8001670:	20000874 	.word	0x20000874
 8001674:	200005cc 	.word	0x200005cc
 8001678:	200000b0 	.word	0x200000b0
 800167c:	080089c0 	.word	0x080089c0
 8001680:	0000093d 	.word	0x0000093d
 8001684:	000010cc 	.word	0x000010cc
 8001688:	0000140b 	.word	0x0000140b
 800168c:	00002008 	.word	0x00002008
			}
			else if ((tim2_value >= TE2_RX_MIN) && (tim2_value <= TE2_RX_MAX))
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <DALIRxIntHandler+0x820>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a20      	ldr	r2, [pc, #128]	; (8001718 <DALIRxIntHandler+0x824>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d91a      	bls.n	80016d0 <DALIRxIntHandler+0x7dc>
 800169a:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <DALIRxIntHandler+0x820>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a1f      	ldr	r2, [pc, #124]	; (800171c <DALIRxIntHandler+0x828>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d815      	bhi.n	80016d0 <DALIRxIntHandler+0x7dc>
			{
				// Middle of a '1' bit
				rxPacket <<= 1;
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <DALIRxIntHandler+0x82c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	005a      	lsls	r2, r3, #1
 80016aa:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <DALIRxIntHandler+0x82c>)
 80016ac:	601a      	str	r2, [r3, #0]
				rxPacket |= 1;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <DALIRxIntHandler+0x82c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2201      	movs	r2, #1
 80016b4:	431a      	orrs	r2, r3
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <DALIRxIntHandler+0x82c>)
 80016b8:	601a      	str	r2, [r3, #0]
				rxPacketLen++;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <DALIRxIntHandler+0x830>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	3301      	adds	r3, #1
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <DALIRxIntHandler+0x830>)
 80016c6:	701a      	strb	r2, [r3, #0]
				halfBitNumber = 3;
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <DALIRxIntHandler+0x834>)
 80016ca:	2203      	movs	r2, #3
 80016cc:	701a      	strb	r2, [r3, #0]
 80016ce:	e008      	b.n	80016e2 <DALIRxIntHandler+0x7ee>
			}
			else
			{
				// Signal reception error if the bit timing isn't
				// respected.
				DALIFlags.rxError = BIT_TIMING_ERROR;
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <DALIRxIntHandler+0x838>)
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	210c      	movs	r1, #12
 80016d6:	438a      	bics	r2, r1
 80016d8:	1c11      	adds	r1, r2, #0
 80016da:	2204      	movs	r2, #4
 80016dc:	430a      	orrs	r2, r1
 80016de:	701a      	strb	r2, [r3, #0]
			}
			break;
 80016e0:	e7ff      	b.n	80016e2 <DALIRxIntHandler+0x7ee>
 80016e2:	46c0      	nop			; (mov r8, r8)
		}
		break;
 80016e4:	e012      	b.n	800170c <DALIRxIntHandler+0x818>
	case RECEIVE_DATA_EXTRA_TE:
		//Transition during the last half of the 3rd stop bit, which is not supposed to happen.
		DALIFlags.rxError = BIT_TIMING_ERROR;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <DALIRxIntHandler+0x838>)
 80016e8:	781a      	ldrb	r2, [r3, #0]
 80016ea:	210c      	movs	r1, #12
 80016ec:	438a      	bics	r2, r1
 80016ee:	1c11      	adds	r1, r2, #0
 80016f0:	2204      	movs	r2, #4
 80016f2:	430a      	orrs	r2, r1
 80016f4:	701a      	strb	r2, [r3, #0]
		break;
 80016f6:	e00a      	b.n	800170e <DALIRxIntHandler+0x81a>
	default:
		break;
 80016f8:	46c0      	nop			; (mov r8, r8)
 80016fa:	e008      	b.n	800170e <DALIRxIntHandler+0x81a>
		break;
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	e006      	b.n	800170e <DALIRxIntHandler+0x81a>
					return;
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	e004      	b.n	800170e <DALIRxIntHandler+0x81a>
					return;
 8001704:	46c0      	nop			; (mov r8, r8)
 8001706:	e002      	b.n	800170e <DALIRxIntHandler+0x81a>
					return;
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	e000      	b.n	800170e <DALIRxIntHandler+0x81a>
		break;
 800170c:	46c0      	nop			; (mov r8, r8)
	}
}
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	200000b0 	.word	0x200000b0
 8001718:	0000140b 	.word	0x0000140b
 800171c:	00002008 	.word	0x00002008
 8001720:	200005d0 	.word	0x200005d0
 8001724:	20000874 	.word	0x20000874
 8001728:	200005cc 	.word	0x200005cc
 800172c:	200007f4 	.word	0x200007f4

08001730 <DALISendData>:

/*********DALI Data transmission and reception*********/
uint8_t DALISendData(struct DALITxData data)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	003b      	movs	r3, r7
 8001738:	6018      	str	r0, [r3, #0]
 800173a:	6059      	str	r1, [r3, #4]
	// Check if tx queue is full, if full ignore new data
	if((txDataW + 1) % TX_QUEUE_SIZE != txDataR) // not full
 800173c:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <DALISendData+0xcc>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	3301      	adds	r3, #1
 8001744:	2114      	movs	r1, #20
 8001746:	0018      	movs	r0, r3
 8001748:	f7fe fe4e 	bl	80003e8 <__aeabi_idivmod>
 800174c:	000b      	movs	r3, r1
 800174e:	001a      	movs	r2, r3
 8001750:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <DALISendData+0xd0>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	429a      	cmp	r2, r3
 8001758:	d031      	beq.n	80017be <DALISendData+0x8e>
	{
		txData[txDataW] = data;
 800175a:	4b28      	ldr	r3, [pc, #160]	; (80017fc <DALISendData+0xcc>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	4a28      	ldr	r2, [pc, #160]	; (8001804 <DALISendData+0xd4>)
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	0039      	movs	r1, r7
 8001766:	18d3      	adds	r3, r2, r3
 8001768:	000a      	movs	r2, r1
 800176a:	ca03      	ldmia	r2!, {r0, r1}
 800176c:	c303      	stmia	r3!, {r0, r1}
		txDataW = (txDataW + 1) % TX_QUEUE_SIZE;
 800176e:	4b23      	ldr	r3, [pc, #140]	; (80017fc <DALISendData+0xcc>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	3301      	adds	r3, #1
 8001776:	2114      	movs	r1, #20
 8001778:	0018      	movs	r0, r3
 800177a:	f7fe fe35 	bl	80003e8 <__aeabi_idivmod>
 800177e:	000b      	movs	r3, r1
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <DALISendData+0xcc>)
 8001784:	701a      	strb	r2, [r3, #0]
		if(daliState == IDLE)
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <DALISendData+0xd8>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d115      	bne.n	80017ba <DALISendData+0x8a>
		{
			DALIProcessSendData(txData[txDataR]);
 800178e:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <DALISendData+0xd0>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	4a1b      	ldr	r2, [pc, #108]	; (8001804 <DALISendData+0xd4>)
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	5898      	ldr	r0, [r3, r2]
 800179a:	18d3      	adds	r3, r2, r3
 800179c:	6859      	ldr	r1, [r3, #4]
 800179e:	f000 f835 	bl	800180c <DALIProcessSendData>
			txDataR = (txDataR + 1) % TX_QUEUE_SIZE;
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <DALISendData+0xd0>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	3301      	adds	r3, #1
 80017aa:	2114      	movs	r1, #20
 80017ac:	0018      	movs	r0, r3
 80017ae:	f7fe fe1b 	bl	80003e8 <__aeabi_idivmod>
 80017b2:	000b      	movs	r3, r1
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <DALISendData+0xd0>)
 80017b8:	701a      	strb	r2, [r3, #0]
		}
		return 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e01a      	b.n	80017f4 <DALISendData+0xc4>
	}
	else // full
	{
		if(daliState == IDLE)
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <DALISendData+0xd8>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d115      	bne.n	80017f2 <DALISendData+0xc2>
		{
			DALIProcessSendData(txData[txDataR]);
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <DALISendData+0xd0>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <DALISendData+0xd4>)
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	5898      	ldr	r0, [r3, r2]
 80017d2:	18d3      	adds	r3, r2, r3
 80017d4:	6859      	ldr	r1, [r3, #4]
 80017d6:	f000 f819 	bl	800180c <DALIProcessSendData>
			txDataR = (txDataR + 1) % TX_QUEUE_SIZE;
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <DALISendData+0xd0>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	3301      	adds	r3, #1
 80017e2:	2114      	movs	r1, #20
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7fe fdff 	bl	80003e8 <__aeabi_idivmod>
 80017ea:	000b      	movs	r3, r1
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <DALISendData+0xd0>)
 80017f0:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 80017f2:	2301      	movs	r3, #1
	}
}
 80017f4:	0018      	movs	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b002      	add	sp, #8
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	2000073c 	.word	0x2000073c
 8001800:	200007ef 	.word	0x200007ef
 8001804:	200005d4 	.word	0x200005d4
 8001808:	200007ec 	.word	0x200007ec

0800180c <DALIProcessSendData>:
void DALIProcessSendData(struct DALITxData txdata)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	003b      	movs	r3, r7
 8001814:	6018      	str	r0, [r3, #0]
 8001816:	6059      	str	r1, [r3, #4]
	DALIFlags.sendTwiceFrame = txdata.sendTwice;
 8001818:	003b      	movs	r3, r7
 800181a:	795b      	ldrb	r3, [r3, #5]
 800181c:	1c1a      	adds	r2, r3, #0
 800181e:	2301      	movs	r3, #1
 8001820:	4013      	ands	r3, r2
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <DALIProcessSendData+0xf4>)
 8001826:	2101      	movs	r1, #1
 8001828:	400a      	ands	r2, r1
 800182a:	0090      	lsls	r0, r2, #2
 800182c:	785a      	ldrb	r2, [r3, #1]
 800182e:	2104      	movs	r1, #4
 8001830:	438a      	bics	r2, r1
 8001832:	1c11      	adds	r1, r2, #0
 8001834:	1c02      	adds	r2, r0, #0
 8001836:	430a      	orrs	r2, r1
 8001838:	705a      	strb	r2, [r3, #1]
	DALIFlags.txFrameType = txdata.frameType;
 800183a:	003b      	movs	r3, r7
 800183c:	791b      	ldrb	r3, [r3, #4]
 800183e:	1c1a      	adds	r2, r3, #0
 8001840:	2301      	movs	r3, #1
 8001842:	4013      	ands	r3, r2
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <DALIProcessSendData+0xf4>)
 8001848:	2101      	movs	r1, #1
 800184a:	400a      	ands	r2, r1
 800184c:	1890      	adds	r0, r2, r2
 800184e:	785a      	ldrb	r2, [r3, #1]
 8001850:	2102      	movs	r1, #2
 8001852:	438a      	bics	r2, r1
 8001854:	1c11      	adds	r1, r2, #0
 8001856:	1c02      	adds	r2, r0, #0
 8001858:	430a      	orrs	r2, r1
 800185a:	705a      	strb	r2, [r3, #1]
	DALIFlags.txError = 0;
 800185c:	4b28      	ldr	r3, [pc, #160]	; (8001900 <DALIProcessSendData+0xf4>)
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	2101      	movs	r1, #1
 8001862:	438a      	bics	r2, r1
 8001864:	701a      	strb	r2, [r3, #0]
	DALIFlags.txDone = 0;
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <DALIProcessSendData+0xf4>)
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	2102      	movs	r1, #2
 800186c:	438a      	bics	r2, r1
 800186e:	701a      	strb	r2, [r3, #0]
	if(DALIFlags.txFrameType == 1) // 8 bit frame
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <DALIProcessSendData+0xf4>)
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	2202      	movs	r2, #2
 8001876:	4013      	ands	r3, r2
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <DALIProcessSendData+0x7e>
	{
		txPacket = txdata.frame << 16;
 800187e:	003b      	movs	r3, r7
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	041a      	lsls	r2, r3, #16
 8001884:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <DALIProcessSendData+0xf8>)
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	e010      	b.n	80018ac <DALIProcessSendData+0xa0>
	}
	else
	{
		if (DALIFlags.deviceMode == 0) // 24 bit frame
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <DALIProcessSendData+0xf4>)
 800188c:	785b      	ldrb	r3, [r3, #1]
 800188e:	2201      	movs	r2, #1
 8001890:	4013      	ands	r3, r2
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d104      	bne.n	80018a2 <DALIProcessSendData+0x96>
		{
			txPacket = txdata.frame;
 8001898:	003b      	movs	r3, r7
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b19      	ldr	r3, [pc, #100]	; (8001904 <DALIProcessSendData+0xf8>)
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e004      	b.n	80018ac <DALIProcessSendData+0xa0>
		}
		else
		{
			txPacket = txdata.frame << 8; // 16 bit frame
 80018a2:	003b      	movs	r3, r7
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	021a      	lsls	r2, r3, #8
 80018a8:	4b16      	ldr	r3, [pc, #88]	; (8001904 <DALIProcessSendData+0xf8>)
 80018aa:	601a      	str	r2, [r3, #0]
		}
	}
	if(DALIFlags.sendTwiceFrame == 1)
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <DALIProcessSendData+0xf4>)
 80018ae:	785b      	ldrb	r3, [r3, #1]
 80018b0:	2204      	movs	r2, #4
 80018b2:	4013      	ands	r3, r2
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <DALIProcessSendData+0xb6>
	{
		// Save the packet in case new data come in before sending the secode send-twice frame
		txPacket_temp = txPacket;
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <DALIProcessSendData+0xf8>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <DALIProcessSendData+0xfc>)
 80018c0:	601a      	str	r2, [r3, #0]
	}
	halfBitNumber = 1;
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <DALIProcessSendData+0x100>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
	daliState = SEND_DATA;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <DALIProcessSendData+0x104>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	701a      	strb	r2, [r3, #0]
	writePin(TX_Pin, DALI_LO);
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	2101      	movs	r1, #1
 80018d4:	0018      	movs	r0, r3
 80018d6:	f003 fe57 	bl	8005588 <writePin>
	reset_timer(&htim2);
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <DALIProcessSendData+0x108>)
 80018dc:	0018      	movs	r0, r3
 80018de:	f004 fae6 	bl	8005eae <reset_timer>
	set_timer_reload_val(TE, &htim2);
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <DALIProcessSendData+0x108>)
 80018e4:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <DALIProcessSendData+0x10c>)
 80018e6:	0019      	movs	r1, r3
 80018e8:	0010      	movs	r0, r2
 80018ea:	f004 fad3 	bl	8005e94 <set_timer_reload_val>
	enable_timer_int(&htim2);
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <DALIProcessSendData+0x108>)
 80018f0:	0018      	movs	r0, r3
 80018f2:	f004 fb11 	bl	8005f18 <enable_timer_int>

}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b002      	add	sp, #8
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	200007f4 	.word	0x200007f4
 8001904:	200007e8 	.word	0x200007e8
 8001908:	200007f0 	.word	0x200007f0
 800190c:	200005cc 	.word	0x200005cc
 8001910:	200007ec 	.word	0x200007ec
 8001914:	20000a58 	.word	0x20000a58
 8001918:	00000d05 	.word	0x00000d05

0800191c <DALIDataAvailable>:

uint8_t DALIDataAvailable(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
    return rxDataR != rxDataW;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <DALIDataAvailable+0x20>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <DALIDataAvailable+0x24>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	1e5a      	subs	r2, r3, #1
 8001930:	4193      	sbcs	r3, r2
 8001932:	b2db      	uxtb	r3, r3
}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	200007ee 	.word	0x200007ee
 8001940:	200007e4 	.word	0x200007e4

08001944 <DALIReceiveData>:

struct DALIRxData DALIReceiveData(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
    rxDataR = (rxDataR + 1) % RX_QUEUE_SIZE;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <DALIReceiveData+0x3c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	3301      	adds	r3, #1
 8001954:	2114      	movs	r1, #20
 8001956:	0018      	movs	r0, r3
 8001958:	f7fe fd46 	bl	80003e8 <__aeabi_idivmod>
 800195c:	000b      	movs	r3, r1
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <DALIReceiveData+0x3c>)
 8001962:	701a      	strb	r2, [r3, #0]
    return rxData[rxDataR-1];
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <DALIReceiveData+0x3c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	3b01      	subs	r3, #1
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4905      	ldr	r1, [pc, #20]	; (8001984 <DALIReceiveData+0x40>)
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	18cb      	adds	r3, r1, r3
 8001974:	cb03      	ldmia	r3!, {r0, r1}
 8001976:	c203      	stmia	r2!, {r0, r1}
}
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	46bd      	mov	sp, r7
 800197c:	b002      	add	sp, #8
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200007ee 	.word	0x200007ee
 8001984:	2000052c 	.word	0x2000052c

08001988 <DALIClearFlags>:
{
    return daliState;
}

void DALIClearFlags(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
    uint8_t a;
    a = DALIFlags.cableConnected;
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <DALIClearFlags+0x44>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	065b      	lsls	r3, r3, #25
 8001994:	0fdb      	lsrs	r3, r3, #31
 8001996:	b2da      	uxtb	r2, r3
 8001998:	1dfb      	adds	r3, r7, #7
 800199a:	701a      	strb	r2, [r3, #0]
    DALIFlags.flags_all = 0;
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <DALIClearFlags+0x44>)
 800199e:	2200      	movs	r2, #0
 80019a0:	801a      	strh	r2, [r3, #0]
    DALIFlags.cableConnected = a;
 80019a2:	1dfb      	adds	r3, r7, #7
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2201      	movs	r2, #1
 80019a8:	4013      	ands	r3, r2
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <DALIClearFlags+0x44>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	400a      	ands	r2, r1
 80019b2:	0190      	lsls	r0, r2, #6
 80019b4:	781a      	ldrb	r2, [r3, #0]
 80019b6:	2140      	movs	r1, #64	; 0x40
 80019b8:	438a      	bics	r2, r1
 80019ba:	1c11      	adds	r1, r2, #0
 80019bc:	1c02      	adds	r2, r0, #0
 80019be:	430a      	orrs	r2, r1
 80019c0:	701a      	strb	r2, [r3, #0]
}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b002      	add	sp, #8
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	200007f4 	.word	0x200007f4

080019d0 <DALIAppendToQueue>:

void DALIAppendToQueue(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
    // are a digested version of the state machine flags at the moment this
    // function is called.

    // Make sure we don't start overwriting old data that hasn't yet been read by
    // the application.
	if((daliState == SEND_DATA) || (daliState == BREAK))
 80019d4:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <DALIAppendToQueue+0x194>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d003      	beq.n	80019e4 <DALIAppendToQueue+0x14>
 80019dc:	4b61      	ldr	r3, [pc, #388]	; (8001b64 <DALIAppendToQueue+0x194>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d120      	bne.n	8001a26 <DALIAppendToQueue+0x56>
	{
		txFlags.txDone = DALIFlags.txDone;
 80019e4:	4b60      	ldr	r3, [pc, #384]	; (8001b68 <DALIAppendToQueue+0x198>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	079b      	lsls	r3, r3, #30
 80019ea:	0fdb      	lsrs	r3, r3, #31
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4b5f      	ldr	r3, [pc, #380]	; (8001b6c <DALIAppendToQueue+0x19c>)
 80019f0:	2101      	movs	r1, #1
 80019f2:	400a      	ands	r2, r1
 80019f4:	0010      	movs	r0, r2
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	2101      	movs	r1, #1
 80019fa:	438a      	bics	r2, r1
 80019fc:	1c11      	adds	r1, r2, #0
 80019fe:	1c02      	adds	r2, r0, #0
 8001a00:	430a      	orrs	r2, r1
 8001a02:	701a      	strb	r2, [r3, #0]
		txFlags.txError = DALIFlags.txError;
 8001a04:	4b58      	ldr	r3, [pc, #352]	; (8001b68 <DALIAppendToQueue+0x198>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	07db      	lsls	r3, r3, #31
 8001a0a:	0fdb      	lsrs	r3, r3, #31
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b57      	ldr	r3, [pc, #348]	; (8001b6c <DALIAppendToQueue+0x19c>)
 8001a10:	2101      	movs	r1, #1
 8001a12:	400a      	ands	r2, r1
 8001a14:	1890      	adds	r0, r2, r2
 8001a16:	781a      	ldrb	r2, [r3, #0]
 8001a18:	2102      	movs	r1, #2
 8001a1a:	438a      	bics	r2, r1
 8001a1c:	1c11      	adds	r1, r2, #0
 8001a1e:	1c02      	adds	r2, r0, #0
 8001a20:	430a      	orrs	r2, r1
 8001a22:	701a      	strb	r2, [r3, #0]
 8001a24:	e099      	b.n	8001b5a <DALIAppendToQueue+0x18a>
	}
	else if((daliState == RECEIVE_DATA) || (daliState == RECEIVE_DATA_EXTRA_TE) || (daliState == WAIT_FOR_SECOND_FORFRAME) ||(daliState == BREAK))
 8001a26:	4b4f      	ldr	r3, [pc, #316]	; (8001b64 <DALIAppendToQueue+0x194>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d00c      	beq.n	8001a48 <DALIAppendToQueue+0x78>
 8001a2e:	4b4d      	ldr	r3, [pc, #308]	; (8001b64 <DALIAppendToQueue+0x194>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d008      	beq.n	8001a48 <DALIAppendToQueue+0x78>
 8001a36:	4b4b      	ldr	r3, [pc, #300]	; (8001b64 <DALIAppendToQueue+0x194>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d004      	beq.n	8001a48 <DALIAppendToQueue+0x78>
 8001a3e:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <DALIAppendToQueue+0x194>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d000      	beq.n	8001a48 <DALIAppendToQueue+0x78>
 8001a46:	e088      	b.n	8001b5a <DALIAppendToQueue+0x18a>
	{
	    if ((rxDataW + 1) % RX_QUEUE_SIZE != rxDataR)
 8001a48:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <DALIAppendToQueue+0x1a0>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	2114      	movs	r1, #20
 8001a52:	0018      	movs	r0, r3
 8001a54:	f7fe fcc8 	bl	80003e8 <__aeabi_idivmod>
 8001a58:	000b      	movs	r3, r1
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	4b45      	ldr	r3, [pc, #276]	; (8001b74 <DALIAppendToQueue+0x1a4>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d079      	beq.n	8001b5a <DALIAppendToQueue+0x18a>
	    {
	        // Fill data in
	        rxData[rxDataW].frame 				= rxFrame;
 8001a66:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <DALIAppendToQueue+0x1a0>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	001a      	movs	r2, r3
 8001a6e:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <DALIAppendToQueue+0x1a8>)
 8001a70:	6819      	ldr	r1, [r3, #0]
 8001a72:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <DALIAppendToQueue+0x1ac>)
 8001a74:	00d2      	lsls	r2, r2, #3
 8001a76:	50d1      	str	r1, [r2, r3]
	        rxData[rxDataW].frameLen 			= rxPacketLen;
 8001a78:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <DALIAppendToQueue+0x1a0>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	0018      	movs	r0, r3
 8001a80:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <DALIAppendToQueue+0x1b0>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b2d9      	uxtb	r1, r3
 8001a86:	4a3d      	ldr	r2, [pc, #244]	; (8001b7c <DALIAppendToQueue+0x1ac>)
 8001a88:	00c3      	lsls	r3, r0, #3
 8001a8a:	18d3      	adds	r3, r2, r3
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	1c0a      	adds	r2, r1, #0
 8001a90:	701a      	strb	r2, [r3, #0]
	        rxData[rxDataW].frameType			= DALIFlags.rxFrameType;
 8001a92:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <DALIAppendToQueue+0x1a0>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	0018      	movs	r0, r3
 8001a9a:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <DALIAppendToQueue+0x198>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	069b      	lsls	r3, r3, #26
 8001aa0:	0fdb      	lsrs	r3, r3, #31
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4935      	ldr	r1, [pc, #212]	; (8001b7c <DALIAppendToQueue+0x1ac>)
 8001aa6:	00c3      	lsls	r3, r0, #3
 8001aa8:	18cb      	adds	r3, r1, r3
 8001aaa:	2101      	movs	r1, #1
 8001aac:	400a      	ands	r2, r1
 8001aae:	0010      	movs	r0, r2
 8001ab0:	795a      	ldrb	r2, [r3, #5]
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	438a      	bics	r2, r1
 8001ab6:	1c11      	adds	r1, r2, #0
 8001ab8:	1c02      	adds	r2, r0, #0
 8001aba:	430a      	orrs	r2, r1
 8001abc:	715a      	strb	r2, [r3, #5]
	        rxData[rxDataW].rxDone				= DALIFlags.rxDone;
 8001abe:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <DALIAppendToQueue+0x1a0>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <DALIAppendToQueue+0x198>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	06db      	lsls	r3, r3, #27
 8001acc:	0fdb      	lsrs	r3, r3, #31
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	492a      	ldr	r1, [pc, #168]	; (8001b7c <DALIAppendToQueue+0x1ac>)
 8001ad2:	00c3      	lsls	r3, r0, #3
 8001ad4:	18cb      	adds	r3, r1, r3
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	400a      	ands	r2, r1
 8001ada:	1890      	adds	r0, r2, r2
 8001adc:	795a      	ldrb	r2, [r3, #5]
 8001ade:	2102      	movs	r1, #2
 8001ae0:	438a      	bics	r2, r1
 8001ae2:	1c11      	adds	r1, r2, #0
 8001ae4:	1c02      	adds	r2, r0, #0
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	715a      	strb	r2, [r3, #5]
	        rxData[rxDataW].rxError				= DALIFlags.rxError;
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <DALIAppendToQueue+0x1a0>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	0018      	movs	r0, r3
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <DALIAppendToQueue+0x198>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	071b      	lsls	r3, r3, #28
 8001af8:	0f9b      	lsrs	r3, r3, #30
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	491f      	ldr	r1, [pc, #124]	; (8001b7c <DALIAppendToQueue+0x1ac>)
 8001afe:	00c3      	lsls	r3, r0, #3
 8001b00:	18cb      	adds	r3, r1, r3
 8001b02:	2103      	movs	r1, #3
 8001b04:	400a      	ands	r2, r1
 8001b06:	0090      	lsls	r0, r2, #2
 8001b08:	795a      	ldrb	r2, [r3, #5]
 8001b0a:	210c      	movs	r1, #12
 8001b0c:	438a      	bics	r2, r1
 8001b0e:	1c11      	adds	r1, r2, #0
 8001b10:	1c02      	adds	r2, r0, #0
 8001b12:	430a      	orrs	r2, r1
 8001b14:	715a      	strb	r2, [r3, #5]
	        rxData[rxDataW].rxSendTwicePossible = DALIFlags.rxSendTwicePossible;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <DALIAppendToQueue+0x1a0>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <DALIAppendToQueue+0x198>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	061b      	lsls	r3, r3, #24
 8001b24:	0fdb      	lsrs	r3, r3, #31
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	4914      	ldr	r1, [pc, #80]	; (8001b7c <DALIAppendToQueue+0x1ac>)
 8001b2a:	00c3      	lsls	r3, r0, #3
 8001b2c:	18cb      	adds	r3, r1, r3
 8001b2e:	2101      	movs	r1, #1
 8001b30:	400a      	ands	r2, r1
 8001b32:	0110      	lsls	r0, r2, #4
 8001b34:	795a      	ldrb	r2, [r3, #5]
 8001b36:	2110      	movs	r1, #16
 8001b38:	438a      	bics	r2, r1
 8001b3a:	1c11      	adds	r1, r2, #0
 8001b3c:	1c02      	adds	r2, r0, #0
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	715a      	strb	r2, [r3, #5]

	        // Advance writing head on the circular buffer
	        rxDataW = (rxDataW + 1) % RX_QUEUE_SIZE;
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <DALIAppendToQueue+0x1a0>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	3301      	adds	r3, #1
 8001b4a:	2114      	movs	r1, #20
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7fe fc4b 	bl	80003e8 <__aeabi_idivmod>
 8001b52:	000b      	movs	r3, r1
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <DALIAppendToQueue+0x1a0>)
 8001b58:	701a      	strb	r2, [r3, #0]
	    }
	}
    // Clear machine flags such that the next frame will not inherit garbage.
    DALIClearFlags();
 8001b5a:	f7ff ff15 	bl	8001988 <DALIClearFlags>
}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200007ec 	.word	0x200007ec
 8001b68:	200007f4 	.word	0x200007f4
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	200007e4 	.word	0x200007e4
 8001b74:	200007ee 	.word	0x200007ee
 8001b78:	20000740 	.word	0x20000740
 8001b7c:	2000052c 	.word	0x2000052c
 8001b80:	20000874 	.word	0x20000874

08001b84 <DALIReceiveTwice>:

void DALIReceiveTwice()
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	DALIFlags.receiveTwiceFrame = 1;
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <DALIReceiveTwice+0x14>)
 8001b8a:	785a      	ldrb	r2, [r3, #1]
 8001b8c:	2108      	movs	r1, #8
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	705a      	strb	r2, [r3, #1]
}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200007f4 	.word	0x200007f4

08001b9c <DALI_AppInit>:
void DALI_Save_Variable();
void DALI_Send_PowerCycleEvent();
void DALI_Check_ResetState();

void DALI_AppInit()
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	DALIInit();
 8001ba0:	f7fe fd20 	bl	80005e4 <DALIInit>
	dali_memory_init();
 8001ba4:	f003 f83a 	bl	8004c1c <dali_memory_init>

	// Set up NVM variables with default value if it is the first time power up
	dali_NVM_unlock();
 8001ba8:	f003 f904 	bl	8004db4 <dali_NVM_unlock>
	if(deviceGroups_NVM == BLANK_32)
 8001bac:	4ba4      	ldr	r3, [pc, #656]	; (8001e40 <DALI_AppInit+0x2a4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	d105      	bne.n	8001bc0 <DALI_AppInit+0x24>
	{
		(* (uint16_t*) (MEMORY_NVM_VAR_ADDR + 0)) = 0;
 8001bb4:	4ba2      	ldr	r3, [pc, #648]	; (8001e40 <DALI_AppInit+0x2a4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	801a      	strh	r2, [r3, #0]
		(* (uint16_t*) (MEMORY_NVM_VAR_ADDR + 2)) = 0;
 8001bba:	4ba2      	ldr	r3, [pc, #648]	; (8001e44 <DALI_AppInit+0x2a8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	801a      	strh	r2, [r3, #0]
	}
	if(randomAddress_NVM == BLANK_32)
 8001bc0:	4ba1      	ldr	r3, [pc, #644]	; (8001e48 <DALI_AppInit+0x2ac>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	d106      	bne.n	8001bd6 <DALI_AppInit+0x3a>
	{
		(* (uint16_t*) (MEMORY_NVM_VAR_ADDR + 4)) 	= 0xFFFF;
 8001bc8:	4b9f      	ldr	r3, [pc, #636]	; (8001e48 <DALI_AppInit+0x2ac>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4252      	negs	r2, r2
 8001bce:	801a      	strh	r2, [r3, #0]
		(* (uint16_t*) (MEMORY_NVM_VAR_ADDR + 6)) 	= 0xFF;
 8001bd0:	4b9e      	ldr	r3, [pc, #632]	; (8001e4c <DALI_AppInit+0x2b0>)
 8001bd2:	22ff      	movs	r2, #255	; 0xff
 8001bd4:	801a      	strh	r2, [r3, #0]
	}
	if(shortAddress_NVM == BLANK_16)
 8001bd6:	4b9e      	ldr	r3, [pc, #632]	; (8001e50 <DALI_AppInit+0x2b4>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	4a9e      	ldr	r2, [pc, #632]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d102      	bne.n	8001be6 <DALI_AppInit+0x4a>
		shortAddress_NVM = BLANK_8;
 8001be0:	4b9b      	ldr	r3, [pc, #620]	; (8001e50 <DALI_AppInit+0x2b4>)
 8001be2:	22ff      	movs	r2, #255	; 0xff
 8001be4:	801a      	strh	r2, [r3, #0]
	if(operatingMode_NVM == BLANK_16)
 8001be6:	4b9c      	ldr	r3, [pc, #624]	; (8001e58 <DALI_AppInit+0x2bc>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	4a9a      	ldr	r2, [pc, #616]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d102      	bne.n	8001bf6 <DALI_AppInit+0x5a>
		operatingMode_NVM = 0;
 8001bf0:	4b99      	ldr	r3, [pc, #612]	; (8001e58 <DALI_AppInit+0x2bc>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	801a      	strh	r2, [r3, #0]
	if(applicationActive_NVM == BLANK_16)
 8001bf6:	4b99      	ldr	r3, [pc, #612]	; (8001e5c <DALI_AppInit+0x2c0>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	4a96      	ldr	r2, [pc, #600]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d102      	bne.n	8001c06 <DALI_AppInit+0x6a>
		applicationActive_NVM = FALSE;
 8001c00:	4b96      	ldr	r3, [pc, #600]	; (8001e5c <DALI_AppInit+0x2c0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	801a      	strh	r2, [r3, #0]
	if(powerCycleNotification_NVM == BLANK_16)
 8001c06:	4b96      	ldr	r3, [pc, #600]	; (8001e60 <DALI_AppInit+0x2c4>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	4a92      	ldr	r2, [pc, #584]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d102      	bne.n	8001c16 <DALI_AppInit+0x7a>
		powerCycleNotification_NVM = DISABLED;
 8001c10:	4b93      	ldr	r3, [pc, #588]	; (8001e60 <DALI_AppInit+0x2c4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	801a      	strh	r2, [r3, #0]
	if(eventPriority_NVM == BLANK_16)
 8001c16:	4b93      	ldr	r3, [pc, #588]	; (8001e64 <DALI_AppInit+0x2c8>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	4a8e      	ldr	r2, [pc, #568]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d102      	bne.n	8001c26 <DALI_AppInit+0x8a>
		eventPriority_NVM = 4;
 8001c20:	4b90      	ldr	r3, [pc, #576]	; (8001e64 <DALI_AppInit+0x2c8>)
 8001c22:	2204      	movs	r2, #4
 8001c24:	801a      	strh	r2, [r3, #0]

	if(numberOfInstances_NVM == BLANK_16)
 8001c26:	4b90      	ldr	r3, [pc, #576]	; (8001e68 <DALI_AppInit+0x2cc>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	4a8a      	ldr	r2, [pc, #552]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d102      	bne.n	8001c36 <DALI_AppInit+0x9a>
		numberOfInstances_NVM = 1;
 8001c30:	4b8d      	ldr	r3, [pc, #564]	; (8001e68 <DALI_AppInit+0x2cc>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	801a      	strh	r2, [r3, #0]
	if(applicationControllerPresent_NVM == BLANK_16)
 8001c36:	4b8d      	ldr	r3, [pc, #564]	; (8001e6c <DALI_AppInit+0x2d0>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	4a86      	ldr	r2, [pc, #536]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d102      	bne.n	8001c46 <DALI_AppInit+0xaa>
		applicationControllerPresent_NVM = FALSE;
 8001c40:	4b8a      	ldr	r3, [pc, #552]	; (8001e6c <DALI_AppInit+0x2d0>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	801a      	strh	r2, [r3, #0]
	if(applicationControllerAlwaysActive_NVM == BLANK_16)
 8001c46:	4b8a      	ldr	r3, [pc, #552]	; (8001e70 <DALI_AppInit+0x2d4>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	4a82      	ldr	r2, [pc, #520]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d102      	bne.n	8001c56 <DALI_AppInit+0xba>
		applicationControllerAlwaysActive_NVM = FALSE;
 8001c50:	4b87      	ldr	r3, [pc, #540]	; (8001e70 <DALI_AppInit+0x2d4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	801a      	strh	r2, [r3, #0]
	if(versionNumber_NVM == BLANK_16)
 8001c56:	4b87      	ldr	r3, [pc, #540]	; (8001e74 <DALI_AppInit+0x2d8>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	4a7e      	ldr	r2, [pc, #504]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d102      	bne.n	8001c66 <DALI_AppInit+0xca>
		versionNumber_NVM = 9;
 8001c60:	4b84      	ldr	r3, [pc, #528]	; (8001e74 <DALI_AppInit+0x2d8>)
 8001c62:	2209      	movs	r2, #9
 8001c64:	801a      	strh	r2, [r3, #0]
	if(extendedVersionNumber_NVM == BLANK_16)
 8001c66:	4b84      	ldr	r3, [pc, #528]	; (8001e78 <DALI_AppInit+0x2dc>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	4a7a      	ldr	r2, [pc, #488]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d102      	bne.n	8001c76 <DALI_AppInit+0xda>
		extendedVersionNumber_NVM = 8;
 8001c70:	4b81      	ldr	r3, [pc, #516]	; (8001e78 <DALI_AppInit+0x2dc>)
 8001c72:	2208      	movs	r2, #8
 8001c74:	801a      	strh	r2, [r3, #0]
	if(instanceGroup0_NVM == BLANK_16)
 8001c76:	4b81      	ldr	r3, [pc, #516]	; (8001e7c <DALI_AppInit+0x2e0>)
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	4a76      	ldr	r2, [pc, #472]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d102      	bne.n	8001c86 <DALI_AppInit+0xea>
		instanceGroup0_NVM = BLANK_8;
 8001c80:	4b7e      	ldr	r3, [pc, #504]	; (8001e7c <DALI_AppInit+0x2e0>)
 8001c82:	22ff      	movs	r2, #255	; 0xff
 8001c84:	801a      	strh	r2, [r3, #0]
	if(instanceGroup1_NVM == BLANK_16)
 8001c86:	4b7e      	ldr	r3, [pc, #504]	; (8001e80 <DALI_AppInit+0x2e4>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	4a72      	ldr	r2, [pc, #456]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d102      	bne.n	8001c96 <DALI_AppInit+0xfa>
		instanceGroup1_NVM = BLANK_8;
 8001c90:	4b7b      	ldr	r3, [pc, #492]	; (8001e80 <DALI_AppInit+0x2e4>)
 8001c92:	22ff      	movs	r2, #255	; 0xff
 8001c94:	801a      	strh	r2, [r3, #0]
	if(instanceGroup2_NVM == BLANK_16)
 8001c96:	4b7b      	ldr	r3, [pc, #492]	; (8001e84 <DALI_AppInit+0x2e8>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	4a6e      	ldr	r2, [pc, #440]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d102      	bne.n	8001ca6 <DALI_AppInit+0x10a>
		instanceGroup2_NVM = BLANK_8;
 8001ca0:	4b78      	ldr	r3, [pc, #480]	; (8001e84 <DALI_AppInit+0x2e8>)
 8001ca2:	22ff      	movs	r2, #255	; 0xff
 8001ca4:	801a      	strh	r2, [r3, #0]
	if(instanceActive_NVM == BLANK_16)
 8001ca6:	4b78      	ldr	r3, [pc, #480]	; (8001e88 <DALI_AppInit+0x2ec>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	4a6a      	ldr	r2, [pc, #424]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d102      	bne.n	8001cb6 <DALI_AppInit+0x11a>
		instanceActive_NVM = TRUE;
 8001cb0:	4b75      	ldr	r3, [pc, #468]	; (8001e88 <DALI_AppInit+0x2ec>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	801a      	strh	r2, [r3, #0]
	if(eventFilter_NVM == BLANK_16)
 8001cb6:	4b75      	ldr	r3, [pc, #468]	; (8001e8c <DALI_AppInit+0x2f0>)
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	4a66      	ldr	r2, [pc, #408]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d102      	bne.n	8001cc6 <DALI_AppInit+0x12a>
		eventFilter_NVM = 1;
 8001cc0:	4b72      	ldr	r3, [pc, #456]	; (8001e8c <DALI_AppInit+0x2f0>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	801a      	strh	r2, [r3, #0]
	if(eventScheme_NVM == BLANK_16)
 8001cc6:	4b72      	ldr	r3, [pc, #456]	; (8001e90 <DALI_AppInit+0x2f4>)
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	4a62      	ldr	r2, [pc, #392]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d102      	bne.n	8001cd6 <DALI_AppInit+0x13a>
		eventScheme_NVM = 0;
 8001cd0:	4b6f      	ldr	r3, [pc, #444]	; (8001e90 <DALI_AppInit+0x2f4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	801a      	strh	r2, [r3, #0]

	if(instanceType_NVM == BLANK_16)
 8001cd6:	4b6f      	ldr	r3, [pc, #444]	; (8001e94 <DALI_AppInit+0x2f8>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	4a5e      	ldr	r2, [pc, #376]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d102      	bne.n	8001ce6 <DALI_AppInit+0x14a>
		instanceType_NVM = 4;
 8001ce0:	4b6c      	ldr	r3, [pc, #432]	; (8001e94 <DALI_AppInit+0x2f8>)
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	801a      	strh	r2, [r3, #0]
	if(resolution_NVM == BLANK_16)
 8001ce6:	4b6c      	ldr	r3, [pc, #432]	; (8001e98 <DALI_AppInit+0x2fc>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	4a5a      	ldr	r2, [pc, #360]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d102      	bne.n	8001cf6 <DALI_AppInit+0x15a>
		resolution_NVM = 10;
 8001cf0:	4b69      	ldr	r3, [pc, #420]	; (8001e98 <DALI_AppInit+0x2fc>)
 8001cf2:	220a      	movs	r2, #10
 8001cf4:	801a      	strh	r2, [r3, #0]
	if(instanceNumber_NVM == BLANK_16)
 8001cf6:	4b69      	ldr	r3, [pc, #420]	; (8001e9c <DALI_AppInit+0x300>)
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	4a56      	ldr	r2, [pc, #344]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d102      	bne.n	8001d06 <DALI_AppInit+0x16a>
		instanceNumber_NVM = 1;
 8001d00:	4b66      	ldr	r3, [pc, #408]	; (8001e9c <DALI_AppInit+0x300>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	801a      	strh	r2, [r3, #0]

	if(tReport_NVM == BLANK_16)
 8001d06:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <DALI_AppInit+0x304>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	4a52      	ldr	r2, [pc, #328]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d102      	bne.n	8001d16 <DALI_AppInit+0x17a>
		tReport_NVM = 30;
 8001d10:	4b63      	ldr	r3, [pc, #396]	; (8001ea0 <DALI_AppInit+0x304>)
 8001d12:	221e      	movs	r2, #30
 8001d14:	801a      	strh	r2, [r3, #0]
	if(tDeadtime_NVM == BLANK_16)
 8001d16:	4b63      	ldr	r3, [pc, #396]	; (8001ea4 <DALI_AppInit+0x308>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	4a4e      	ldr	r2, [pc, #312]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d102      	bne.n	8001d26 <DALI_AppInit+0x18a>
		tDeadtime_NVM = 30;
 8001d20:	4b60      	ldr	r3, [pc, #384]	; (8001ea4 <DALI_AppInit+0x308>)
 8001d22:	221e      	movs	r2, #30
 8001d24:	801a      	strh	r2, [r3, #0]
	if(hysteresisMin_NVM == BLANK_16)
 8001d26:	4b60      	ldr	r3, [pc, #384]	; (8001ea8 <DALI_AppInit+0x30c>)
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	4a4a      	ldr	r2, [pc, #296]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d102      	bne.n	8001d36 <DALI_AppInit+0x19a>
		hysteresisMin_NVM = 10;
 8001d30:	4b5d      	ldr	r3, [pc, #372]	; (8001ea8 <DALI_AppInit+0x30c>)
 8001d32:	220a      	movs	r2, #10
 8001d34:	801a      	strh	r2, [r3, #0]
	if(hysteresis_NVM == BLANK_16)
 8001d36:	4b5d      	ldr	r3, [pc, #372]	; (8001eac <DALI_AppInit+0x310>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	4a46      	ldr	r2, [pc, #280]	; (8001e54 <DALI_AppInit+0x2b8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d102      	bne.n	8001d46 <DALI_AppInit+0x1aa>
		hysteresis_NVM = 5;
 8001d40:	4b5a      	ldr	r3, [pc, #360]	; (8001eac <DALI_AppInit+0x310>)
 8001d42:	2205      	movs	r2, #5
 8001d44:	801a      	strh	r2, [r3, #0]
	dali_NVM_lock();
 8001d46:	f003 f849 	bl	8004ddc <dali_NVM_lock>

	// Set power on value
	shortAddress 							= shortAddress_NVM;
 8001d4a:	4b41      	ldr	r3, [pc, #260]	; (8001e50 <DALI_AppInit+0x2b4>)
 8001d4c:	881a      	ldrh	r2, [r3, #0]
 8001d4e:	4b58      	ldr	r3, [pc, #352]	; (8001eb0 <DALI_AppInit+0x314>)
 8001d50:	801a      	strh	r2, [r3, #0]
	deviceGroups 							= deviceGroups_NVM;
 8001d52:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <DALI_AppInit+0x2a4>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4b57      	ldr	r3, [pc, #348]	; (8001eb4 <DALI_AppInit+0x318>)
 8001d58:	601a      	str	r2, [r3, #0]
	searchAddress 							= 0xFFFFFF;
 8001d5a:	4b57      	ldr	r3, [pc, #348]	; (8001eb8 <DALI_AppInit+0x31c>)
 8001d5c:	4a57      	ldr	r2, [pc, #348]	; (8001ebc <DALI_AppInit+0x320>)
 8001d5e:	601a      	str	r2, [r3, #0]
	randomAddress 							= randomAddress_NVM;
 8001d60:	4b39      	ldr	r3, [pc, #228]	; (8001e48 <DALI_AppInit+0x2ac>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b56      	ldr	r3, [pc, #344]	; (8001ec0 <DALI_AppInit+0x324>)
 8001d66:	601a      	str	r2, [r3, #0]
	numberOfInstances				 		= numberOfInstances_NVM;
 8001d68:	4b3f      	ldr	r3, [pc, #252]	; (8001e68 <DALI_AppInit+0x2cc>)
 8001d6a:	881a      	ldrh	r2, [r3, #0]
 8001d6c:	4b55      	ldr	r3, [pc, #340]	; (8001ec4 <DALI_AppInit+0x328>)
 8001d6e:	801a      	strh	r2, [r3, #0]
	operatingMode 							= operatingMode_NVM;
 8001d70:	4b39      	ldr	r3, [pc, #228]	; (8001e58 <DALI_AppInit+0x2bc>)
 8001d72:	881a      	ldrh	r2, [r3, #0]
 8001d74:	4b54      	ldr	r3, [pc, #336]	; (8001ec8 <DALI_AppInit+0x32c>)
 8001d76:	801a      	strh	r2, [r3, #0]
	applicationActive 						= applicationActive_NVM;
 8001d78:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <DALI_AppInit+0x2c0>)
 8001d7a:	881a      	ldrh	r2, [r3, #0]
 8001d7c:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <DALI_AppInit+0x330>)
 8001d7e:	801a      	strh	r2, [r3, #0]
	applicationControllerPresent 			= applicationControllerPresent_NVM;
 8001d80:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <DALI_AppInit+0x2d0>)
 8001d82:	881a      	ldrh	r2, [r3, #0]
 8001d84:	4b52      	ldr	r3, [pc, #328]	; (8001ed0 <DALI_AppInit+0x334>)
 8001d86:	801a      	strh	r2, [r3, #0]
	applicationControllerAlwaysActive 		= applicationControllerAlwaysActive_NVM;
 8001d88:	4b39      	ldr	r3, [pc, #228]	; (8001e70 <DALI_AppInit+0x2d4>)
 8001d8a:	881a      	ldrh	r2, [r3, #0]
 8001d8c:	4b51      	ldr	r3, [pc, #324]	; (8001ed4 <DALI_AppInit+0x338>)
 8001d8e:	801a      	strh	r2, [r3, #0]
	powerCycleNotification 					= powerCycleNotification_NVM;
 8001d90:	4b33      	ldr	r3, [pc, #204]	; (8001e60 <DALI_AppInit+0x2c4>)
 8001d92:	881a      	ldrh	r2, [r3, #0]
 8001d94:	4b50      	ldr	r3, [pc, #320]	; (8001ed8 <DALI_AppInit+0x33c>)
 8001d96:	801a      	strh	r2, [r3, #0]
	eventPriority 							= eventPriority_NVM;
 8001d98:	4b32      	ldr	r3, [pc, #200]	; (8001e64 <DALI_AppInit+0x2c8>)
 8001d9a:	881a      	ldrh	r2, [r3, #0]
 8001d9c:	4b4f      	ldr	r3, [pc, #316]	; (8001edc <DALI_AppInit+0x340>)
 8001d9e:	801a      	strh	r2, [r3, #0]
	versionNumber 							= versionNumber_NVM;
 8001da0:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <DALI_AppInit+0x2d8>)
 8001da2:	881a      	ldrh	r2, [r3, #0]
 8001da4:	4b4e      	ldr	r3, [pc, #312]	; (8001ee0 <DALI_AppInit+0x344>)
 8001da6:	801a      	strh	r2, [r3, #0]
	instanceGroup0 							= instanceGroup0_NVM;
 8001da8:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <DALI_AppInit+0x2e0>)
 8001daa:	881a      	ldrh	r2, [r3, #0]
 8001dac:	4b4d      	ldr	r3, [pc, #308]	; (8001ee4 <DALI_AppInit+0x348>)
 8001dae:	801a      	strh	r2, [r3, #0]
	instanceGroup1 							= instanceGroup1_NVM;
 8001db0:	4b33      	ldr	r3, [pc, #204]	; (8001e80 <DALI_AppInit+0x2e4>)
 8001db2:	881a      	ldrh	r2, [r3, #0]
 8001db4:	4b4c      	ldr	r3, [pc, #304]	; (8001ee8 <DALI_AppInit+0x34c>)
 8001db6:	801a      	strh	r2, [r3, #0]
	instanceGroup2 							= instanceGroup2_NVM;
 8001db8:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <DALI_AppInit+0x2e8>)
 8001dba:	881a      	ldrh	r2, [r3, #0]
 8001dbc:	4b4b      	ldr	r3, [pc, #300]	; (8001eec <DALI_AppInit+0x350>)
 8001dbe:	801a      	strh	r2, [r3, #0]
	instanceActive 							= instanceActive_NVM;
 8001dc0:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <DALI_AppInit+0x2ec>)
 8001dc2:	881a      	ldrh	r2, [r3, #0]
 8001dc4:	4b4a      	ldr	r3, [pc, #296]	; (8001ef0 <DALI_AppInit+0x354>)
 8001dc6:	801a      	strh	r2, [r3, #0]
	instanceType 							= instanceType_NVM;
 8001dc8:	4b32      	ldr	r3, [pc, #200]	; (8001e94 <DALI_AppInit+0x2f8>)
 8001dca:	881a      	ldrh	r2, [r3, #0]
 8001dcc:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <DALI_AppInit+0x358>)
 8001dce:	801a      	strh	r2, [r3, #0]
	resolution 								= resolution_NVM;
 8001dd0:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <DALI_AppInit+0x2fc>)
 8001dd2:	881a      	ldrh	r2, [r3, #0]
 8001dd4:	4b48      	ldr	r3, [pc, #288]	; (8001ef8 <DALI_AppInit+0x35c>)
 8001dd6:	801a      	strh	r2, [r3, #0]
	instanceNumber 							= instanceNumber_NVM;
 8001dd8:	4b30      	ldr	r3, [pc, #192]	; (8001e9c <DALI_AppInit+0x300>)
 8001dda:	881a      	ldrh	r2, [r3, #0]
 8001ddc:	4b47      	ldr	r3, [pc, #284]	; (8001efc <DALI_AppInit+0x360>)
 8001dde:	801a      	strh	r2, [r3, #0]
	eventFilter 							= eventFilter_NVM;
 8001de0:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <DALI_AppInit+0x2f0>)
 8001de2:	881a      	ldrh	r2, [r3, #0]
 8001de4:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <DALI_AppInit+0x364>)
 8001de6:	801a      	strh	r2, [r3, #0]
	eventScheme 							= eventScheme_NVM;
 8001de8:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <DALI_AppInit+0x2f4>)
 8001dea:	881a      	ldrh	r2, [r3, #0]
 8001dec:	4b45      	ldr	r3, [pc, #276]	; (8001f04 <DALI_AppInit+0x368>)
 8001dee:	801a      	strh	r2, [r3, #0]
	quiescent_time 							= 0;
 8001df0:	4b45      	ldr	r3, [pc, #276]	; (8001f08 <DALI_AppInit+0x36c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
	initialise_time 						= 0;
 8001df6:	4b45      	ldr	r3, [pc, #276]	; (8001f0c <DALI_AppInit+0x370>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
	tReport									= tReport_NVM;
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <DALI_AppInit+0x304>)
 8001dfe:	881a      	ldrh	r2, [r3, #0]
 8001e00:	4b43      	ldr	r3, [pc, #268]	; (8001f10 <DALI_AppInit+0x374>)
 8001e02:	801a      	strh	r2, [r3, #0]
	tDeadtime								= tDeadtime_NVM;
 8001e04:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <DALI_AppInit+0x308>)
 8001e06:	881a      	ldrh	r2, [r3, #0]
 8001e08:	4b42      	ldr	r3, [pc, #264]	; (8001f14 <DALI_AppInit+0x378>)
 8001e0a:	801a      	strh	r2, [r3, #0]
	hysteresisMin							= hysteresisMin_NVM;
 8001e0c:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <DALI_AppInit+0x30c>)
 8001e0e:	881a      	ldrh	r2, [r3, #0]
 8001e10:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <DALI_AppInit+0x37c>)
 8001e12:	801a      	strh	r2, [r3, #0]
	hysteresis								= hysteresis_NVM;
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <DALI_AppInit+0x310>)
 8001e16:	881a      	ldrh	r2, [r3, #0]
 8001e18:	4b40      	ldr	r3, [pc, #256]	; (8001f1c <DALI_AppInit+0x380>)
 8001e1a:	801a      	strh	r2, [r3, #0]
	if(powerCycleNotification == ENABLED)
 8001e1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <DALI_AppInit+0x33c>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d103      	bne.n	8001e2c <DALI_AppInit+0x290>
	{
		powerNoti_time = 1200;
 8001e24:	4b3e      	ldr	r3, [pc, #248]	; (8001f20 <DALI_AppInit+0x384>)
 8001e26:	2296      	movs	r2, #150	; 0x96
 8001e28:	00d2      	lsls	r2, r2, #3
 8001e2a:	801a      	strh	r2, [r3, #0]
	}
	DALIConfigureMode(applicationActive);
 8001e2c:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <DALI_AppInit+0x330>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	0018      	movs	r0, r3
 8001e34:	f7fe fc00 	bl	8000638 <DALIConfigureMode>
}
 8001e38:	46c0      	nop			; (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	0800e800 	.word	0x0800e800
 8001e44:	0800e802 	.word	0x0800e802
 8001e48:	0800e804 	.word	0x0800e804
 8001e4c:	0800e806 	.word	0x0800e806
 8001e50:	0800e808 	.word	0x0800e808
 8001e54:	0000ffff 	.word	0x0000ffff
 8001e58:	0800e80a 	.word	0x0800e80a
 8001e5c:	0800e80c 	.word	0x0800e80c
 8001e60:	0800e80e 	.word	0x0800e80e
 8001e64:	0800e810 	.word	0x0800e810
 8001e68:	0800ec00 	.word	0x0800ec00
 8001e6c:	0800ec02 	.word	0x0800ec02
 8001e70:	0800ec04 	.word	0x0800ec04
 8001e74:	0800ec06 	.word	0x0800ec06
 8001e78:	0800ec08 	.word	0x0800ec08
 8001e7c:	0800e812 	.word	0x0800e812
 8001e80:	0800e814 	.word	0x0800e814
 8001e84:	0800e816 	.word	0x0800e816
 8001e88:	0800e818 	.word	0x0800e818
 8001e8c:	0800e81a 	.word	0x0800e81a
 8001e90:	0800e81c 	.word	0x0800e81c
 8001e94:	0800ec0a 	.word	0x0800ec0a
 8001e98:	0800ec0c 	.word	0x0800ec0c
 8001e9c:	0800ec0e 	.word	0x0800ec0e
 8001ea0:	0800e81e 	.word	0x0800e81e
 8001ea4:	0800e820 	.word	0x0800e820
 8001ea8:	0800e822 	.word	0x0800e822
 8001eac:	0800e824 	.word	0x0800e824
 8001eb0:	20000898 	.word	0x20000898
 8001eb4:	2000087c 	.word	0x2000087c
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	00ffffff 	.word	0x00ffffff
 8001ec0:	200008ac 	.word	0x200008ac
 8001ec4:	200008b2 	.word	0x200008b2
 8001ec8:	200008a0 	.word	0x200008a0
 8001ecc:	2000089a 	.word	0x2000089a
 8001ed0:	2000088e 	.word	0x2000088e
 8001ed4:	200008a4 	.word	0x200008a4
 8001ed8:	200008ba 	.word	0x200008ba
 8001edc:	200008bc 	.word	0x200008bc
 8001ee0:	20000884 	.word	0x20000884
 8001ee4:	200008b4 	.word	0x200008b4
 8001ee8:	200008a2 	.word	0x200008a2
 8001eec:	20000880 	.word	0x20000880
 8001ef0:	2000089e 	.word	0x2000089e
 8001ef4:	2000089c 	.word	0x2000089c
 8001ef8:	2000088c 	.word	0x2000088c
 8001efc:	200008a8 	.word	0x200008a8
 8001f00:	200008b0 	.word	0x200008b0
 8001f04:	200008b6 	.word	0x200008b6
 8001f08:	200008aa 	.word	0x200008aa
 8001f0c:	20000894 	.word	0x20000894
 8001f10:	200008b8 	.word	0x200008b8
 8001f14:	20000896 	.word	0x20000896
 8001f18:	2000000e 	.word	0x2000000e
 8001f1c:	20000010 	.word	0x20000010
 8001f20:	200000d0 	.word	0x200000d0

08001f24 <DALI_ProcessRxData>:

void DALI_ProcessRxData()
{
 8001f24:	b5b0      	push	{r4, r5, r7, lr}
 8001f26:	b0f2      	sub	sp, #456	; 0x1c8
 8001f28:	af00      	add	r7, sp, #0
	uint32_t frame;
	DALICmdFrame_t * cmd;
	DALIEventFrame_t * event;
	if(DALIDataAvailable())
 8001f2a:	f7ff fcf7 	bl	800191c <DALIDataAvailable>
 8001f2e:	1e03      	subs	r3, r0, #0
 8001f30:	d101      	bne.n	8001f36 <DALI_ProcessRxData+0x12>
 8001f32:	f002 fa58 	bl	80043e6 <DALI_ProcessRxData+0x24c2>
	{
		DALIRxData_t msg = DALIReceiveData();
 8001f36:	24d0      	movs	r4, #208	; 0xd0
 8001f38:	0064      	lsls	r4, r4, #1
 8001f3a:	193b      	adds	r3, r7, r4
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7ff fd01 	bl	8001944 <DALIReceiveData>
		DALIRxData_t * msg_ptr = &msg;
 8001f42:	193b      	adds	r3, r7, r4
 8001f44:	22dc      	movs	r2, #220	; 0xdc
 8001f46:	0052      	lsls	r2, r2, #1
 8001f48:	18ba      	adds	r2, r7, r2
 8001f4a:	6013      	str	r3, [r2, #0]
		switch(debug)
 8001f4c:	4bd6      	ldr	r3, [pc, #856]	; (80022a8 <DALI_ProcessRxData+0x384>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b06      	cmp	r3, #6
 8001f52:	d820      	bhi.n	8001f96 <DALI_ProcessRxData+0x72>
 8001f54:	009a      	lsls	r2, r3, #2
 8001f56:	4bd5      	ldr	r3, [pc, #852]	; (80022ac <DALI_ProcessRxData+0x388>)
 8001f58:	18d3      	adds	r3, r2, r3
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	469f      	mov	pc, r3
		{
		case 0:
			debug = 1;
 8001f5e:	4bd2      	ldr	r3, [pc, #840]	; (80022a8 <DALI_ProcessRxData+0x384>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
			break;
 8001f64:	e018      	b.n	8001f98 <DALI_ProcessRxData+0x74>
		case 1:
			debug = 2;
 8001f66:	4bd0      	ldr	r3, [pc, #832]	; (80022a8 <DALI_ProcessRxData+0x384>)
 8001f68:	2202      	movs	r2, #2
 8001f6a:	701a      	strb	r2, [r3, #0]
			break;
 8001f6c:	e014      	b.n	8001f98 <DALI_ProcessRxData+0x74>
		case 2:
			debug = 3;
 8001f6e:	4bce      	ldr	r3, [pc, #824]	; (80022a8 <DALI_ProcessRxData+0x384>)
 8001f70:	2203      	movs	r2, #3
 8001f72:	701a      	strb	r2, [r3, #0]
			break;
 8001f74:	e010      	b.n	8001f98 <DALI_ProcessRxData+0x74>
		case 3:
			debug = 4;
 8001f76:	4bcc      	ldr	r3, [pc, #816]	; (80022a8 <DALI_ProcessRxData+0x384>)
 8001f78:	2204      	movs	r2, #4
 8001f7a:	701a      	strb	r2, [r3, #0]
			break;
 8001f7c:	e00c      	b.n	8001f98 <DALI_ProcessRxData+0x74>
		case 4:
			debug = 5;
 8001f7e:	4bca      	ldr	r3, [pc, #808]	; (80022a8 <DALI_ProcessRxData+0x384>)
 8001f80:	2205      	movs	r2, #5
 8001f82:	701a      	strb	r2, [r3, #0]
			break;
 8001f84:	e008      	b.n	8001f98 <DALI_ProcessRxData+0x74>
		case 5:
			debug = 6;
 8001f86:	4bc8      	ldr	r3, [pc, #800]	; (80022a8 <DALI_ProcessRxData+0x384>)
 8001f88:	2206      	movs	r2, #6
 8001f8a:	701a      	strb	r2, [r3, #0]
			break;
 8001f8c:	e004      	b.n	8001f98 <DALI_ProcessRxData+0x74>
		case 6:
			debug = 0;
 8001f8e:	4bc6      	ldr	r3, [pc, #792]	; (80022a8 <DALI_ProcessRxData+0x384>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
			break;
 8001f94:	e000      	b.n	8001f98 <DALI_ProcessRxData+0x74>
		default:
			break;
 8001f96:	46c0      	nop			; (mov r8, r8)
		}
		if ((msg_ptr->rxDone == 1) && (msg_ptr->rxError == 0))
 8001f98:	23dc      	movs	r3, #220	; 0xdc
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	795b      	ldrb	r3, [r3, #5]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <DALI_ProcessRxData+0x8c>
 8001fac:	f002 fa09 	bl	80043c2 <DALI_ProcessRxData+0x249e>
 8001fb0:	23dc      	movs	r3, #220	; 0xdc
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	795b      	ldrb	r3, [r3, #5]
 8001fba:	220c      	movs	r2, #12
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <DALI_ProcessRxData+0xa4>
 8001fc4:	f002 f9fd 	bl	80043c2 <DALI_ProcessRxData+0x249e>
		{
#ifdef CONTROLLER
			fullFrame = msg_ptr->frame;
#endif
			if(msg_ptr->frameType == 0)  // Forward frame
 8001fc8:	23dc      	movs	r3, #220	; 0xdc
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	795b      	ldrb	r3, [r3, #5]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <DALI_ProcessRxData+0xbc>
 8001fdc:	f002 f9e9 	bl	80043b2 <DALI_ProcessRxData+0x248e>
			{
				frame = msg_ptr->frame;
 8001fe0:	23dc      	movs	r3, #220	; 0xdc
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	22d4      	movs	r2, #212	; 0xd4
 8001fec:	0052      	lsls	r2, r2, #1
 8001fee:	18b9      	adds	r1, r7, r2
 8001ff0:	600b      	str	r3, [r1, #0]
				// Check bit 16 to see if this a command frame or event frame
				if((frame & 0x010000) > 0)  // Command frame
 8001ff2:	18bb      	adds	r3, r7, r2
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	025b      	lsls	r3, r3, #9
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d101      	bne.n	8002002 <DALI_ProcessRxData+0xde>
 8001ffe:	f002 f9e0 	bl	80043c2 <DALI_ProcessRxData+0x249e>
				{
					cmd = &frame;
 8002002:	23d4      	movs	r3, #212	; 0xd4
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	21da      	movs	r1, #218	; 0xda
 800200a:	0049      	lsls	r1, r1, #1
 800200c:	187a      	adds	r2, r7, r1
 800200e:	6013      	str	r3, [r2, #0]
					uint8_t memory_related = 0;
 8002010:	23c8      	movs	r3, #200	; 0xc8
 8002012:	33ff      	adds	r3, #255	; 0xff
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]

					// Check if this contains legit address
					if (cmd->address_byte < 0x80) // Bit 23 = 0 -> Short addressing
 800201a:	187b      	adds	r3, r7, r1
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	789b      	ldrb	r3, [r3, #2]
 8002020:	b25b      	sxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	db0f      	blt.n	8002046 <DALI_ProcessRxData+0x122>
					{
						if (cmd->address_byte != shortAddress*2 + 1) //legit address
 8002026:	23da      	movs	r3, #218	; 0xda
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	789b      	ldrb	r3, [r3, #2]
 8002030:	001a      	movs	r2, r3
 8002032:	4b9f      	ldr	r3, [pc, #636]	; (80022b0 <DALI_ProcessRxData+0x38c>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	3301      	adds	r3, #1
 800203a:	429a      	cmp	r2, r3
 800203c:	d101      	bne.n	8002042 <DALI_ProcessRxData+0x11e>
 800203e:	f000 fc28 	bl	8002892 <DALI_ProcessRxData+0x96e>
						{
							return;
 8002042:	f002 f9d0 	bl	80043e6 <DALI_ProcessRxData+0x24c2>
						}
					}
					else if(cmd->address_byte < 0xC0) // Bit 22 = 0 -> Device group addressing
 8002046:	23da      	movs	r3, #218	; 0xda
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	18fb      	adds	r3, r7, r3
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	789b      	ldrb	r3, [r3, #2]
 8002050:	2bbf      	cmp	r3, #191	; 0xbf
 8002052:	d821      	bhi.n	8002098 <DALI_ProcessRxData+0x174>
					{
						uint8_t group = (cmd->address_byte >> 1) & 0x1F;
 8002054:	23da      	movs	r3, #218	; 0xda
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	789b      	ldrb	r3, [r3, #2]
 800205e:	085b      	lsrs	r3, r3, #1
 8002060:	b2da      	uxtb	r2, r3
 8002062:	23b0      	movs	r3, #176	; 0xb0
 8002064:	33ff      	adds	r3, #255	; 0xff
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	211f      	movs	r1, #31
 800206a:	400a      	ands	r2, r1
 800206c:	701a      	strb	r2, [r3, #0]
						if ((deviceGroups && (1 << group)) == 0)
 800206e:	4b91      	ldr	r3, [pc, #580]	; (80022b4 <DALI_ProcessRxData+0x390>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d009      	beq.n	800208a <DALI_ProcessRxData+0x166>
 8002076:	23b0      	movs	r3, #176	; 0xb0
 8002078:	33ff      	adds	r3, #255	; 0xff
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2201      	movs	r2, #1
 8002080:	409a      	lsls	r2, r3
 8002082:	1e13      	subs	r3, r2, #0
 8002084:	d001      	beq.n	800208a <DALI_ProcessRxData+0x166>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <DALI_ProcessRxData+0x168>
 800208a:	2300      	movs	r3, #0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <DALI_ProcessRxData+0x170>
 8002090:	f000 fbff 	bl	8002892 <DALI_ProcessRxData+0x96e>
						{
							return;
 8002094:	f002 f9a7 	bl	80043e6 <DALI_ProcessRxData+0x24c2>
						}
					}
					else if(cmd->address_byte == 0xFD) // Broadcast unaddressed
 8002098:	23da      	movs	r3, #218	; 0xda
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	789b      	ldrb	r3, [r3, #2]
 80020a2:	2bfd      	cmp	r3, #253	; 0xfd
 80020a4:	d107      	bne.n	80020b6 <DALI_ProcessRxData+0x192>
					{
						if(shortAddress != 0xFF)
 80020a6:	4b82      	ldr	r3, [pc, #520]	; (80022b0 <DALI_ProcessRxData+0x38c>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	2bff      	cmp	r3, #255	; 0xff
 80020ac:	d101      	bne.n	80020b2 <DALI_ProcessRxData+0x18e>
 80020ae:	f000 fbf0 	bl	8002892 <DALI_ProcessRxData+0x96e>
						{
							return;
 80020b2:	f002 f998 	bl	80043e6 <DALI_ProcessRxData+0x24c2>
						}
					}
					else if((cmd->address_byte > 0xE0) && (cmd->address_byte < 0xFD)) // Reserved addressing
 80020b6:	23da      	movs	r3, #218	; 0xda
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	789b      	ldrb	r3, [r3, #2]
 80020c0:	2be0      	cmp	r3, #224	; 0xe0
 80020c2:	d908      	bls.n	80020d6 <DALI_ProcessRxData+0x1b2>
 80020c4:	23da      	movs	r3, #218	; 0xda
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	789b      	ldrb	r3, [r3, #2]
 80020ce:	2bfc      	cmp	r3, #252	; 0xfc
 80020d0:	d801      	bhi.n	80020d6 <DALI_ProcessRxData+0x1b2>
 80020d2:	f002 f987 	bl	80043e4 <DALI_ProcessRxData+0x24c0>
					{
						return;
					}
					else if(cmd->address_byte == 0xC1)	// Special command
 80020d6:	23da      	movs	r3, #218	; 0xda
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	789b      	ldrb	r3, [r3, #2]
 80020e0:	2bc1      	cmp	r3, #193	; 0xc1
 80020e2:	d000      	beq.n	80020e6 <DALI_ProcessRxData+0x1c2>
 80020e4:	e328      	b.n	8002738 <DALI_ProcessRxData+0x814>
					{
						switch(cmd->instance_byte)
 80020e6:	23da      	movs	r3, #218	; 0xda
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	785b      	ldrb	r3, [r3, #1]
 80020f0:	2b33      	cmp	r3, #51	; 0x33
 80020f2:	d900      	bls.n	80020f6 <DALI_ProcessRxData+0x1d2>
 80020f4:	e30f      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
 80020f6:	009a      	lsls	r2, r3, #2
 80020f8:	4b6f      	ldr	r3, [pc, #444]	; (80022b8 <DALI_ProcessRxData+0x394>)
 80020fa:	18d3      	adds	r3, r2, r3
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	469f      	mov	pc, r3
						{
						case TERMINATE:
							if(cmd->opcode_byte == 0)
 8002100:	23da      	movs	r3, #218	; 0xda
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d000      	beq.n	8002110 <DALI_ProcessRxData+0x1ec>
 800210e:	e2eb      	b.n	80026e8 <DALI_ProcessRxData+0x7c4>
							{
								initialisationState = DISABLED;
 8002110:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <DALI_ProcessRxData+0x398>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
								initialise_time = 0;
 8002116:	4b6a      	ldr	r3, [pc, #424]	; (80022c0 <DALI_ProcessRxData+0x39c>)
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
							}
							break;
 800211c:	e2e4      	b.n	80026e8 <DALI_ProcessRxData+0x7c4>
						case INITIALISE:
							if(frame != previousFrame)
 800211e:	23d4      	movs	r3, #212	; 0xd4
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4b67      	ldr	r3, [pc, #412]	; (80022c4 <DALI_ProcessRxData+0x3a0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d002      	beq.n	8002134 <DALI_ProcessRxData+0x210>
							{
								DALIReceiveTwice();
 800212e:	f7ff fd29 	bl	8001b84 <DALIReceiveTwice>
										initialise_time = 15; // 15 min
									}
								}
								isSecondFrame = 1;
							}
							break;
 8002132:	e2f0      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
								if(msg_ptr->rxSendTwicePossible == 1)
 8002134:	23dc      	movs	r3, #220	; 0xdc
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	795b      	ldrb	r3, [r3, #5]
 800213e:	2210      	movs	r2, #16
 8002140:	4013      	ands	r3, r2
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d028      	beq.n	800219a <DALI_ProcessRxData+0x276>
									if(((cmd->opcode_byte == 0x7F) && (shortAddress == 0xFF)) || (cmd->opcode_byte == 0xFF) || ((cmd->opcode_byte < 64) && (cmd->opcode_byte == shortAddress)))
 8002148:	23da      	movs	r3, #218	; 0xda
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b7f      	cmp	r3, #127	; 0x7f
 8002154:	d103      	bne.n	800215e <DALI_ProcessRxData+0x23a>
 8002156:	4b56      	ldr	r3, [pc, #344]	; (80022b0 <DALI_ProcessRxData+0x38c>)
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	2bff      	cmp	r3, #255	; 0xff
 800215c:	d017      	beq.n	800218e <DALI_ProcessRxData+0x26a>
 800215e:	23da      	movs	r3, #218	; 0xda
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2bff      	cmp	r3, #255	; 0xff
 800216a:	d010      	beq.n	800218e <DALI_ProcessRxData+0x26a>
 800216c:	23da      	movs	r3, #218	; 0xda
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b3f      	cmp	r3, #63	; 0x3f
 8002178:	d80f      	bhi.n	800219a <DALI_ProcessRxData+0x276>
 800217a:	23da      	movs	r3, #218	; 0xda
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	b29a      	uxth	r2, r3
 8002186:	4b4a      	ldr	r3, [pc, #296]	; (80022b0 <DALI_ProcessRxData+0x38c>)
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d105      	bne.n	800219a <DALI_ProcessRxData+0x276>
										initialisationState = ENABLED;
 800218e:	4b4b      	ldr	r3, [pc, #300]	; (80022bc <DALI_ProcessRxData+0x398>)
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
										initialise_time = 15; // 15 min
 8002194:	4b4a      	ldr	r3, [pc, #296]	; (80022c0 <DALI_ProcessRxData+0x39c>)
 8002196:	220f      	movs	r2, #15
 8002198:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 800219a:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <DALI_ProcessRxData+0x3a4>)
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
							break;
 80021a0:	e2b9      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
						case RANDOMISE:
							if(frame != previousFrame)
 80021a2:	23d4      	movs	r3, #212	; 0xd4
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4b46      	ldr	r3, [pc, #280]	; (80022c4 <DALI_ProcessRxData+0x3a0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d002      	beq.n	80021b8 <DALI_ProcessRxData+0x294>
							{
								DALIReceiveTwice();
 80021b2:	f7ff fce7 	bl	8001b84 <DALIReceiveTwice>
									if(randomAddress != 0xFFFFFF)
										resetState = FALSE;
								}
								isSecondFrame = 1;
							}
							break;
 80021b6:	e2ae      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
								if((msg_ptr->rxSendTwicePossible == 1) && (initialisationState != DISABLED) && (cmd->opcode_byte == 0))
 80021b8:	23dc      	movs	r3, #220	; 0xdc
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	795b      	ldrb	r3, [r3, #5]
 80021c2:	2210      	movs	r2, #16
 80021c4:	4013      	ands	r3, r2
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01d      	beq.n	8002208 <DALI_ProcessRxData+0x2e4>
 80021cc:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <DALI_ProcessRxData+0x398>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d019      	beq.n	8002208 <DALI_ProcessRxData+0x2e4>
 80021d4:	23da      	movs	r3, #218	; 0xda
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d112      	bne.n	8002208 <DALI_ProcessRxData+0x2e4>
									randomAddress = get_timer_count(&htim6)*250;
 80021e2:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <DALI_ProcessRxData+0x3a8>)
 80021e4:	0018      	movs	r0, r3
 80021e6:	f003 fe7b 	bl	8005ee0 <get_timer_count>
 80021ea:	0002      	movs	r2, r0
 80021ec:	23fa      	movs	r3, #250	; 0xfa
 80021ee:	435a      	muls	r2, r3
 80021f0:	4b37      	ldr	r3, [pc, #220]	; (80022d0 <DALI_ProcessRxData+0x3ac>)
 80021f2:	601a      	str	r2, [r3, #0]
									DALI_Save_Variable();
 80021f4:	f002 fb7e 	bl	80048f4 <DALI_Save_Variable>
									if(randomAddress != 0xFFFFFF)
 80021f8:	4b35      	ldr	r3, [pc, #212]	; (80022d0 <DALI_ProcessRxData+0x3ac>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a35      	ldr	r2, [pc, #212]	; (80022d4 <DALI_ProcessRxData+0x3b0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d002      	beq.n	8002208 <DALI_ProcessRxData+0x2e4>
										resetState = FALSE;
 8002202:	4b35      	ldr	r3, [pc, #212]	; (80022d8 <DALI_ProcessRxData+0x3b4>)
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 8002208:	4b2f      	ldr	r3, [pc, #188]	; (80022c8 <DALI_ProcessRxData+0x3a4>)
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
							break;
 800220e:	e282      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
						case COMPARE:
							if((initialisationState == ENABLED) && (randomAddress <= searchAddress) && (cmd->opcode_byte == 0))
 8002210:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <DALI_ProcessRxData+0x398>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d000      	beq.n	800221a <DALI_ProcessRxData+0x2f6>
 8002218:	e268      	b.n	80026ec <DALI_ProcessRxData+0x7c8>
 800221a:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <DALI_ProcessRxData+0x3ac>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b2f      	ldr	r3, [pc, #188]	; (80022dc <DALI_ProcessRxData+0x3b8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d900      	bls.n	8002228 <DALI_ProcessRxData+0x304>
 8002226:	e261      	b.n	80026ec <DALI_ProcessRxData+0x7c8>
 8002228:	23da      	movs	r3, #218	; 0xda
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d000      	beq.n	8002238 <DALI_ProcessRxData+0x314>
 8002236:	e259      	b.n	80026ec <DALI_ProcessRxData+0x7c8>
							{
								DALITxData_t data = {0xFF, 1, 0, 1};
 8002238:	21cc      	movs	r1, #204	; 0xcc
 800223a:	0049      	lsls	r1, r1, #1
 800223c:	187b      	adds	r3, r7, r1
 800223e:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <DALI_ProcessRxData+0x3bc>)
 8002240:	ca11      	ldmia	r2!, {r0, r4}
 8002242:	c311      	stmia	r3!, {r0, r4}
								DALISendData(data);
 8002244:	187b      	adds	r3, r7, r1
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	6859      	ldr	r1, [r3, #4]
 800224a:	f7ff fa71 	bl	8001730 <DALISendData>
							}
							break;
 800224e:	e24d      	b.n	80026ec <DALI_ProcessRxData+0x7c8>
						case WITHDRAW:
							if((initialisationState == ENABLED) && (randomAddress == searchAddress) && (cmd->opcode_byte == 0))
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <DALI_ProcessRxData+0x398>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d000      	beq.n	800225a <DALI_ProcessRxData+0x336>
 8002258:	e24a      	b.n	80026f0 <DALI_ProcessRxData+0x7cc>
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <DALI_ProcessRxData+0x3ac>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <DALI_ProcessRxData+0x3b8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d000      	beq.n	8002268 <DALI_ProcessRxData+0x344>
 8002266:	e243      	b.n	80026f0 <DALI_ProcessRxData+0x7cc>
 8002268:	23da      	movs	r3, #218	; 0xda
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d000      	beq.n	8002278 <DALI_ProcessRxData+0x354>
 8002276:	e23b      	b.n	80026f0 <DALI_ProcessRxData+0x7cc>
							{
								initialisationState = WITHDRAWN;
 8002278:	4b10      	ldr	r3, [pc, #64]	; (80022bc <DALI_ProcessRxData+0x398>)
 800227a:	2202      	movs	r2, #2
 800227c:	701a      	strb	r2, [r3, #0]
							}
							break;
 800227e:	e237      	b.n	80026f0 <DALI_ProcessRxData+0x7cc>
						case SEARCHADDRH:
							if(initialisationState != DISABLED)
 8002280:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <DALI_ProcessRxData+0x398>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d100      	bne.n	800228a <DALI_ProcessRxData+0x366>
 8002288:	e234      	b.n	80026f4 <DALI_ProcessRxData+0x7d0>
							{
								searchAddress = ((cmd->opcode_byte & 0xFF) << 16) | (searchAddress & 0xFFFF);
 800228a:	23da      	movs	r3, #218	; 0xda
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	001a      	movs	r2, r3
 8002298:	4b10      	ldr	r3, [pc, #64]	; (80022dc <DALI_ProcessRxData+0x3b8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	041b      	lsls	r3, r3, #16
 800229e:	0c1b      	lsrs	r3, r3, #16
 80022a0:	431a      	orrs	r2, r3
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <DALI_ProcessRxData+0x3b8>)
 80022a4:	601a      	str	r2, [r3, #0]
							}
							break;
 80022a6:	e225      	b.n	80026f4 <DALI_ProcessRxData+0x7d0>
 80022a8:	200000cf 	.word	0x200000cf
 80022ac:	080089d4 	.word	0x080089d4
 80022b0:	20000898 	.word	0x20000898
 80022b4:	2000087c 	.word	0x2000087c
 80022b8:	080089f0 	.word	0x080089f0
 80022bc:	200000b9 	.word	0x200000b9
 80022c0:	20000894 	.word	0x20000894
 80022c4:	20000888 	.word	0x20000888
 80022c8:	200000ce 	.word	0x200000ce
 80022cc:	20000a18 	.word	0x20000a18
 80022d0:	200008ac 	.word	0x200008ac
 80022d4:	00ffffff 	.word	0x00ffffff
 80022d8:	2000000d 	.word	0x2000000d
 80022dc:	20000008 	.word	0x20000008
 80022e0:	08008844 	.word	0x08008844
						case SEARCHADDRM:
							if(initialisationState != DISABLED)
 80022e4:	4bc9      	ldr	r3, [pc, #804]	; (800260c <DALI_ProcessRxData+0x6e8>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d100      	bne.n	80022ee <DALI_ProcessRxData+0x3ca>
 80022ec:	e204      	b.n	80026f8 <DALI_ProcessRxData+0x7d4>
							{
								searchAddress = ((cmd->opcode_byte & 0xFF) << 8) | (searchAddress & 0xFF00FF);
 80022ee:	23da      	movs	r3, #218	; 0xda
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	0019      	movs	r1, r3
 80022fc:	4bc4      	ldr	r3, [pc, #784]	; (8002610 <DALI_ProcessRxData+0x6ec>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4ac4      	ldr	r2, [pc, #784]	; (8002614 <DALI_ProcessRxData+0x6f0>)
 8002302:	4013      	ands	r3, r2
 8002304:	000a      	movs	r2, r1
 8002306:	431a      	orrs	r2, r3
 8002308:	4bc1      	ldr	r3, [pc, #772]	; (8002610 <DALI_ProcessRxData+0x6ec>)
 800230a:	601a      	str	r2, [r3, #0]
							}
							break;
 800230c:	e1f4      	b.n	80026f8 <DALI_ProcessRxData+0x7d4>
						case SEARCHADDRL:
							if(initialisationState != DISABLED)
 800230e:	4bbf      	ldr	r3, [pc, #764]	; (800260c <DALI_ProcessRxData+0x6e8>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d100      	bne.n	8002318 <DALI_ProcessRxData+0x3f4>
 8002316:	e1f1      	b.n	80026fc <DALI_ProcessRxData+0x7d8>
							{
								searchAddress = (cmd->opcode_byte & 0xFF) | (searchAddress & 0xFFFF00);
 8002318:	23da      	movs	r3, #218	; 0xda
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	0019      	movs	r1, r3
 8002324:	4bba      	ldr	r3, [pc, #744]	; (8002610 <DALI_ProcessRxData+0x6ec>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4abb      	ldr	r2, [pc, #748]	; (8002618 <DALI_ProcessRxData+0x6f4>)
 800232a:	4013      	ands	r3, r2
 800232c:	000a      	movs	r2, r1
 800232e:	431a      	orrs	r2, r3
 8002330:	4bb7      	ldr	r3, [pc, #732]	; (8002610 <DALI_ProcessRxData+0x6ec>)
 8002332:	601a      	str	r2, [r3, #0]
							}
							break;
 8002334:	e1e2      	b.n	80026fc <DALI_ProcessRxData+0x7d8>
						case PROGRAM_SHORT_ADDRESS:
							if((initialisationState != DISABLED) && (randomAddress == searchAddress) && (cmd->opcode_byte < 64))
 8002336:	4bb5      	ldr	r3, [pc, #724]	; (800260c <DALI_ProcessRxData+0x6e8>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d100      	bne.n	8002340 <DALI_ProcessRxData+0x41c>
 800233e:	e1df      	b.n	8002700 <DALI_ProcessRxData+0x7dc>
 8002340:	4bb6      	ldr	r3, [pc, #728]	; (800261c <DALI_ProcessRxData+0x6f8>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4bb2      	ldr	r3, [pc, #712]	; (8002610 <DALI_ProcessRxData+0x6ec>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d000      	beq.n	800234e <DALI_ProcessRxData+0x42a>
 800234c:	e1d8      	b.n	8002700 <DALI_ProcessRxData+0x7dc>
 800234e:	23da      	movs	r3, #218	; 0xda
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b3f      	cmp	r3, #63	; 0x3f
 800235a:	d900      	bls.n	800235e <DALI_ProcessRxData+0x43a>
 800235c:	e1d0      	b.n	8002700 <DALI_ProcessRxData+0x7dc>
							{
								shortAddress = cmd->opcode_byte;
 800235e:	23da      	movs	r3, #218	; 0xda
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	b29a      	uxth	r2, r3
 800236a:	4bad      	ldr	r3, [pc, #692]	; (8002620 <DALI_ProcessRxData+0x6fc>)
 800236c:	801a      	strh	r2, [r3, #0]
								DALI_Save_Variable();
 800236e:	f002 fac1 	bl	80048f4 <DALI_Save_Variable>
							}
							break;
 8002372:	e1c5      	b.n	8002700 <DALI_ProcessRxData+0x7dc>
						case VERIFY_SHORT_ADDRESS:
							if((initialisationState != DISABLED) && (shortAddress == cmd->opcode_byte))
 8002374:	4ba5      	ldr	r3, [pc, #660]	; (800260c <DALI_ProcessRxData+0x6e8>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d100      	bne.n	800237e <DALI_ProcessRxData+0x45a>
 800237c:	e1c2      	b.n	8002704 <DALI_ProcessRxData+0x7e0>
 800237e:	23da      	movs	r3, #218	; 0xda
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b29a      	uxth	r2, r3
 800238a:	4ba5      	ldr	r3, [pc, #660]	; (8002620 <DALI_ProcessRxData+0x6fc>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d000      	beq.n	8002394 <DALI_ProcessRxData+0x470>
 8002392:	e1b7      	b.n	8002704 <DALI_ProcessRxData+0x7e0>
							{
								DALITxData_t data = {0xFF, 1, 0, 1};
 8002394:	21c8      	movs	r1, #200	; 0xc8
 8002396:	0049      	lsls	r1, r1, #1
 8002398:	187b      	adds	r3, r7, r1
 800239a:	4aa2      	ldr	r2, [pc, #648]	; (8002624 <DALI_ProcessRxData+0x700>)
 800239c:	ca11      	ldmia	r2!, {r0, r4}
 800239e:	c311      	stmia	r3!, {r0, r4}
								DALISendData(data);
 80023a0:	187b      	adds	r3, r7, r1
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	6859      	ldr	r1, [r3, #4]
 80023a6:	f7ff f9c3 	bl	8001730 <DALISendData>
							}
							break;
 80023aa:	e1ab      	b.n	8002704 <DALI_ProcessRxData+0x7e0>
						case QUERY_SHORT_ADDRESS:
							if((initialisationState != DISABLED) && (randomAddress == searchAddress) && (cmd->opcode_byte == 0))
 80023ac:	4b97      	ldr	r3, [pc, #604]	; (800260c <DALI_ProcessRxData+0x6e8>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d100      	bne.n	80023b6 <DALI_ProcessRxData+0x492>
 80023b4:	e1a8      	b.n	8002708 <DALI_ProcessRxData+0x7e4>
 80023b6:	4b99      	ldr	r3, [pc, #612]	; (800261c <DALI_ProcessRxData+0x6f8>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4b95      	ldr	r3, [pc, #596]	; (8002610 <DALI_ProcessRxData+0x6ec>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d000      	beq.n	80023c4 <DALI_ProcessRxData+0x4a0>
 80023c2:	e1a1      	b.n	8002708 <DALI_ProcessRxData+0x7e4>
 80023c4:	23da      	movs	r3, #218	; 0xda
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d000      	beq.n	80023d4 <DALI_ProcessRxData+0x4b0>
 80023d2:	e199      	b.n	8002708 <DALI_ProcessRxData+0x7e4>
							{
								DALITxData_t data = {shortAddress, 1, 0, 1};
 80023d4:	4b92      	ldr	r3, [pc, #584]	; (8002620 <DALI_ProcessRxData+0x6fc>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	001a      	movs	r2, r3
 80023da:	21c4      	movs	r1, #196	; 0xc4
 80023dc:	0049      	lsls	r1, r1, #1
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	187b      	adds	r3, r7, r1
 80023e4:	2201      	movs	r2, #1
 80023e6:	711a      	strb	r2, [r3, #4]
 80023e8:	187b      	adds	r3, r7, r1
 80023ea:	2200      	movs	r2, #0
 80023ec:	715a      	strb	r2, [r3, #5]
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	2201      	movs	r2, #1
 80023f2:	719a      	strb	r2, [r3, #6]
								DALISendData(data);
 80023f4:	187b      	adds	r3, r7, r1
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	6859      	ldr	r1, [r3, #4]
 80023fa:	f7ff f999 	bl	8001730 <DALISendData>
							}
							break;
 80023fe:	e183      	b.n	8002708 <DALI_ProcessRxData+0x7e4>
						case WRITE_MEMORY_LOCATION:
							memory_related = 1;
 8002400:	23c8      	movs	r3, #200	; 0xc8
 8002402:	33ff      	adds	r3, #255	; 0xff
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
							if(writeEnableState == ENABLED)
 800240a:	4b87      	ldr	r3, [pc, #540]	; (8002628 <DALI_ProcessRxData+0x704>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d000      	beq.n	8002414 <DALI_ProcessRxData+0x4f0>
 8002412:	e17b      	b.n	800270c <DALI_ProcessRxData+0x7e8>
							{

								uint8_t error = dali_memory_write(DTR1, DTR0, cmd->opcode_byte);
 8002414:	4b85      	ldr	r3, [pc, #532]	; (800262c <DALI_ProcessRxData+0x708>)
 8002416:	7818      	ldrb	r0, [r3, #0]
 8002418:	4b85      	ldr	r3, [pc, #532]	; (8002630 <DALI_ProcessRxData+0x70c>)
 800241a:	7819      	ldrb	r1, [r3, #0]
 800241c:	23da      	movs	r3, #218	; 0xda
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	25d8      	movs	r5, #216	; 0xd8
 8002428:	006d      	lsls	r5, r5, #1
 800242a:	197c      	adds	r4, r7, r5
 800242c:	001a      	movs	r2, r3
 800242e:	f002 fd59 	bl	8004ee4 <dali_memory_write>
 8002432:	0003      	movs	r3, r0
 8002434:	7023      	strb	r3, [r4, #0]
								if (error != 1)
 8002436:	197b      	adds	r3, r7, r5
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d02c      	beq.n	8002498 <DALI_ProcessRxData+0x574>
								{
									DALITxData_t data = {cmd->opcode_byte, 1, 0, 1};
 800243e:	23da      	movs	r3, #218	; 0xda
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	001a      	movs	r2, r3
 800244a:	21c0      	movs	r1, #192	; 0xc0
 800244c:	0049      	lsls	r1, r1, #1
 800244e:	187b      	adds	r3, r7, r1
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	187b      	adds	r3, r7, r1
 8002454:	2201      	movs	r2, #1
 8002456:	711a      	strb	r2, [r3, #4]
 8002458:	187b      	adds	r3, r7, r1
 800245a:	2200      	movs	r2, #0
 800245c:	715a      	strb	r2, [r3, #5]
 800245e:	187b      	adds	r3, r7, r1
 8002460:	2201      	movs	r2, #1
 8002462:	719a      	strb	r2, [r3, #6]
									DALISendData(data);
 8002464:	187b      	adds	r3, r7, r1
 8002466:	6818      	ldr	r0, [r3, #0]
 8002468:	6859      	ldr	r1, [r3, #4]
 800246a:	f7ff f961 	bl	8001730 <DALISendData>
									HAL_Delay(20);
 800246e:	2014      	movs	r0, #20
 8002470:	f003 fdf8 	bl	8006064 <HAL_Delay>
									if(error == 2)
 8002474:	23d8      	movs	r3, #216	; 0xd8
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d10b      	bne.n	8002498 <DALI_ProcessRxData+0x574>
										memory_write(DTR1, DTR0, cmd->opcode_byte);
 8002480:	4b6a      	ldr	r3, [pc, #424]	; (800262c <DALI_ProcessRxData+0x708>)
 8002482:	7818      	ldrb	r0, [r3, #0]
 8002484:	4b6a      	ldr	r3, [pc, #424]	; (8002630 <DALI_ProcessRxData+0x70c>)
 8002486:	7819      	ldrb	r1, [r3, #0]
 8002488:	23da      	movs	r3, #218	; 0xda
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	001a      	movs	r2, r3
 8002494:	f002 fda4 	bl	8004fe0 <memory_write>
								}
								if((DTR0 < 0xFF) && (DTR1 == 189))
 8002498:	4b65      	ldr	r3, [pc, #404]	; (8002630 <DALI_ProcessRxData+0x70c>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2bff      	cmp	r3, #255	; 0xff
 800249e:	d100      	bne.n	80024a2 <DALI_ProcessRxData+0x57e>
 80024a0:	e134      	b.n	800270c <DALI_ProcessRxData+0x7e8>
 80024a2:	4b62      	ldr	r3, [pc, #392]	; (800262c <DALI_ProcessRxData+0x708>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2bbd      	cmp	r3, #189	; 0xbd
 80024a8:	d000      	beq.n	80024ac <DALI_ProcessRxData+0x588>
 80024aa:	e12f      	b.n	800270c <DALI_ProcessRxData+0x7e8>
									DTR0++;
 80024ac:	4b60      	ldr	r3, [pc, #384]	; (8002630 <DALI_ProcessRxData+0x70c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	4b5e      	ldr	r3, [pc, #376]	; (8002630 <DALI_ProcessRxData+0x70c>)
 80024b6:	701a      	strb	r2, [r3, #0]
							}
							break;
 80024b8:	e128      	b.n	800270c <DALI_ProcessRxData+0x7e8>
						case WRITE_MEMORY_LOCATION_NO_REPLY:
							memory_related = 1;
 80024ba:	23c8      	movs	r3, #200	; 0xc8
 80024bc:	33ff      	adds	r3, #255	; 0xff
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
							if(writeEnableState == ENABLED)
 80024c4:	4b58      	ldr	r3, [pc, #352]	; (8002628 <DALI_ProcessRxData+0x704>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d000      	beq.n	80024ce <DALI_ProcessRxData+0x5aa>
 80024cc:	e120      	b.n	8002710 <DALI_ProcessRxData+0x7ec>
							{
								uint8_t error = dali_memory_write(DTR1, DTR0, cmd->opcode_byte);
 80024ce:	4b57      	ldr	r3, [pc, #348]	; (800262c <DALI_ProcessRxData+0x708>)
 80024d0:	7818      	ldrb	r0, [r3, #0]
 80024d2:	4b57      	ldr	r3, [pc, #348]	; (8002630 <DALI_ProcessRxData+0x70c>)
 80024d4:	7819      	ldrb	r1, [r3, #0]
 80024d6:	23da      	movs	r3, #218	; 0xda
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	25b2      	movs	r5, #178	; 0xb2
 80024e2:	35ff      	adds	r5, #255	; 0xff
 80024e4:	197c      	adds	r4, r7, r5
 80024e6:	001a      	movs	r2, r3
 80024e8:	f002 fcfc 	bl	8004ee4 <dali_memory_write>
 80024ec:	0003      	movs	r3, r0
 80024ee:	7023      	strb	r3, [r4, #0]
								if(error == 2)
 80024f0:	197b      	adds	r3, r7, r5
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d10b      	bne.n	8002510 <DALI_ProcessRxData+0x5ec>
									memory_write(DTR1, DTR0, cmd->opcode_byte);
 80024f8:	4b4c      	ldr	r3, [pc, #304]	; (800262c <DALI_ProcessRxData+0x708>)
 80024fa:	7818      	ldrb	r0, [r3, #0]
 80024fc:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <DALI_ProcessRxData+0x70c>)
 80024fe:	7819      	ldrb	r1, [r3, #0]
 8002500:	23da      	movs	r3, #218	; 0xda
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	001a      	movs	r2, r3
 800250c:	f002 fd68 	bl	8004fe0 <memory_write>
								if((DTR0 < 0xFF) && (DTR1 == 189))
 8002510:	4b47      	ldr	r3, [pc, #284]	; (8002630 <DALI_ProcessRxData+0x70c>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2bff      	cmp	r3, #255	; 0xff
 8002516:	d100      	bne.n	800251a <DALI_ProcessRxData+0x5f6>
 8002518:	e0fa      	b.n	8002710 <DALI_ProcessRxData+0x7ec>
 800251a:	4b44      	ldr	r3, [pc, #272]	; (800262c <DALI_ProcessRxData+0x708>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2bbd      	cmp	r3, #189	; 0xbd
 8002520:	d000      	beq.n	8002524 <DALI_ProcessRxData+0x600>
 8002522:	e0f5      	b.n	8002710 <DALI_ProcessRxData+0x7ec>
									DTR0++;
 8002524:	4b42      	ldr	r3, [pc, #264]	; (8002630 <DALI_ProcessRxData+0x70c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	b2da      	uxtb	r2, r3
 800252c:	4b40      	ldr	r3, [pc, #256]	; (8002630 <DALI_ProcessRxData+0x70c>)
 800252e:	701a      	strb	r2, [r3, #0]
							}
							break;
 8002530:	e0ee      	b.n	8002710 <DALI_ProcessRxData+0x7ec>
						case SET_DTR0:
							memory_related = 1;
 8002532:	23c8      	movs	r3, #200	; 0xc8
 8002534:	33ff      	adds	r3, #255	; 0xff
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
							DTR0 = cmd->opcode_byte;
 800253c:	23da      	movs	r3, #218	; 0xda
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	4b3a      	ldr	r3, [pc, #232]	; (8002630 <DALI_ProcessRxData+0x70c>)
 8002548:	701a      	strb	r2, [r3, #0]
							break;
 800254a:	e0e4      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
						case SET_DTR1:
							memory_related = 1;
 800254c:	23c8      	movs	r3, #200	; 0xc8
 800254e:	33ff      	adds	r3, #255	; 0xff
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
							DTR1 = cmd->opcode_byte;
 8002556:	23da      	movs	r3, #218	; 0xda
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	781a      	ldrb	r2, [r3, #0]
 8002560:	4b32      	ldr	r3, [pc, #200]	; (800262c <DALI_ProcessRxData+0x708>)
 8002562:	701a      	strb	r2, [r3, #0]
							break;
 8002564:	e0d7      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
						case SET_DTR2:
							memory_related = 1;
 8002566:	23c8      	movs	r3, #200	; 0xc8
 8002568:	33ff      	adds	r3, #255	; 0xff
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
							DTR2 = cmd->opcode_byte;
 8002570:	23da      	movs	r3, #218	; 0xda
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <DALI_ProcessRxData+0x710>)
 800257c:	701a      	strb	r2, [r3, #0]
							break;
 800257e:	e0ca      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
						case SEND_TESTFRAME:
							if ((cmd->opcode_byte > 0x7F) && ((cmd->opcode_byte & 0x07) <= 5) && ((cmd->opcode_byte & 0x07) >= 1)\
 8002580:	23da      	movs	r3, #218	; 0xda
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	b25b      	sxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	db00      	blt.n	8002592 <DALI_ProcessRxData+0x66e>
 8002590:	e0c0      	b.n	8002714 <DALI_ProcessRxData+0x7f0>
 8002592:	23da      	movs	r3, #218	; 0xda
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	001a      	movs	r2, r3
 800259e:	2307      	movs	r3, #7
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b05      	cmp	r3, #5
 80025a4:	dd00      	ble.n	80025a8 <DALI_ProcessRxData+0x684>
 80025a6:	e0b5      	b.n	8002714 <DALI_ProcessRxData+0x7f0>
 80025a8:	23da      	movs	r3, #218	; 0xda
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	001a      	movs	r2, r3
 80025b4:	2307      	movs	r3, #7
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	dc00      	bgt.n	80025be <DALI_ProcessRxData+0x69a>
 80025bc:	e0aa      	b.n	8002714 <DALI_ProcessRxData+0x7f0>
									 && (((cmd->opcode_byte & 0x20) == 0) || (applicationControllerPresent == TRUE)))
 80025be:	23da      	movs	r3, #218	; 0xda
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	001a      	movs	r2, r3
 80025ca:	2320      	movs	r3, #32
 80025cc:	4013      	ands	r3, r2
 80025ce:	d004      	beq.n	80025da <DALI_ProcessRxData+0x6b6>
 80025d0:	4b19      	ldr	r3, [pc, #100]	; (8002638 <DALI_ProcessRxData+0x714>)
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d000      	beq.n	80025da <DALI_ProcessRxData+0x6b6>
 80025d8:	e09c      	b.n	8002714 <DALI_ProcessRxData+0x7f0>
							{
								uint32_t temp;
								if((cmd->opcode_byte & 0x20) == 0)
 80025da:	23da      	movs	r3, #218	; 0xda
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	001a      	movs	r2, r3
 80025e6:	2320      	movs	r3, #32
 80025e8:	4013      	ands	r3, r2
 80025ea:	d127      	bne.n	800263c <DALI_ProcessRxData+0x718>
								{
									temp = (DTR0 << 16) | (DTR1 << 8) | DTR2;
 80025ec:	4b10      	ldr	r3, [pc, #64]	; (8002630 <DALI_ProcessRxData+0x70c>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	041a      	lsls	r2, r3, #16
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <DALI_ProcessRxData+0x708>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	4313      	orrs	r3, r2
 80025fa:	4a0e      	ldr	r2, [pc, #56]	; (8002634 <DALI_ProcessRxData+0x710>)
 80025fc:	7812      	ldrb	r2, [r2, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	22e0      	movs	r2, #224	; 0xe0
 8002602:	0052      	lsls	r2, r2, #1
 8002604:	18ba      	adds	r2, r7, r2
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	e022      	b.n	8002650 <DALI_ProcessRxData+0x72c>
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	200000b9 	.word	0x200000b9
 8002610:	20000008 	.word	0x20000008
 8002614:	00ff00ff 	.word	0x00ff00ff
 8002618:	00ffff00 	.word	0x00ffff00
 800261c:	200008ac 	.word	0x200008ac
 8002620:	20000898 	.word	0x20000898
 8002624:	08008844 	.word	0x08008844
 8002628:	200000b8 	.word	0x200000b8
 800262c:	200000b5 	.word	0x200000b5
 8002630:	200000b4 	.word	0x200000b4
 8002634:	200000b6 	.word	0x200000b6
 8002638:	2000088e 	.word	0x2000088e
								}
								else
								{
									temp = (DTR0 << 8) | DTR1;
 800263c:	4be3      	ldr	r3, [pc, #908]	; (80029cc <DALI_ProcessRxData+0xaa8>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	4ae3      	ldr	r2, [pc, #908]	; (80029d0 <DALI_ProcessRxData+0xaac>)
 8002644:	7812      	ldrb	r2, [r2, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	22e0      	movs	r2, #224	; 0xe0
 800264a:	0052      	lsls	r2, r2, #1
 800264c:	18ba      	adds	r2, r7, r2
 800264e:	6013      	str	r3, [r2, #0]
								}
								uint8_t priority = cmd->opcode_byte & 0x07;
 8002650:	24da      	movs	r4, #218	; 0xda
 8002652:	0064      	lsls	r4, r4, #1
 8002654:	193b      	adds	r3, r7, r4
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	781a      	ldrb	r2, [r3, #0]
 800265a:	20d9      	movs	r0, #217	; 0xd9
 800265c:	0040      	lsls	r0, r0, #1
 800265e:	183b      	adds	r3, r7, r0
 8002660:	2107      	movs	r1, #7
 8002662:	400a      	ands	r2, r1
 8002664:	701a      	strb	r2, [r3, #0]
								uint8_t repeat	 = (cmd->opcode_byte >> 3) & 0x03;
 8002666:	193b      	adds	r3, r7, r4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	08db      	lsrs	r3, r3, #3
 800266e:	b2da      	uxtb	r2, r3
 8002670:	23c0      	movs	r3, #192	; 0xc0
 8002672:	33ff      	adds	r3, #255	; 0xff
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	2103      	movs	r1, #3
 8002678:	400a      	ands	r2, r1
 800267a:	701a      	strb	r2, [r3, #0]
								DALITxData_t data = {temp, 0, 0, priority};
 800267c:	24bc      	movs	r4, #188	; 0xbc
 800267e:	0064      	lsls	r4, r4, #1
 8002680:	193b      	adds	r3, r7, r4
 8002682:	22e0      	movs	r2, #224	; 0xe0
 8002684:	0052      	lsls	r2, r2, #1
 8002686:	18ba      	adds	r2, r7, r2
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	193b      	adds	r3, r7, r4
 800268e:	2200      	movs	r2, #0
 8002690:	711a      	strb	r2, [r3, #4]
 8002692:	193b      	adds	r3, r7, r4
 8002694:	2200      	movs	r2, #0
 8002696:	715a      	strb	r2, [r3, #5]
 8002698:	193b      	adds	r3, r7, r4
 800269a:	0005      	movs	r5, r0
 800269c:	183a      	adds	r2, r7, r0
 800269e:	7812      	ldrb	r2, [r2, #0]
 80026a0:	719a      	strb	r2, [r3, #6]
								DALISendData(data);
 80026a2:	193b      	adds	r3, r7, r4
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	f7ff f842 	bl	8001730 <DALISendData>
								priority = ((cmd->opcode_byte & 0x40) == 1) ? 1 : 0;
 80026ac:	0028      	movs	r0, r5
 80026ae:	183b      	adds	r3, r7, r0
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
								data.priority = priority;
 80026b4:	193b      	adds	r3, r7, r4
 80026b6:	183a      	adds	r2, r7, r0
 80026b8:	7812      	ldrb	r2, [r2, #0]
 80026ba:	719a      	strb	r2, [r3, #6]
								while(repeat > 0)
 80026bc:	e00d      	b.n	80026da <DALI_ProcessRxData+0x7b6>
								{
									DALISendData(data);
 80026be:	23bc      	movs	r3, #188	; 0xbc
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	f7ff f832 	bl	8001730 <DALISendData>
									repeat--;
 80026cc:	21c0      	movs	r1, #192	; 0xc0
 80026ce:	31ff      	adds	r1, #255	; 0xff
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	781a      	ldrb	r2, [r3, #0]
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	3a01      	subs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
								while(repeat > 0)
 80026da:	23c0      	movs	r3, #192	; 0xc0
 80026dc:	33ff      	adds	r3, #255	; 0xff
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1eb      	bne.n	80026be <DALI_ProcessRxData+0x79a>
								}
							}
							break;
 80026e6:	e015      	b.n	8002714 <DALI_ProcessRxData+0x7f0>
							break;
 80026e8:	46c0      	nop			; (mov r8, r8)
 80026ea:	e014      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
							break;
 80026ec:	46c0      	nop			; (mov r8, r8)
 80026ee:	e012      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
							break;
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	e010      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
							break;
 80026f4:	46c0      	nop			; (mov r8, r8)
 80026f6:	e00e      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
							break;
 80026f8:	46c0      	nop			; (mov r8, r8)
 80026fa:	e00c      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
							break;
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	e00a      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
							break;
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	e008      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
							break;
 8002704:	46c0      	nop			; (mov r8, r8)
 8002706:	e006      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
							break;
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	e004      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
							break;
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	e002      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
							break;
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	e000      	b.n	8002716 <DALI_ProcessRxData+0x7f2>
							break;
 8002714:	46c0      	nop			; (mov r8, r8)
						}
						previousFrame = (isSecondFrame) ? 0 : frame;
 8002716:	4baf      	ldr	r3, [pc, #700]	; (80029d4 <DALI_ProcessRxData+0xab0>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d104      	bne.n	8002728 <DALI_ProcessRxData+0x804>
 800271e:	23d4      	movs	r3, #212	; 0xd4
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	e000      	b.n	800272a <DALI_ProcessRxData+0x806>
 8002728:	2200      	movs	r2, #0
 800272a:	4bab      	ldr	r3, [pc, #684]	; (80029d8 <DALI_ProcessRxData+0xab4>)
 800272c:	601a      	str	r2, [r3, #0]
						isSecondFrame = 0;
 800272e:	4ba9      	ldr	r3, [pc, #676]	; (80029d4 <DALI_ProcessRxData+0xab0>)
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
						return;
 8002734:	f001 fe57 	bl	80043e6 <DALI_ProcessRxData+0x24c2>
					}
					else if (cmd->address_byte == DIRECT_WRITE_MEMORY)
 8002738:	23da      	movs	r3, #218	; 0xda
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	789b      	ldrb	r3, [r3, #2]
 8002742:	2bc5      	cmp	r3, #197	; 0xc5
 8002744:	d165      	bne.n	8002812 <DALI_ProcessRxData+0x8ee>
					{
						memory_related = 1;
 8002746:	23c8      	movs	r3, #200	; 0xc8
 8002748:	33ff      	adds	r3, #255	; 0xff
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
						if(writeEnableState == ENABLED)
 8002750:	4ba2      	ldr	r3, [pc, #648]	; (80029dc <DALI_ProcessRxData+0xab8>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d154      	bne.n	8002802 <DALI_ProcessRxData+0x8de>
						{
							DTR0 = cmd->instance_byte;
 8002758:	24da      	movs	r4, #218	; 0xda
 800275a:	0064      	lsls	r4, r4, #1
 800275c:	193b      	adds	r3, r7, r4
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	785a      	ldrb	r2, [r3, #1]
 8002762:	4b9a      	ldr	r3, [pc, #616]	; (80029cc <DALI_ProcessRxData+0xaa8>)
 8002764:	701a      	strb	r2, [r3, #0]
							uint8_t error = dali_memory_write(DTR1, DTR0, cmd->opcode_byte);
 8002766:	4b9a      	ldr	r3, [pc, #616]	; (80029d0 <DALI_ProcessRxData+0xaac>)
 8002768:	7818      	ldrb	r0, [r3, #0]
 800276a:	4b98      	ldr	r3, [pc, #608]	; (80029cc <DALI_ProcessRxData+0xaa8>)
 800276c:	7819      	ldrb	r1, [r3, #0]
 800276e:	193b      	adds	r3, r7, r4
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	25b4      	movs	r5, #180	; 0xb4
 8002776:	35ff      	adds	r5, #255	; 0xff
 8002778:	197c      	adds	r4, r7, r5
 800277a:	001a      	movs	r2, r3
 800277c:	f002 fbb2 	bl	8004ee4 <dali_memory_write>
 8002780:	0003      	movs	r3, r0
 8002782:	7023      	strb	r3, [r4, #0]
							if (error != 1)
 8002784:	197b      	adds	r3, r7, r5
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d02c      	beq.n	80027e6 <DALI_ProcessRxData+0x8c2>
							{
								DALITxData_t data = {cmd->opcode_byte, 1, 0, 1};
 800278c:	23da      	movs	r3, #218	; 0xda
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	001a      	movs	r2, r3
 8002798:	21b8      	movs	r1, #184	; 0xb8
 800279a:	0049      	lsls	r1, r1, #1
 800279c:	187b      	adds	r3, r7, r1
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	2201      	movs	r2, #1
 80027a4:	711a      	strb	r2, [r3, #4]
 80027a6:	187b      	adds	r3, r7, r1
 80027a8:	2200      	movs	r2, #0
 80027aa:	715a      	strb	r2, [r3, #5]
 80027ac:	187b      	adds	r3, r7, r1
 80027ae:	2201      	movs	r2, #1
 80027b0:	719a      	strb	r2, [r3, #6]
								DALISendData(data);
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	6859      	ldr	r1, [r3, #4]
 80027b8:	f7fe ffba 	bl	8001730 <DALISendData>
								HAL_Delay(20);
 80027bc:	2014      	movs	r0, #20
 80027be:	f003 fc51 	bl	8006064 <HAL_Delay>
								if(error == 2)
 80027c2:	23b4      	movs	r3, #180	; 0xb4
 80027c4:	33ff      	adds	r3, #255	; 0xff
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d10b      	bne.n	80027e6 <DALI_ProcessRxData+0x8c2>
									memory_write(DTR1, DTR0, cmd->opcode_byte);
 80027ce:	4b80      	ldr	r3, [pc, #512]	; (80029d0 <DALI_ProcessRxData+0xaac>)
 80027d0:	7818      	ldrb	r0, [r3, #0]
 80027d2:	4b7e      	ldr	r3, [pc, #504]	; (80029cc <DALI_ProcessRxData+0xaa8>)
 80027d4:	7819      	ldrb	r1, [r3, #0]
 80027d6:	23da      	movs	r3, #218	; 0xda
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	001a      	movs	r2, r3
 80027e2:	f002 fbfd 	bl	8004fe0 <memory_write>
							}
							if((DTR0 < 0xFF) && (DTR1 == 189))
 80027e6:	4b79      	ldr	r3, [pc, #484]	; (80029cc <DALI_ProcessRxData+0xaa8>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2bff      	cmp	r3, #255	; 0xff
 80027ec:	d009      	beq.n	8002802 <DALI_ProcessRxData+0x8de>
 80027ee:	4b78      	ldr	r3, [pc, #480]	; (80029d0 <DALI_ProcessRxData+0xaac>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2bbd      	cmp	r3, #189	; 0xbd
 80027f4:	d105      	bne.n	8002802 <DALI_ProcessRxData+0x8de>
								DTR0++;
 80027f6:	4b75      	ldr	r3, [pc, #468]	; (80029cc <DALI_ProcessRxData+0xaa8>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	3301      	adds	r3, #1
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	4b73      	ldr	r3, [pc, #460]	; (80029cc <DALI_ProcessRxData+0xaa8>)
 8002800:	701a      	strb	r2, [r3, #0]
						}
						previousFrame = frame;
 8002802:	23d4      	movs	r3, #212	; 0xd4
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b73      	ldr	r3, [pc, #460]	; (80029d8 <DALI_ProcessRxData+0xab4>)
 800280c:	601a      	str	r2, [r3, #0]
						return;
 800280e:	f001 fdea 	bl	80043e6 <DALI_ProcessRxData+0x24c2>
					}
					else if (cmd->address_byte == DTR1_DTR0)
 8002812:	23da      	movs	r3, #218	; 0xda
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	789b      	ldrb	r3, [r3, #2]
 800281c:	2bc7      	cmp	r3, #199	; 0xc7
 800281e:	d118      	bne.n	8002852 <DALI_ProcessRxData+0x92e>
					{
						memory_related = 1;
 8002820:	23c8      	movs	r3, #200	; 0xc8
 8002822:	33ff      	adds	r3, #255	; 0xff
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
						DTR1 = cmd->instance_byte;
 800282a:	21da      	movs	r1, #218	; 0xda
 800282c:	0049      	lsls	r1, r1, #1
 800282e:	187b      	adds	r3, r7, r1
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	785a      	ldrb	r2, [r3, #1]
 8002834:	4b66      	ldr	r3, [pc, #408]	; (80029d0 <DALI_ProcessRxData+0xaac>)
 8002836:	701a      	strb	r2, [r3, #0]
						DTR0 = cmd->opcode_byte;
 8002838:	187b      	adds	r3, r7, r1
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	781a      	ldrb	r2, [r3, #0]
 800283e:	4b63      	ldr	r3, [pc, #396]	; (80029cc <DALI_ProcessRxData+0xaa8>)
 8002840:	701a      	strb	r2, [r3, #0]
						previousFrame = frame;
 8002842:	23d4      	movs	r3, #212	; 0xd4
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4b63      	ldr	r3, [pc, #396]	; (80029d8 <DALI_ProcessRxData+0xab4>)
 800284c:	601a      	str	r2, [r3, #0]
						return;
 800284e:	f001 fdca 	bl	80043e6 <DALI_ProcessRxData+0x24c2>
					}
					else if (cmd->address_byte == DTR2_DTR1)
 8002852:	23da      	movs	r3, #218	; 0xda
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	789b      	ldrb	r3, [r3, #2]
 800285c:	2bc9      	cmp	r3, #201	; 0xc9
 800285e:	d118      	bne.n	8002892 <DALI_ProcessRxData+0x96e>
					{
						memory_related = 1;
 8002860:	23c8      	movs	r3, #200	; 0xc8
 8002862:	33ff      	adds	r3, #255	; 0xff
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
						DTR2 = cmd->instance_byte;
 800286a:	21da      	movs	r1, #218	; 0xda
 800286c:	0049      	lsls	r1, r1, #1
 800286e:	187b      	adds	r3, r7, r1
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	785a      	ldrb	r2, [r3, #1]
 8002874:	4b5a      	ldr	r3, [pc, #360]	; (80029e0 <DALI_ProcessRxData+0xabc>)
 8002876:	701a      	strb	r2, [r3, #0]
						DTR1 = cmd->opcode_byte;
 8002878:	187b      	adds	r3, r7, r1
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	4b54      	ldr	r3, [pc, #336]	; (80029d0 <DALI_ProcessRxData+0xaac>)
 8002880:	701a      	strb	r2, [r3, #0]
						previousFrame = frame;
 8002882:	23d4      	movs	r3, #212	; 0xd4
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4b53      	ldr	r3, [pc, #332]	; (80029d8 <DALI_ProcessRxData+0xab4>)
 800288c:	601a      	str	r2, [r3, #0]
						return;
 800288e:	f001 fdaa 	bl	80043e6 <DALI_ProcessRxData+0x24c2>
					}

					// Check instance byte
					if(cmd->instance_byte == 0xFE) // Device commands
 8002892:	23da      	movs	r3, #218	; 0xda
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	785b      	ldrb	r3, [r3, #1]
 800289c:	2bfe      	cmp	r3, #254	; 0xfe
 800289e:	d001      	beq.n	80028a4 <DALI_ProcessRxData+0x980>
 80028a0:	f000 ff04 	bl	80036ac <DALI_ProcessRxData+0x1788>
					{
						switch(cmd->opcode_byte)
 80028a4:	23da      	movs	r3, #218	; 0xda
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b8f      	cmp	r3, #143	; 0x8f
 80028b0:	d901      	bls.n	80028b6 <DALI_ProcessRxData+0x992>
 80028b2:	f001 fd57 	bl	8004364 <DALI_ProcessRxData+0x2440>
 80028b6:	009a      	lsls	r2, r3, #2
 80028b8:	4b4a      	ldr	r3, [pc, #296]	; (80029e4 <DALI_ProcessRxData+0xac0>)
 80028ba:	18d3      	adds	r3, r2, r3
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	469f      	mov	pc, r3
						{
						case IDENTIFY_DEVICE:
							if(frame != previousFrame)
 80028c0:	23d4      	movs	r3, #212	; 0xd4
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b43      	ldr	r3, [pc, #268]	; (80029d8 <DALI_ProcessRxData+0xab4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d003      	beq.n	80028d8 <DALI_ProcessRxData+0x9b4>
							{
								DALIReceiveTwice();
 80028d0:	f7ff f958 	bl	8001b84 <DALIReceiveTwice>
							{
								writePin(LED_Pin, 0);
								id_time = 10000;
								isSecondFrame = 1;
							}
							break;
 80028d4:	f001 fd63 	bl	800439e <DALI_ProcessRxData+0x247a>
								writePin(LED_Pin, 0);
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	2100      	movs	r1, #0
 80028de:	0018      	movs	r0, r3
 80028e0:	f002 fe52 	bl	8005588 <writePin>
								id_time = 10000;
 80028e4:	4b40      	ldr	r3, [pc, #256]	; (80029e8 <DALI_ProcessRxData+0xac4>)
 80028e6:	4a41      	ldr	r2, [pc, #260]	; (80029ec <DALI_ProcessRxData+0xac8>)
 80028e8:	801a      	strh	r2, [r3, #0]
								isSecondFrame = 1;
 80028ea:	4b3a      	ldr	r3, [pc, #232]	; (80029d4 <DALI_ProcessRxData+0xab0>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
							break;
 80028f0:	f001 fd55 	bl	800439e <DALI_ProcessRxData+0x247a>
						case RESET_POWER_CYCLE_SEEN:
							if(frame != previousFrame)
 80028f4:	23d4      	movs	r3, #212	; 0xd4
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b36      	ldr	r3, [pc, #216]	; (80029d8 <DALI_ProcessRxData+0xab4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d003      	beq.n	800290c <DALI_ProcessRxData+0x9e8>
							{
								DALIReceiveTwice();
 8002904:	f7ff f93e 	bl	8001b84 <DALIReceiveTwice>
								{
									powerCycleSeen = FALSE;
								}
								isSecondFrame = 1;
							}
							break;
 8002908:	f001 fd49 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 800290c:	23dc      	movs	r3, #220	; 0xdc
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	795b      	ldrb	r3, [r3, #5]
 8002916:	2210      	movs	r2, #16
 8002918:	4013      	ands	r3, r2
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <DALI_ProcessRxData+0xa02>
									powerCycleSeen = FALSE;
 8002920:	4b33      	ldr	r3, [pc, #204]	; (80029f0 <DALI_ProcessRxData+0xacc>)
 8002922:	2200      	movs	r2, #0
 8002924:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 8002926:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <DALI_ProcessRxData+0xab0>)
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
							break;
 800292c:	f001 fd37 	bl	800439e <DALI_ProcessRxData+0x247a>
						case RESET_VARIABLE:
							if(frame != previousFrame)
 8002930:	23d4      	movs	r3, #212	; 0xd4
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <DALI_ProcessRxData+0xab4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d003      	beq.n	8002948 <DALI_ProcessRxData+0xa24>
							{
								DALIReceiveTwice();
 8002940:	f7ff f920 	bl	8001b84 <DALIReceiveTwice>
								{
									DALI_Reset_Variables();
								}
								isSecondFrame = 1;
							}
							break;
 8002944:	f001 fd2b 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8002948:	23dc      	movs	r3, #220	; 0xdc
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	795b      	ldrb	r3, [r3, #5]
 8002952:	2210      	movs	r2, #16
 8002954:	4013      	ands	r3, r2
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <DALI_ProcessRxData+0xa3c>
									DALI_Reset_Variables();
 800295c:	f001 ff12 	bl	8004784 <DALI_Reset_Variables>
								isSecondFrame = 1;
 8002960:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <DALI_ProcessRxData+0xab0>)
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
							break;
 8002966:	f001 fd1a 	bl	800439e <DALI_ProcessRxData+0x247a>
						case RESET_MEMORY_BANK:
							dali_memory_reset(DTR0);
 800296a:	4b18      	ldr	r3, [pc, #96]	; (80029cc <DALI_ProcessRxData+0xaa8>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	0018      	movs	r0, r3
 8002970:	f002 fcb2 	bl	80052d8 <dali_memory_reset>
							break;
 8002974:	f001 fd13 	bl	800439e <DALI_ProcessRxData+0x247a>
						case SET_SHORT_ADDRESS:
							if(frame != previousFrame)
 8002978:	23d4      	movs	r3, #212	; 0xd4
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <DALI_ProcessRxData+0xab4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d003      	beq.n	8002990 <DALI_ProcessRxData+0xa6c>
							{
								DALIReceiveTwice();
 8002988:	f7ff f8fc 	bl	8001b84 <DALIReceiveTwice>
										DALI_Save_Variable();
									}
								}
								isSecondFrame = 1;
							}
							break;
 800298c:	f001 fd07 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8002990:	23dc      	movs	r3, #220	; 0xdc
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	795b      	ldrb	r3, [r3, #5]
 800299a:	2210      	movs	r2, #16
 800299c:	4013      	ands	r3, r2
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00e      	beq.n	80029c2 <DALI_ProcessRxData+0xa9e>
									if((DTR0 == 0xFF) || (DTR0 < 0x40))
 80029a4:	4b09      	ldr	r3, [pc, #36]	; (80029cc <DALI_ProcessRxData+0xaa8>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2bff      	cmp	r3, #255	; 0xff
 80029aa:	d003      	beq.n	80029b4 <DALI_ProcessRxData+0xa90>
 80029ac:	4b07      	ldr	r3, [pc, #28]	; (80029cc <DALI_ProcessRxData+0xaa8>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b3f      	cmp	r3, #63	; 0x3f
 80029b2:	d806      	bhi.n	80029c2 <DALI_ProcessRxData+0xa9e>
										shortAddress = DTR0;
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <DALI_ProcessRxData+0xaa8>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <DALI_ProcessRxData+0xad0>)
 80029bc:	801a      	strh	r2, [r3, #0]
										DALI_Save_Variable();
 80029be:	f001 ff99 	bl	80048f4 <DALI_Save_Variable>
								isSecondFrame = 1;
 80029c2:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <DALI_ProcessRxData+0xab0>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	701a      	strb	r2, [r3, #0]
							break;
 80029c8:	f001 fce9 	bl	800439e <DALI_ProcessRxData+0x247a>
 80029cc:	200000b4 	.word	0x200000b4
 80029d0:	200000b5 	.word	0x200000b5
 80029d4:	200000ce 	.word	0x200000ce
 80029d8:	20000888 	.word	0x20000888
 80029dc:	200000b8 	.word	0x200000b8
 80029e0:	200000b6 	.word	0x200000b6
 80029e4:	08008ac0 	.word	0x08008ac0
 80029e8:	200000cc 	.word	0x200000cc
 80029ec:	00002710 	.word	0x00002710
 80029f0:	2000000c 	.word	0x2000000c
 80029f4:	20000898 	.word	0x20000898
						case ENABLE_WRITE_MEMORY:
							if(frame != previousFrame)
 80029f8:	23d4      	movs	r3, #212	; 0xd4
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4bdd      	ldr	r3, [pc, #884]	; (8002d78 <DALI_ProcessRxData+0xe54>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d003      	beq.n	8002a10 <DALI_ProcessRxData+0xaec>
							{
								DALIReceiveTwice();
 8002a08:	f7ff f8bc 	bl	8001b84 <DALIReceiveTwice>
									writeEnableState = ENABLED;
									memory_related = 1;
								}
								isSecondFrame = 1;
							}
							break;
 8002a0c:	f001 fcc7 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8002a10:	23dc      	movs	r3, #220	; 0xdc
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	795b      	ldrb	r3, [r3, #5]
 8002a1a:	2210      	movs	r2, #16
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <DALI_ProcessRxData+0xb10>
									writeEnableState = ENABLED;
 8002a24:	4bd5      	ldr	r3, [pc, #852]	; (8002d7c <DALI_ProcessRxData+0xe58>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
									memory_related = 1;
 8002a2a:	23c8      	movs	r3, #200	; 0xc8
 8002a2c:	33ff      	adds	r3, #255	; 0xff
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 8002a34:	4bd2      	ldr	r3, [pc, #840]	; (8002d80 <DALI_ProcessRxData+0xe5c>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
							break;
 8002a3a:	f001 fcb0 	bl	800439e <DALI_ProcessRxData+0x247a>
						case ENABLE_APPLICATION_CONTROLLER:
							if(frame != previousFrame)
 8002a3e:	23d4      	movs	r3, #212	; 0xd4
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	4bcc      	ldr	r3, [pc, #816]	; (8002d78 <DALI_ProcessRxData+0xe54>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d003      	beq.n	8002a56 <DALI_ProcessRxData+0xb32>
							{
								DALIReceiveTwice();
 8002a4e:	f7ff f899 	bl	8001b84 <DALIReceiveTwice>
										DALI_Save_Variable();
									}
								}
								isSecondFrame = 1;
							}
							break;
 8002a52:	f001 fca4 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8002a56:	23dc      	movs	r3, #220	; 0xdc
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	795b      	ldrb	r3, [r3, #5]
 8002a60:	2210      	movs	r2, #16
 8002a62:	4013      	ands	r3, r2
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00e      	beq.n	8002a88 <DALI_ProcessRxData+0xb64>
									if(applicationControllerPresent == TRUE)
 8002a6a:	4bc6      	ldr	r3, [pc, #792]	; (8002d84 <DALI_ProcessRxData+0xe60>)
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d10a      	bne.n	8002a88 <DALI_ProcessRxData+0xb64>
										applicationActive = TRUE;
 8002a72:	4bc5      	ldr	r3, [pc, #788]	; (8002d88 <DALI_ProcessRxData+0xe64>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	801a      	strh	r2, [r3, #0]
										DALIConfigureMode(applicationActive);
 8002a78:	4bc3      	ldr	r3, [pc, #780]	; (8002d88 <DALI_ProcessRxData+0xe64>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f7fd fdda 	bl	8000638 <DALIConfigureMode>
										DALI_Save_Variable();
 8002a84:	f001 ff36 	bl	80048f4 <DALI_Save_Variable>
								isSecondFrame = 1;
 8002a88:	4bbd      	ldr	r3, [pc, #756]	; (8002d80 <DALI_ProcessRxData+0xe5c>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	701a      	strb	r2, [r3, #0]
							break;
 8002a8e:	f001 fc86 	bl	800439e <DALI_ProcessRxData+0x247a>
						case DISABLE_APPLICATION_CONTROLLER:
							if(frame != previousFrame)
 8002a92:	23d4      	movs	r3, #212	; 0xd4
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4bb7      	ldr	r3, [pc, #732]	; (8002d78 <DALI_ProcessRxData+0xe54>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d003      	beq.n	8002aaa <DALI_ProcessRxData+0xb86>
							{
								DALIReceiveTwice();
 8002aa2:	f7ff f86f 	bl	8001b84 <DALIReceiveTwice>
										DALI_Save_Variable();
									}
								}
								isSecondFrame = 1;
							}
							break;
 8002aa6:	f001 fc7a 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8002aaa:	23dc      	movs	r3, #220	; 0xdc
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	795b      	ldrb	r3, [r3, #5]
 8002ab4:	2210      	movs	r2, #16
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d012      	beq.n	8002ae4 <DALI_ProcessRxData+0xbc0>
									if((applicationControllerAlwaysActive == FALSE) && (applicationControllerPresent == TRUE))
 8002abe:	4bb3      	ldr	r3, [pc, #716]	; (8002d8c <DALI_ProcessRxData+0xe68>)
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10e      	bne.n	8002ae4 <DALI_ProcessRxData+0xbc0>
 8002ac6:	4baf      	ldr	r3, [pc, #700]	; (8002d84 <DALI_ProcessRxData+0xe60>)
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d10a      	bne.n	8002ae4 <DALI_ProcessRxData+0xbc0>
										applicationActive = FALSE;
 8002ace:	4bae      	ldr	r3, [pc, #696]	; (8002d88 <DALI_ProcessRxData+0xe64>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	801a      	strh	r2, [r3, #0]
										DALIConfigureMode(applicationActive);
 8002ad4:	4bac      	ldr	r3, [pc, #688]	; (8002d88 <DALI_ProcessRxData+0xe64>)
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	0018      	movs	r0, r3
 8002adc:	f7fd fdac 	bl	8000638 <DALIConfigureMode>
										DALI_Save_Variable();
 8002ae0:	f001 ff08 	bl	80048f4 <DALI_Save_Variable>
								isSecondFrame = 1;
 8002ae4:	4ba6      	ldr	r3, [pc, #664]	; (8002d80 <DALI_ProcessRxData+0xe5c>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
							break;
 8002aea:	f001 fc58 	bl	800439e <DALI_ProcessRxData+0x247a>
						case SET_OPERATING_MODE:
							if(frame != previousFrame)
 8002aee:	23d4      	movs	r3, #212	; 0xd4
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4ba0      	ldr	r3, [pc, #640]	; (8002d78 <DALI_ProcessRxData+0xe54>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d003      	beq.n	8002b06 <DALI_ProcessRxData+0xbe2>
							{
								DALIReceiveTwice();
 8002afe:	f7ff f841 	bl	8001b84 <DALIReceiveTwice>
//									operatingMode = DTR0;
//									DALI_Save_Variable();
//								}
								isSecondFrame = 1;
							}
							break;
 8002b02:	f001 fc4c 	bl	800439e <DALI_ProcessRxData+0x247a>
								isSecondFrame = 1;
 8002b06:	4b9e      	ldr	r3, [pc, #632]	; (8002d80 <DALI_ProcessRxData+0xe5c>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
							break;
 8002b0c:	f001 fc47 	bl	800439e <DALI_ProcessRxData+0x247a>
						case ADD_TO_DEVICE_GROUPS_0_15:
							if(frame != previousFrame)
 8002b10:	23d4      	movs	r3, #212	; 0xd4
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b97      	ldr	r3, [pc, #604]	; (8002d78 <DALI_ProcessRxData+0xe54>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d003      	beq.n	8002b28 <DALI_ProcessRxData+0xc04>
							{
								DALIReceiveTwice();
 8002b20:	f7ff f830 	bl	8001b84 <DALIReceiveTwice>
									if(deviceGroups != 0)
										resetState = FALSE;
								}
								isSecondFrame = 1;
							}
							break;
 8002b24:	f001 fc3b 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8002b28:	23dc      	movs	r3, #220	; 0xdc
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	795b      	ldrb	r3, [r3, #5]
 8002b32:	2210      	movs	r2, #16
 8002b34:	4013      	ands	r3, r2
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d014      	beq.n	8002b66 <DALI_ProcessRxData+0xc42>
									deviceGroups = deviceGroups|(DTR2 << 8)|DTR1;
 8002b3c:	4b94      	ldr	r3, [pc, #592]	; (8002d90 <DALI_ProcessRxData+0xe6c>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	001a      	movs	r2, r3
 8002b44:	4b93      	ldr	r3, [pc, #588]	; (8002d94 <DALI_ProcessRxData+0xe70>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	4a93      	ldr	r2, [pc, #588]	; (8002d98 <DALI_ProcessRxData+0xe74>)
 8002b4c:	7812      	ldrb	r2, [r2, #0]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	4b90      	ldr	r3, [pc, #576]	; (8002d94 <DALI_ProcessRxData+0xe70>)
 8002b52:	601a      	str	r2, [r3, #0]
									DALI_Save_Variable();
 8002b54:	f001 fece 	bl	80048f4 <DALI_Save_Variable>
									if(deviceGroups != 0)
 8002b58:	4b8e      	ldr	r3, [pc, #568]	; (8002d94 <DALI_ProcessRxData+0xe70>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <DALI_ProcessRxData+0xc42>
										resetState = FALSE;
 8002b60:	4b8e      	ldr	r3, [pc, #568]	; (8002d9c <DALI_ProcessRxData+0xe78>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 8002b66:	4b86      	ldr	r3, [pc, #536]	; (8002d80 <DALI_ProcessRxData+0xe5c>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
							break;
 8002b6c:	f001 fc17 	bl	800439e <DALI_ProcessRxData+0x247a>
						case ADD_TO_DEVICE_GROUPS_16_31:
							if(frame != previousFrame)
 8002b70:	23d4      	movs	r3, #212	; 0xd4
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b7f      	ldr	r3, [pc, #508]	; (8002d78 <DALI_ProcessRxData+0xe54>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d003      	beq.n	8002b88 <DALI_ProcessRxData+0xc64>
							{
								DALIReceiveTwice();
 8002b80:	f7ff f800 	bl	8001b84 <DALIReceiveTwice>
									if(deviceGroups != 0)
										resetState = FALSE;
								}
								isSecondFrame = 1;
							}
							break;
 8002b84:	f001 fc0b 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8002b88:	23dc      	movs	r3, #220	; 0xdc
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	795b      	ldrb	r3, [r3, #5]
 8002b92:	2210      	movs	r2, #16
 8002b94:	4013      	ands	r3, r2
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d015      	beq.n	8002bc8 <DALI_ProcessRxData+0xca4>
									deviceGroups = deviceGroups|(DTR2 << 24)|(DTR1 << 16);
 8002b9c:	4b7c      	ldr	r3, [pc, #496]	; (8002d90 <DALI_ProcessRxData+0xe6c>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	001a      	movs	r2, r3
 8002ba4:	4b7b      	ldr	r3, [pc, #492]	; (8002d94 <DALI_ProcessRxData+0xe70>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	4a7b      	ldr	r2, [pc, #492]	; (8002d98 <DALI_ProcessRxData+0xe74>)
 8002bac:	7812      	ldrb	r2, [r2, #0]
 8002bae:	0412      	lsls	r2, r2, #16
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	4b78      	ldr	r3, [pc, #480]	; (8002d94 <DALI_ProcessRxData+0xe70>)
 8002bb4:	601a      	str	r2, [r3, #0]
									DALI_Save_Variable();
 8002bb6:	f001 fe9d 	bl	80048f4 <DALI_Save_Variable>
									if(deviceGroups != 0)
 8002bba:	4b76      	ldr	r3, [pc, #472]	; (8002d94 <DALI_ProcessRxData+0xe70>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <DALI_ProcessRxData+0xca4>
										resetState = FALSE;
 8002bc2:	4b76      	ldr	r3, [pc, #472]	; (8002d9c <DALI_ProcessRxData+0xe78>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 8002bc8:	4b6d      	ldr	r3, [pc, #436]	; (8002d80 <DALI_ProcessRxData+0xe5c>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
							break;
 8002bce:	f001 fbe6 	bl	800439e <DALI_ProcessRxData+0x247a>
						case REMOVE_FROM_DEVICE_GROUPS_0_15:
							if(frame != previousFrame)
 8002bd2:	23d4      	movs	r3, #212	; 0xd4
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b67      	ldr	r3, [pc, #412]	; (8002d78 <DALI_ProcessRxData+0xe54>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d003      	beq.n	8002bea <DALI_ProcessRxData+0xcc6>
							{
								DALIReceiveTwice();
 8002be2:	f7fe ffcf 	bl	8001b84 <DALIReceiveTwice>
									if(deviceGroups != 0)
										resetState = FALSE;
								}
								isSecondFrame = 1;
							}
							break;
 8002be6:	f001 fbda 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8002bea:	23dc      	movs	r3, #220	; 0xdc
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	795b      	ldrb	r3, [r3, #5]
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d016      	beq.n	8002c2c <DALI_ProcessRxData+0xd08>
									deviceGroups = deviceGroups & (~(DTR2 << 8)) & (~DTR1);
 8002bfe:	4b64      	ldr	r3, [pc, #400]	; (8002d90 <DALI_ProcessRxData+0xe6c>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	43db      	mvns	r3, r3
 8002c06:	001a      	movs	r2, r3
 8002c08:	4b62      	ldr	r3, [pc, #392]	; (8002d94 <DALI_ProcessRxData+0xe70>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	4a62      	ldr	r2, [pc, #392]	; (8002d98 <DALI_ProcessRxData+0xe74>)
 8002c10:	7812      	ldrb	r2, [r2, #0]
 8002c12:	43d2      	mvns	r2, r2
 8002c14:	401a      	ands	r2, r3
 8002c16:	4b5f      	ldr	r3, [pc, #380]	; (8002d94 <DALI_ProcessRxData+0xe70>)
 8002c18:	601a      	str	r2, [r3, #0]
									DALI_Save_Variable();
 8002c1a:	f001 fe6b 	bl	80048f4 <DALI_Save_Variable>
									if(deviceGroups != 0)
 8002c1e:	4b5d      	ldr	r3, [pc, #372]	; (8002d94 <DALI_ProcessRxData+0xe70>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <DALI_ProcessRxData+0xd08>
										resetState = FALSE;
 8002c26:	4b5d      	ldr	r3, [pc, #372]	; (8002d9c <DALI_ProcessRxData+0xe78>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 8002c2c:	4b54      	ldr	r3, [pc, #336]	; (8002d80 <DALI_ProcessRxData+0xe5c>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
							break;
 8002c32:	f001 fbb4 	bl	800439e <DALI_ProcessRxData+0x247a>
						case REMOVE_FROM_DEVICE_GROUPS_16_31:
							if(frame != previousFrame)
 8002c36:	23d4      	movs	r3, #212	; 0xd4
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4b4e      	ldr	r3, [pc, #312]	; (8002d78 <DALI_ProcessRxData+0xe54>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d003      	beq.n	8002c4e <DALI_ProcessRxData+0xd2a>
							{
								DALIReceiveTwice();
 8002c46:	f7fe ff9d 	bl	8001b84 <DALIReceiveTwice>
									if(deviceGroups != 0)
										resetState = FALSE;
								}
								isSecondFrame = 1;
							}
							break;
 8002c4a:	f001 fba8 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8002c4e:	23dc      	movs	r3, #220	; 0xdc
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	795b      	ldrb	r3, [r3, #5]
 8002c58:	2210      	movs	r2, #16
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d017      	beq.n	8002c92 <DALI_ProcessRxData+0xd6e>
									deviceGroups = deviceGroups & (~(DTR2 << 24)) & (~(DTR1 << 16));
 8002c62:	4b4b      	ldr	r3, [pc, #300]	; (8002d90 <DALI_ProcessRxData+0xe6c>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	061b      	lsls	r3, r3, #24
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	001a      	movs	r2, r3
 8002c6c:	4b49      	ldr	r3, [pc, #292]	; (8002d94 <DALI_ProcessRxData+0xe70>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4013      	ands	r3, r2
 8002c72:	4a49      	ldr	r2, [pc, #292]	; (8002d98 <DALI_ProcessRxData+0xe74>)
 8002c74:	7812      	ldrb	r2, [r2, #0]
 8002c76:	0412      	lsls	r2, r2, #16
 8002c78:	43d2      	mvns	r2, r2
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	4b45      	ldr	r3, [pc, #276]	; (8002d94 <DALI_ProcessRxData+0xe70>)
 8002c7e:	601a      	str	r2, [r3, #0]
									DALI_Save_Variable();
 8002c80:	f001 fe38 	bl	80048f4 <DALI_Save_Variable>
									if(deviceGroups != 0)
 8002c84:	4b43      	ldr	r3, [pc, #268]	; (8002d94 <DALI_ProcessRxData+0xe70>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <DALI_ProcessRxData+0xd6e>
										resetState = FALSE;
 8002c8c:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <DALI_ProcessRxData+0xe78>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 8002c92:	4b3b      	ldr	r3, [pc, #236]	; (8002d80 <DALI_ProcessRxData+0xe5c>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
							break;
 8002c98:	f001 fb81 	bl	800439e <DALI_ProcessRxData+0x247a>
						case START_QUIESCENT_MODE:
							if(frame != previousFrame)
 8002c9c:	23d4      	movs	r3, #212	; 0xd4
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <DALI_ProcessRxData+0xe54>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d003      	beq.n	8002cb4 <DALI_ProcessRxData+0xd90>
							{
								DALIReceiveTwice();
 8002cac:	f7fe ff6a 	bl	8001b84 <DALIReceiveTwice>
									quiescentMode = ENABLED;
									quiescent_time = 15; // 15 min
								}
								isSecondFrame = 1;
							}
							break;
 8002cb0:	f001 fb75 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8002cb4:	23dc      	movs	r3, #220	; 0xdc
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	795b      	ldrb	r3, [r3, #5]
 8002cbe:	2210      	movs	r2, #16
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <DALI_ProcessRxData+0xdb0>
									quiescentMode = ENABLED;
 8002cc8:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <DALI_ProcessRxData+0xe7c>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	701a      	strb	r2, [r3, #0]
									quiescent_time = 15; // 15 min
 8002cce:	4b35      	ldr	r3, [pc, #212]	; (8002da4 <DALI_ProcessRxData+0xe80>)
 8002cd0:	220f      	movs	r2, #15
 8002cd2:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 8002cd4:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <DALI_ProcessRxData+0xe5c>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
							break;
 8002cda:	f001 fb60 	bl	800439e <DALI_ProcessRxData+0x247a>
						case STOP_QUIESCENT_MODE:
							if(frame != previousFrame)
 8002cde:	23d4      	movs	r3, #212	; 0xd4
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <DALI_ProcessRxData+0xe54>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d003      	beq.n	8002cf6 <DALI_ProcessRxData+0xdd2>
							{
								DALIReceiveTwice();
 8002cee:	f7fe ff49 	bl	8001b84 <DALIReceiveTwice>
									quiescentMode = DISABLED;
									quiescent_time = 0;
								}
								isSecondFrame = 1;
							}
							break;
 8002cf2:	f001 fb54 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8002cf6:	23dc      	movs	r3, #220	; 0xdc
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	795b      	ldrb	r3, [r3, #5]
 8002d00:	2210      	movs	r2, #16
 8002d02:	4013      	ands	r3, r2
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <DALI_ProcessRxData+0xdf2>
									quiescentMode = DISABLED;
 8002d0a:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <DALI_ProcessRxData+0xe7c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
									quiescent_time = 0;
 8002d10:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <DALI_ProcessRxData+0xe80>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 8002d16:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <DALI_ProcessRxData+0xe5c>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
							break;
 8002d1c:	f001 fb3f 	bl	800439e <DALI_ProcessRxData+0x247a>
						case ENABLE_POWER_CYCLE_NOTIFICATION:
							if(frame != previousFrame)
 8002d20:	23d4      	movs	r3, #212	; 0xd4
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <DALI_ProcessRxData+0xe54>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d003      	beq.n	8002d38 <DALI_ProcessRxData+0xe14>
							{
								DALIReceiveTwice();
 8002d30:	f7fe ff28 	bl	8001b84 <DALIReceiveTwice>
									powerCycleNotification = ENABLED;
									DALI_Save_Variable();
								}
								isSecondFrame = 1;
							}
							break;
 8002d34:	f001 fb33 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8002d38:	23dc      	movs	r3, #220	; 0xdc
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	795b      	ldrb	r3, [r3, #5]
 8002d42:	2210      	movs	r2, #16
 8002d44:	4013      	ands	r3, r2
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d004      	beq.n	8002d56 <DALI_ProcessRxData+0xe32>
									powerCycleNotification = ENABLED;
 8002d4c:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <DALI_ProcessRxData+0xe84>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	801a      	strh	r2, [r3, #0]
									DALI_Save_Variable();
 8002d52:	f001 fdcf 	bl	80048f4 <DALI_Save_Variable>
								isSecondFrame = 1;
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <DALI_ProcessRxData+0xe5c>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
							break;
 8002d5c:	f001 fb1f 	bl	800439e <DALI_ProcessRxData+0x247a>
						case DISABLE_POWER_CYCLE_NOTIFICATION:
							if(frame != previousFrame)
 8002d60:	23d4      	movs	r3, #212	; 0xd4
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <DALI_ProcessRxData+0xe54>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d01d      	beq.n	8002dac <DALI_ProcessRxData+0xe88>
							{
								DALIReceiveTwice();
 8002d70:	f7fe ff08 	bl	8001b84 <DALIReceiveTwice>
									powerCycleNotification = DISABLED;
									DALI_Save_Variable();
								}
								isSecondFrame = 1;
							}
							break;
 8002d74:	f001 fb13 	bl	800439e <DALI_ProcessRxData+0x247a>
 8002d78:	20000888 	.word	0x20000888
 8002d7c:	200000b8 	.word	0x200000b8
 8002d80:	200000ce 	.word	0x200000ce
 8002d84:	2000088e 	.word	0x2000088e
 8002d88:	2000089a 	.word	0x2000089a
 8002d8c:	200008a4 	.word	0x200008a4
 8002d90:	200000b6 	.word	0x200000b6
 8002d94:	2000087c 	.word	0x2000087c
 8002d98:	200000b5 	.word	0x200000b5
 8002d9c:	2000000d 	.word	0x2000000d
 8002da0:	200000b7 	.word	0x200000b7
 8002da4:	200008aa 	.word	0x200008aa
 8002da8:	200008ba 	.word	0x200008ba
								if(msg_ptr->rxSendTwicePossible == 1)
 8002dac:	23dc      	movs	r3, #220	; 0xdc
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	795b      	ldrb	r3, [r3, #5]
 8002db6:	2210      	movs	r2, #16
 8002db8:	4013      	ands	r3, r2
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <DALI_ProcessRxData+0xea6>
									powerCycleNotification = DISABLED;
 8002dc0:	4bdf      	ldr	r3, [pc, #892]	; (8003140 <DALI_ProcessRxData+0x121c>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	801a      	strh	r2, [r3, #0]
									DALI_Save_Variable();
 8002dc6:	f001 fd95 	bl	80048f4 <DALI_Save_Variable>
								isSecondFrame = 1;
 8002dca:	4bde      	ldr	r3, [pc, #888]	; (8003144 <DALI_ProcessRxData+0x1220>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
							break;
 8002dd0:	f001 fae5 	bl	800439e <DALI_ProcessRxData+0x247a>
						case SAVE_PERSISTENT_VARIABLES:
							if(frame != previousFrame)
 8002dd4:	23d4      	movs	r3, #212	; 0xd4
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4bda      	ldr	r3, [pc, #872]	; (8003148 <DALI_ProcessRxData+0x1224>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d003      	beq.n	8002dec <DALI_ProcessRxData+0xec8>
							{
								DALIReceiveTwice();
 8002de4:	f7fe fece 	bl	8001b84 <DALIReceiveTwice>
								{
									DALI_Save_Variable();
								}
								isSecondFrame = 1;
							}
							break;
 8002de8:	f001 fad9 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8002dec:	23dc      	movs	r3, #220	; 0xdc
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	795b      	ldrb	r3, [r3, #5]
 8002df6:	2210      	movs	r2, #16
 8002df8:	4013      	ands	r3, r2
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <DALI_ProcessRxData+0xee0>
									DALI_Save_Variable();
 8002e00:	f001 fd78 	bl	80048f4 <DALI_Save_Variable>
								isSecondFrame = 1;
 8002e04:	4bcf      	ldr	r3, [pc, #828]	; (8003144 <DALI_ProcessRxData+0x1220>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
							break;
 8002e0a:	f001 fac8 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_DEVICE_STATUS:
							if(applicationActive)
 8002e0e:	4bcf      	ldr	r3, [pc, #828]	; (800314c <DALI_ProcessRxData+0x1228>)
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d007      	beq.n	8002e26 <DALI_ProcessRxData+0xf02>
							{
								SET_BIT(deviceStatus, APP_ACTIVE);
 8002e16:	4bce      	ldr	r3, [pc, #824]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	4bcb      	ldr	r3, [pc, #812]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002e22:	701a      	strb	r2, [r3, #0]
 8002e24:	e006      	b.n	8002e34 <DALI_ProcessRxData+0xf10>
							}
							else
							{
								CLEAR_BIT(deviceStatus, APP_ACTIVE);
 8002e26:	4bca      	ldr	r3, [pc, #808]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2208      	movs	r2, #8
 8002e2c:	4393      	bics	r3, r2
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	4bc7      	ldr	r3, [pc, #796]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002e32:	701a      	strb	r2, [r3, #0]
							}

							if(inputDeviceError)
 8002e34:	4bc7      	ldr	r3, [pc, #796]	; (8003154 <DALI_ProcessRxData+0x1230>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <DALI_ProcessRxData+0xf28>
							{
								SET_BIT(deviceStatus, INPUT_DEVICE_ERROR);
 8002e3c:	4bc4      	ldr	r3, [pc, #784]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2201      	movs	r2, #1
 8002e42:	4313      	orrs	r3, r2
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4bc2      	ldr	r3, [pc, #776]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	e006      	b.n	8002e5a <DALI_ProcessRxData+0xf36>
							}
							else
							{
								CLEAR_BIT(deviceStatus, INPUT_DEVICE_ERROR);
 8002e4c:	4bc0      	ldr	r3, [pc, #768]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2201      	movs	r2, #1
 8002e52:	4393      	bics	r3, r2
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4bbe      	ldr	r3, [pc, #760]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002e58:	701a      	strb	r2, [r3, #0]
							}

							if(quiescentMode)
 8002e5a:	4bbf      	ldr	r3, [pc, #764]	; (8003158 <DALI_ProcessRxData+0x1234>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <DALI_ProcessRxData+0xf4e>
							{
								SET_BIT(deviceStatus, QUIESCENT_MODE);
 8002e62:	4bbb      	ldr	r3, [pc, #748]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2202      	movs	r2, #2
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	4bb8      	ldr	r3, [pc, #736]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	e006      	b.n	8002e80 <DALI_ProcessRxData+0xf5c>
							}
							else
							{
								CLEAR_BIT(deviceStatus, QUIESCENT_MODE);
 8002e72:	4bb7      	ldr	r3, [pc, #732]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2202      	movs	r2, #2
 8002e78:	4393      	bics	r3, r2
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	4bb4      	ldr	r3, [pc, #720]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002e7e:	701a      	strb	r2, [r3, #0]
							}

							if(shortAddress == 0xFF)
 8002e80:	4bb6      	ldr	r3, [pc, #728]	; (800315c <DALI_ProcessRxData+0x1238>)
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	2bff      	cmp	r3, #255	; 0xff
 8002e86:	d107      	bne.n	8002e98 <DALI_ProcessRxData+0xf74>
							{
								SET_BIT(deviceStatus, SHORT_ADDRESS);
 8002e88:	4bb1      	ldr	r3, [pc, #708]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4baf      	ldr	r3, [pc, #700]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002e94:	701a      	strb	r2, [r3, #0]
 8002e96:	e006      	b.n	8002ea6 <DALI_ProcessRxData+0xf82>
							}
							else
							{
								CLEAR_BIT(deviceStatus, SHORT_ADDRESS);
 8002e98:	4bad      	ldr	r3, [pc, #692]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	4393      	bics	r3, r2
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	4bab      	ldr	r3, [pc, #684]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002ea4:	701a      	strb	r2, [r3, #0]
							}

							if(applicationControllerError)
 8002ea6:	4bae      	ldr	r3, [pc, #696]	; (8003160 <DALI_ProcessRxData+0x123c>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <DALI_ProcessRxData+0xf9a>
							{
								SET_BIT(deviceStatus, APP_CONTROLLER_ERROR);
 8002eae:	4ba8      	ldr	r3, [pc, #672]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2210      	movs	r2, #16
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	4ba5      	ldr	r3, [pc, #660]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	e006      	b.n	8002ecc <DALI_ProcessRxData+0xfa8>
							}
							else
							{
								CLEAR_BIT(deviceStatus, APP_CONTROLLER_ERROR);
 8002ebe:	4ba4      	ldr	r3, [pc, #656]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2210      	movs	r2, #16
 8002ec4:	4393      	bics	r3, r2
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	4ba1      	ldr	r3, [pc, #644]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002eca:	701a      	strb	r2, [r3, #0]
							}

							if(powerCycleSeen)
 8002ecc:	4ba5      	ldr	r3, [pc, #660]	; (8003164 <DALI_ProcessRxData+0x1240>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <DALI_ProcessRxData+0xfc0>
							{
								SET_BIT(deviceStatus, POWER_CYCLE_SEEN);
 8002ed4:	4b9e      	ldr	r3, [pc, #632]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	4313      	orrs	r3, r2
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4b9c      	ldr	r3, [pc, #624]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e006      	b.n	8002ef2 <DALI_ProcessRxData+0xfce>
							}
							else
							{
								CLEAR_BIT(deviceStatus, POWER_CYCLE_SEEN);
 8002ee4:	4b9a      	ldr	r3, [pc, #616]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	4393      	bics	r3, r2
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	4b98      	ldr	r3, [pc, #608]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002ef0:	701a      	strb	r2, [r3, #0]
							}

							if(resetState)
 8002ef2:	4b9d      	ldr	r3, [pc, #628]	; (8003168 <DALI_ProcessRxData+0x1244>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <DALI_ProcessRxData+0xfe6>
							{
								SET_BIT(deviceStatus, RESET_STATE);
 8002efa:	4b95      	ldr	r3, [pc, #596]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2240      	movs	r2, #64	; 0x40
 8002f00:	4313      	orrs	r3, r2
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	4b92      	ldr	r3, [pc, #584]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e006      	b.n	8002f18 <DALI_ProcessRxData+0xff4>
							}
							else
							{
								CLEAR_BIT(deviceStatus, RESET_STATE);
 8002f0a:	4b91      	ldr	r3, [pc, #580]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2240      	movs	r2, #64	; 0x40
 8002f10:	4393      	bics	r3, r2
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	4b8e      	ldr	r3, [pc, #568]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002f16:	701a      	strb	r2, [r3, #0]
							}

							DALITxData_t data = {(uint32_t) deviceStatus, 1, 0, 1};
 8002f18:	4b8d      	ldr	r3, [pc, #564]	; (8003150 <DALI_ProcessRxData+0x122c>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	001a      	movs	r2, r3
 8002f1e:	21b4      	movs	r1, #180	; 0xb4
 8002f20:	0049      	lsls	r1, r1, #1
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	187b      	adds	r3, r7, r1
 8002f28:	2201      	movs	r2, #1
 8002f2a:	711a      	strb	r2, [r3, #4]
 8002f2c:	187b      	adds	r3, r7, r1
 8002f2e:	2200      	movs	r2, #0
 8002f30:	715a      	strb	r2, [r3, #5]
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	2201      	movs	r2, #1
 8002f36:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	f7fe fbf7 	bl	8001730 <DALISendData>
							break;
 8002f42:	f001 fa2c 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_DEVICE_CAPABILITIES:
						{
							if (applicationControllerAlwaysActive)
 8002f46:	4b89      	ldr	r3, [pc, #548]	; (800316c <DALI_ProcessRxData+0x1248>)
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <DALI_ProcessRxData+0x103a>
							{
								SET_BIT(deviceCapabilities, CONTROLLER_ALWAYS_ACTIVE);
 8002f4e:	4b88      	ldr	r3, [pc, #544]	; (8003170 <DALI_ProcessRxData+0x124c>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2204      	movs	r2, #4
 8002f54:	4313      	orrs	r3, r2
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	4b85      	ldr	r3, [pc, #532]	; (8003170 <DALI_ProcessRxData+0x124c>)
 8002f5a:	701a      	strb	r2, [r3, #0]
 8002f5c:	e006      	b.n	8002f6c <DALI_ProcessRxData+0x1048>
							}
							else
							{
								CLEAR_BIT(deviceCapabilities, CONTROLLER_ALWAYS_ACTIVE);
 8002f5e:	4b84      	ldr	r3, [pc, #528]	; (8003170 <DALI_ProcessRxData+0x124c>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2204      	movs	r2, #4
 8002f64:	4393      	bics	r3, r2
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	4b81      	ldr	r3, [pc, #516]	; (8003170 <DALI_ProcessRxData+0x124c>)
 8002f6a:	701a      	strb	r2, [r3, #0]
							}
							if (applicationControllerPresent)
 8002f6c:	4b81      	ldr	r3, [pc, #516]	; (8003174 <DALI_ProcessRxData+0x1250>)
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <DALI_ProcessRxData+0x1060>
							{
								SET_BIT(deviceCapabilities, CONTROLLER_PRESENT);
 8002f74:	4b7e      	ldr	r3, [pc, #504]	; (8003170 <DALI_ProcessRxData+0x124c>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4b7c      	ldr	r3, [pc, #496]	; (8003170 <DALI_ProcessRxData+0x124c>)
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	e006      	b.n	8002f92 <DALI_ProcessRxData+0x106e>
							}
							else
							{
								CLEAR_BIT(deviceCapabilities, CONTROLLER_PRESENT);
 8002f84:	4b7a      	ldr	r3, [pc, #488]	; (8003170 <DALI_ProcessRxData+0x124c>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	4393      	bics	r3, r2
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4b78      	ldr	r3, [pc, #480]	; (8003170 <DALI_ProcessRxData+0x124c>)
 8002f90:	701a      	strb	r2, [r3, #0]
							}
							if (numberOfInstances > 0)
 8002f92:	4b79      	ldr	r3, [pc, #484]	; (8003178 <DALI_ProcessRxData+0x1254>)
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <DALI_ProcessRxData+0x1086>
							{
								SET_BIT(deviceCapabilities, INSTANCE_PRESENT);
 8002f9a:	4b75      	ldr	r3, [pc, #468]	; (8003170 <DALI_ProcessRxData+0x124c>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	4b72      	ldr	r3, [pc, #456]	; (8003170 <DALI_ProcessRxData+0x124c>)
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e006      	b.n	8002fb8 <DALI_ProcessRxData+0x1094>
							}
							else
							{
								CLEAR_BIT(deviceCapabilities, INSTANCE_PRESENT);
 8002faa:	4b71      	ldr	r3, [pc, #452]	; (8003170 <DALI_ProcessRxData+0x124c>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	4393      	bics	r3, r2
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	4b6e      	ldr	r3, [pc, #440]	; (8003170 <DALI_ProcessRxData+0x124c>)
 8002fb6:	701a      	strb	r2, [r3, #0]
							}
							DALITxData_t data = {(uint32_t) deviceCapabilities, 1, 0, 1};
 8002fb8:	4b6d      	ldr	r3, [pc, #436]	; (8003170 <DALI_ProcessRxData+0x124c>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	001a      	movs	r2, r3
 8002fbe:	21ae      	movs	r1, #174	; 0xae
 8002fc0:	0049      	lsls	r1, r1, #1
 8002fc2:	187b      	adds	r3, r7, r1
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	2201      	movs	r2, #1
 8002fca:	711a      	strb	r2, [r3, #4]
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	2200      	movs	r2, #0
 8002fd0:	715a      	strb	r2, [r3, #5]
 8002fd2:	187b      	adds	r3, r7, r1
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	6859      	ldr	r1, [r3, #4]
 8002fde:	f7fe fba7 	bl	8001730 <DALISendData>
						}
							break;
 8002fe2:	f001 f9dc 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_APPLICATION_CONTROLLER_ERROR:
							break;
						case QUERY_INPUT_DEVICE_ERROR:
							if(instanceError != 0)
 8002fe6:	4b65      	ldr	r3, [pc, #404]	; (800317c <DALI_ProcessRxData+0x1258>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <DALI_ProcessRxData+0x10ce>
 8002fee:	f001 f9bb 	bl	8004368 <DALI_ProcessRxData+0x2444>
							{
								DALITxData_t data = {instanceError, 1, 0, 1};
 8002ff2:	4b62      	ldr	r3, [pc, #392]	; (800317c <DALI_ProcessRxData+0x1258>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	001a      	movs	r2, r3
 8002ff8:	21aa      	movs	r1, #170	; 0xaa
 8002ffa:	0049      	lsls	r1, r1, #1
 8002ffc:	187b      	adds	r3, r7, r1
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	187b      	adds	r3, r7, r1
 8003002:	2201      	movs	r2, #1
 8003004:	711a      	strb	r2, [r3, #4]
 8003006:	187b      	adds	r3, r7, r1
 8003008:	2200      	movs	r2, #0
 800300a:	715a      	strb	r2, [r3, #5]
 800300c:	187b      	adds	r3, r7, r1
 800300e:	2201      	movs	r2, #1
 8003010:	719a      	strb	r2, [r3, #6]
								DALISendData(data);
 8003012:	187b      	adds	r3, r7, r1
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	f7fe fb8a 	bl	8001730 <DALISendData>
							}
							break;
 800301c:	f001 f9a4 	bl	8004368 <DALI_ProcessRxData+0x2444>
						case QUERY_MISSING_SHORT_ADDRESS:
							if (shortAddress == 0xFF)
 8003020:	4b4e      	ldr	r3, [pc, #312]	; (800315c <DALI_ProcessRxData+0x1238>)
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	2bff      	cmp	r3, #255	; 0xff
 8003026:	d001      	beq.n	800302c <DALI_ProcessRxData+0x1108>
 8003028:	f001 f9a0 	bl	800436c <DALI_ProcessRxData+0x2448>
							{
								DALITxData_t data = {0xFF, 1, 0, 1};
 800302c:	21a6      	movs	r1, #166	; 0xa6
 800302e:	0049      	lsls	r1, r1, #1
 8003030:	187b      	adds	r3, r7, r1
 8003032:	4a53      	ldr	r2, [pc, #332]	; (8003180 <DALI_ProcessRxData+0x125c>)
 8003034:	ca11      	ldmia	r2!, {r0, r4}
 8003036:	c311      	stmia	r3!, {r0, r4}
								DALISendData(data);
 8003038:	187b      	adds	r3, r7, r1
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	6859      	ldr	r1, [r3, #4]
 800303e:	f7fe fb77 	bl	8001730 <DALISendData>
							}
							break;
 8003042:	f001 f993 	bl	800436c <DALI_ProcessRxData+0x2448>
						case QUERY_VERSION_NUMBER:;
							memory_read_t version_number = dali_memory_read(0, 0x17);
 8003046:	2117      	movs	r1, #23
 8003048:	2000      	movs	r0, #0
 800304a:	f001 fedb 	bl	8004e04 <dali_memory_read>
 800304e:	1c03      	adds	r3, r0, #0
 8003050:	1c1a      	adds	r2, r3, #0
 8003052:	21b2      	movs	r1, #178	; 0xb2
 8003054:	0049      	lsls	r1, r1, #1
 8003056:	187b      	adds	r3, r7, r1
 8003058:	801a      	strh	r2, [r3, #0]
							if(version_number.success == 1)
 800305a:	187b      	adds	r3, r7, r1
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d001      	beq.n	8003066 <DALI_ProcessRxData+0x1142>
 8003062:	f001 f985 	bl	8004370 <DALI_ProcessRxData+0x244c>
							{
								DALITxData_t data = {version_number.value, 1, 0, 1};
 8003066:	23b2      	movs	r3, #178	; 0xb2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	785b      	ldrb	r3, [r3, #1]
 800306e:	001a      	movs	r2, r3
 8003070:	21a2      	movs	r1, #162	; 0xa2
 8003072:	0049      	lsls	r1, r1, #1
 8003074:	187b      	adds	r3, r7, r1
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	187b      	adds	r3, r7, r1
 800307a:	2201      	movs	r2, #1
 800307c:	711a      	strb	r2, [r3, #4]
 800307e:	187b      	adds	r3, r7, r1
 8003080:	2200      	movs	r2, #0
 8003082:	715a      	strb	r2, [r3, #5]
 8003084:	187b      	adds	r3, r7, r1
 8003086:	2201      	movs	r2, #1
 8003088:	719a      	strb	r2, [r3, #6]
								DALISendData(data);
 800308a:	187b      	adds	r3, r7, r1
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	f7fe fb4e 	bl	8001730 <DALISendData>
							}
							break;
 8003094:	f001 f96c 	bl	8004370 <DALI_ProcessRxData+0x244c>
						case QUERY_CONTENT_DTR0:
						{
							memory_related = 1;
 8003098:	23c8      	movs	r3, #200	; 0xc8
 800309a:	33ff      	adds	r3, #255	; 0xff
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
							DALITxData_t data = {DTR0, 1, 0, 1};
 80030a2:	4b38      	ldr	r3, [pc, #224]	; (8003184 <DALI_ProcessRxData+0x1260>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	001a      	movs	r2, r3
 80030a8:	219e      	movs	r1, #158	; 0x9e
 80030aa:	0049      	lsls	r1, r1, #1
 80030ac:	187b      	adds	r3, r7, r1
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	2201      	movs	r2, #1
 80030b4:	711a      	strb	r2, [r3, #4]
 80030b6:	187b      	adds	r3, r7, r1
 80030b8:	2200      	movs	r2, #0
 80030ba:	715a      	strb	r2, [r3, #5]
 80030bc:	187b      	adds	r3, r7, r1
 80030be:	2201      	movs	r2, #1
 80030c0:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	f7fe fb32 	bl	8001730 <DALISendData>
						}
							break;
 80030cc:	f001 f967 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_CONTENT_DTR1:
						{
							memory_related = 1;
 80030d0:	23c8      	movs	r3, #200	; 0xc8
 80030d2:	33ff      	adds	r3, #255	; 0xff
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
							DALITxData_t data = {DTR1, 1, 0, 1};
 80030da:	4b2b      	ldr	r3, [pc, #172]	; (8003188 <DALI_ProcessRxData+0x1264>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	001a      	movs	r2, r3
 80030e0:	219a      	movs	r1, #154	; 0x9a
 80030e2:	0049      	lsls	r1, r1, #1
 80030e4:	187b      	adds	r3, r7, r1
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	187b      	adds	r3, r7, r1
 80030ea:	2201      	movs	r2, #1
 80030ec:	711a      	strb	r2, [r3, #4]
 80030ee:	187b      	adds	r3, r7, r1
 80030f0:	2200      	movs	r2, #0
 80030f2:	715a      	strb	r2, [r3, #5]
 80030f4:	187b      	adds	r3, r7, r1
 80030f6:	2201      	movs	r2, #1
 80030f8:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 80030fa:	187b      	adds	r3, r7, r1
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	f7fe fb16 	bl	8001730 <DALISendData>
						}
							break;
 8003104:	f001 f94b 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_CONTENT_DTR2:
						{
							memory_related = 1;
 8003108:	23c8      	movs	r3, #200	; 0xc8
 800310a:	33ff      	adds	r3, #255	; 0xff
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
							DALITxData_t data = {DTR2, 1, 0, 1};
 8003112:	4b1e      	ldr	r3, [pc, #120]	; (800318c <DALI_ProcessRxData+0x1268>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	001a      	movs	r2, r3
 8003118:	2196      	movs	r1, #150	; 0x96
 800311a:	0049      	lsls	r1, r1, #1
 800311c:	187b      	adds	r3, r7, r1
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	187b      	adds	r3, r7, r1
 8003122:	2201      	movs	r2, #1
 8003124:	711a      	strb	r2, [r3, #4]
 8003126:	187b      	adds	r3, r7, r1
 8003128:	2200      	movs	r2, #0
 800312a:	715a      	strb	r2, [r3, #5]
 800312c:	187b      	adds	r3, r7, r1
 800312e:	2201      	movs	r2, #1
 8003130:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003132:	187b      	adds	r3, r7, r1
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	f7fe fafa 	bl	8001730 <DALISendData>
						}
							break;
 800313c:	f001 f92f 	bl	800439e <DALI_ProcessRxData+0x247a>
 8003140:	200008ba 	.word	0x200008ba
 8003144:	200000ce 	.word	0x200000ce
 8003148:	20000888 	.word	0x20000888
 800314c:	2000089a 	.word	0x2000089a
 8003150:	200000bd 	.word	0x200000bd
 8003154:	200000bb 	.word	0x200000bb
 8003158:	200000b7 	.word	0x200000b7
 800315c:	20000898 	.word	0x20000898
 8003160:	200000ba 	.word	0x200000ba
 8003164:	2000000c 	.word	0x2000000c
 8003168:	2000000d 	.word	0x2000000d
 800316c:	200008a4 	.word	0x200008a4
 8003170:	200000bc 	.word	0x200000bc
 8003174:	2000088e 	.word	0x2000088e
 8003178:	200008b2 	.word	0x200008b2
 800317c:	200000be 	.word	0x200000be
 8003180:	08008844 	.word	0x08008844
 8003184:	200000b4 	.word	0x200000b4
 8003188:	200000b5 	.word	0x200000b5
 800318c:	200000b6 	.word	0x200000b6
						case QUERY_NUMBER_OF_INSTANCES:
						{
							DALITxData_t data = {numberOfInstances, 1, 0, 1};
 8003190:	4bf8      	ldr	r3, [pc, #992]	; (8003574 <DALI_ProcessRxData+0x1650>)
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	001a      	movs	r2, r3
 8003196:	2192      	movs	r1, #146	; 0x92
 8003198:	0049      	lsls	r1, r1, #1
 800319a:	187b      	adds	r3, r7, r1
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	187b      	adds	r3, r7, r1
 80031a0:	2201      	movs	r2, #1
 80031a2:	711a      	strb	r2, [r3, #4]
 80031a4:	187b      	adds	r3, r7, r1
 80031a6:	2200      	movs	r2, #0
 80031a8:	715a      	strb	r2, [r3, #5]
 80031aa:	187b      	adds	r3, r7, r1
 80031ac:	2201      	movs	r2, #1
 80031ae:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 80031b0:	187b      	adds	r3, r7, r1
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	6859      	ldr	r1, [r3, #4]
 80031b6:	f7fe fabb 	bl	8001730 <DALISendData>
						}
							break;
 80031ba:	f001 f8f0 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_RANDOM_ADDRESS_H:
						{
							DALITxData_t data = {(randomAddress >> 16) & 0xFF, 1, 0, 1};
 80031be:	4bee      	ldr	r3, [pc, #952]	; (8003578 <DALI_ProcessRxData+0x1654>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	0c1b      	lsrs	r3, r3, #16
 80031c4:	22ff      	movs	r2, #255	; 0xff
 80031c6:	401a      	ands	r2, r3
 80031c8:	218e      	movs	r1, #142	; 0x8e
 80031ca:	0049      	lsls	r1, r1, #1
 80031cc:	187b      	adds	r3, r7, r1
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	2201      	movs	r2, #1
 80031d4:	711a      	strb	r2, [r3, #4]
 80031d6:	187b      	adds	r3, r7, r1
 80031d8:	2200      	movs	r2, #0
 80031da:	715a      	strb	r2, [r3, #5]
 80031dc:	187b      	adds	r3, r7, r1
 80031de:	2201      	movs	r2, #1
 80031e0:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 80031e2:	187b      	adds	r3, r7, r1
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	f7fe faa2 	bl	8001730 <DALISendData>
						}
							break;
 80031ec:	f001 f8d7 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_RANDOM_ADDRESS_M:
						{
							DALITxData_t data = {(randomAddress >> 8) & 0xFF, 1, 0, 1};
 80031f0:	4be1      	ldr	r3, [pc, #900]	; (8003578 <DALI_ProcessRxData+0x1654>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	22ff      	movs	r2, #255	; 0xff
 80031f8:	401a      	ands	r2, r3
 80031fa:	218a      	movs	r1, #138	; 0x8a
 80031fc:	0049      	lsls	r1, r1, #1
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	187b      	adds	r3, r7, r1
 8003204:	2201      	movs	r2, #1
 8003206:	711a      	strb	r2, [r3, #4]
 8003208:	187b      	adds	r3, r7, r1
 800320a:	2200      	movs	r2, #0
 800320c:	715a      	strb	r2, [r3, #5]
 800320e:	187b      	adds	r3, r7, r1
 8003210:	2201      	movs	r2, #1
 8003212:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003214:	187b      	adds	r3, r7, r1
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	6859      	ldr	r1, [r3, #4]
 800321a:	f7fe fa89 	bl	8001730 <DALISendData>
						}
							break;
 800321e:	f001 f8be 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_RANDOM_ADDRESS_L:
						{
							DALITxData_t data = {randomAddress & 0xFF, 1, 0, 1};
 8003222:	4bd5      	ldr	r3, [pc, #852]	; (8003578 <DALI_ProcessRxData+0x1654>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	22ff      	movs	r2, #255	; 0xff
 8003228:	401a      	ands	r2, r3
 800322a:	2186      	movs	r1, #134	; 0x86
 800322c:	0049      	lsls	r1, r1, #1
 800322e:	187b      	adds	r3, r7, r1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	187b      	adds	r3, r7, r1
 8003234:	2201      	movs	r2, #1
 8003236:	711a      	strb	r2, [r3, #4]
 8003238:	187b      	adds	r3, r7, r1
 800323a:	2200      	movs	r2, #0
 800323c:	715a      	strb	r2, [r3, #5]
 800323e:	187b      	adds	r3, r7, r1
 8003240:	2201      	movs	r2, #1
 8003242:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003244:	187b      	adds	r3, r7, r1
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	6859      	ldr	r1, [r3, #4]
 800324a:	f7fe fa71 	bl	8001730 <DALISendData>
						}
							break;
 800324e:	f001 f8a6 	bl	800439e <DALI_ProcessRxData+0x247a>
						case READ_MEMORY_LOCATION:;
						{
							memory_read_t read = dali_memory_read(DTR1, DTR0);
 8003252:	4bca      	ldr	r3, [pc, #808]	; (800357c <DALI_ProcessRxData+0x1658>)
 8003254:	781a      	ldrb	r2, [r3, #0]
 8003256:	4bca      	ldr	r3, [pc, #808]	; (8003580 <DALI_ProcessRxData+0x165c>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	0019      	movs	r1, r3
 800325c:	0010      	movs	r0, r2
 800325e:	f001 fdd1 	bl	8004e04 <dali_memory_read>
 8003262:	1c03      	adds	r3, r0, #0
 8003264:	1c1a      	adds	r2, r3, #0
 8003266:	2184      	movs	r1, #132	; 0x84
 8003268:	0049      	lsls	r1, r1, #1
 800326a:	187b      	adds	r3, r7, r1
 800326c:	801a      	strh	r2, [r3, #0]
							if(read.success == 1)
 800326e:	187b      	adds	r3, r7, r1
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d127      	bne.n	80032c6 <DALI_ProcessRxData+0x13a2>
							{
								DALITxData_t data = {read.value, 1, 0, 1};
 8003276:	2384      	movs	r3, #132	; 0x84
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	785b      	ldrb	r3, [r3, #1]
 800327e:	001a      	movs	r2, r3
 8003280:	1c7b      	adds	r3, r7, #1
 8003282:	33ff      	adds	r3, #255	; 0xff
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	1c7b      	adds	r3, r7, #1
 8003288:	33ff      	adds	r3, #255	; 0xff
 800328a:	2201      	movs	r2, #1
 800328c:	711a      	strb	r2, [r3, #4]
 800328e:	1c7b      	adds	r3, r7, #1
 8003290:	33ff      	adds	r3, #255	; 0xff
 8003292:	2200      	movs	r2, #0
 8003294:	715a      	strb	r2, [r3, #5]
 8003296:	1c7b      	adds	r3, r7, #1
 8003298:	33ff      	adds	r3, #255	; 0xff
 800329a:	2201      	movs	r2, #1
 800329c:	719a      	strb	r2, [r3, #6]
								DALISendData(data);
 800329e:	1c7b      	adds	r3, r7, #1
 80032a0:	33ff      	adds	r3, #255	; 0xff
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	6859      	ldr	r1, [r3, #4]
 80032a6:	f7fe fa43 	bl	8001730 <DALISendData>
								if(DTR0 < 0xFF)
 80032aa:	4bb5      	ldr	r3, [pc, #724]	; (8003580 <DALI_ProcessRxData+0x165c>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2bff      	cmp	r3, #255	; 0xff
 80032b0:	d101      	bne.n	80032b6 <DALI_ProcessRxData+0x1392>
 80032b2:	f001 f85f 	bl	8004374 <DALI_ProcessRxData+0x2450>
									DTR0++;
 80032b6:	4bb2      	ldr	r3, [pc, #712]	; (8003580 <DALI_ProcessRxData+0x165c>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	3301      	adds	r3, #1
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4bb0      	ldr	r3, [pc, #704]	; (8003580 <DALI_ProcessRxData+0x165c>)
 80032c0:	701a      	strb	r2, [r3, #0]
							{
								if((DTR1 == 0) || (DTR1 == 189))
									DTR0++;
							}
						}
							break;
 80032c2:	f001 f857 	bl	8004374 <DALI_ProcessRxData+0x2450>
								if((DTR1 == 0) || (DTR1 == 189))
 80032c6:	4bad      	ldr	r3, [pc, #692]	; (800357c <DALI_ProcessRxData+0x1658>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <DALI_ProcessRxData+0x13b6>
 80032ce:	4bab      	ldr	r3, [pc, #684]	; (800357c <DALI_ProcessRxData+0x1658>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2bbd      	cmp	r3, #189	; 0xbd
 80032d4:	d001      	beq.n	80032da <DALI_ProcessRxData+0x13b6>
 80032d6:	f001 f84d 	bl	8004374 <DALI_ProcessRxData+0x2450>
									DTR0++;
 80032da:	4ba9      	ldr	r3, [pc, #676]	; (8003580 <DALI_ProcessRxData+0x165c>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	3301      	adds	r3, #1
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4ba7      	ldr	r3, [pc, #668]	; (8003580 <DALI_ProcessRxData+0x165c>)
 80032e4:	701a      	strb	r2, [r3, #0]
							break;
 80032e6:	f001 f845 	bl	8004374 <DALI_ProcessRxData+0x2450>
						case QUERY_APPLICATION_CONTROLLER_ENABLED:
							if(applicationActive)
 80032ea:	4ba6      	ldr	r3, [pc, #664]	; (8003584 <DALI_ProcessRxData+0x1660>)
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <DALI_ProcessRxData+0x13d2>
 80032f2:	f001 f841 	bl	8004378 <DALI_ProcessRxData+0x2454>
							{
								DALITxData_t data = {0xFF, 1, 0, 1};
 80032f6:	21f8      	movs	r1, #248	; 0xf8
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	4aa3      	ldr	r2, [pc, #652]	; (8003588 <DALI_ProcessRxData+0x1664>)
 80032fc:	ca11      	ldmia	r2!, {r0, r4}
 80032fe:	c311      	stmia	r3!, {r0, r4}
								DALISendData(data);
 8003300:	187b      	adds	r3, r7, r1
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
 8003306:	f7fe fa13 	bl	8001730 <DALISendData>
							}
							break;
 800330a:	f001 f835 	bl	8004378 <DALI_ProcessRxData+0x2454>
						case QUERY_OPERATING_MODE:
						{
							DALITxData_t data = {operatingMode, 1, 0, 1};
 800330e:	4b9f      	ldr	r3, [pc, #636]	; (800358c <DALI_ProcessRxData+0x1668>)
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	001a      	movs	r2, r3
 8003314:	21f0      	movs	r1, #240	; 0xf0
 8003316:	187b      	adds	r3, r7, r1
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	187b      	adds	r3, r7, r1
 800331c:	2201      	movs	r2, #1
 800331e:	711a      	strb	r2, [r3, #4]
 8003320:	187b      	adds	r3, r7, r1
 8003322:	2200      	movs	r2, #0
 8003324:	715a      	strb	r2, [r3, #5]
 8003326:	187b      	adds	r3, r7, r1
 8003328:	2201      	movs	r2, #1
 800332a:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 800332c:	187b      	adds	r3, r7, r1
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	6859      	ldr	r1, [r3, #4]
 8003332:	f7fe f9fd 	bl	8001730 <DALISendData>
						}
							break;
 8003336:	f001 f832 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_MANUFACTURER_SPECIFIC_MODE:
							if(operatingMode > 0x80)
 800333a:	4b94      	ldr	r3, [pc, #592]	; (800358c <DALI_ProcessRxData+0x1668>)
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	2b80      	cmp	r3, #128	; 0x80
 8003340:	d801      	bhi.n	8003346 <DALI_ProcessRxData+0x1422>
 8003342:	f001 f81b 	bl	800437c <DALI_ProcessRxData+0x2458>
							{
								DALITxData_t data = {0xFF, 1, 0, 1};
 8003346:	21e8      	movs	r1, #232	; 0xe8
 8003348:	187b      	adds	r3, r7, r1
 800334a:	4a8f      	ldr	r2, [pc, #572]	; (8003588 <DALI_ProcessRxData+0x1664>)
 800334c:	ca11      	ldmia	r2!, {r0, r4}
 800334e:	c311      	stmia	r3!, {r0, r4}
								DALISendData(data);
 8003350:	187b      	adds	r3, r7, r1
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	6859      	ldr	r1, [r3, #4]
 8003356:	f7fe f9eb 	bl	8001730 <DALISendData>
							}
							break;
 800335a:	f001 f80f 	bl	800437c <DALI_ProcessRxData+0x2458>
						case QUERY_QUIESCENT_MODE:
							if(quiescentMode)
 800335e:	4b8c      	ldr	r3, [pc, #560]	; (8003590 <DALI_ProcessRxData+0x166c>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <DALI_ProcessRxData+0x1446>
 8003366:	f001 f80b 	bl	8004380 <DALI_ProcessRxData+0x245c>
							{
								DALITxData_t data = {0xFF, 1, 0, 1};
 800336a:	21e0      	movs	r1, #224	; 0xe0
 800336c:	187b      	adds	r3, r7, r1
 800336e:	4a86      	ldr	r2, [pc, #536]	; (8003588 <DALI_ProcessRxData+0x1664>)
 8003370:	ca11      	ldmia	r2!, {r0, r4}
 8003372:	c311      	stmia	r3!, {r0, r4}
								DALISendData(data);
 8003374:	187b      	adds	r3, r7, r1
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	6859      	ldr	r1, [r3, #4]
 800337a:	f7fe f9d9 	bl	8001730 <DALISendData>
							}
							break;
 800337e:	f000 ffff 	bl	8004380 <DALI_ProcessRxData+0x245c>
						case QUERY_DEVICE_GROUPS_0_7:
						{
							DALITxData_t data = {deviceGroups & 0xFF, 1, 0, 1};
 8003382:	4b84      	ldr	r3, [pc, #528]	; (8003594 <DALI_ProcessRxData+0x1670>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	22ff      	movs	r2, #255	; 0xff
 8003388:	401a      	ands	r2, r3
 800338a:	21d8      	movs	r1, #216	; 0xd8
 800338c:	187b      	adds	r3, r7, r1
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	187b      	adds	r3, r7, r1
 8003392:	2201      	movs	r2, #1
 8003394:	711a      	strb	r2, [r3, #4]
 8003396:	187b      	adds	r3, r7, r1
 8003398:	2200      	movs	r2, #0
 800339a:	715a      	strb	r2, [r3, #5]
 800339c:	187b      	adds	r3, r7, r1
 800339e:	2201      	movs	r2, #1
 80033a0:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 80033a2:	187b      	adds	r3, r7, r1
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	6859      	ldr	r1, [r3, #4]
 80033a8:	f7fe f9c2 	bl	8001730 <DALISendData>
						}
							break;
 80033ac:	f000 fff7 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_DEVICE_GROUPS_8_15:
						{
							DALITxData_t data = {(deviceGroups >> 8) & 0xFF, 1, 0, 1};
 80033b0:	4b78      	ldr	r3, [pc, #480]	; (8003594 <DALI_ProcessRxData+0x1670>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	0a1b      	lsrs	r3, r3, #8
 80033b6:	22ff      	movs	r2, #255	; 0xff
 80033b8:	401a      	ands	r2, r3
 80033ba:	21d0      	movs	r1, #208	; 0xd0
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	187b      	adds	r3, r7, r1
 80033c2:	2201      	movs	r2, #1
 80033c4:	711a      	strb	r2, [r3, #4]
 80033c6:	187b      	adds	r3, r7, r1
 80033c8:	2200      	movs	r2, #0
 80033ca:	715a      	strb	r2, [r3, #5]
 80033cc:	187b      	adds	r3, r7, r1
 80033ce:	2201      	movs	r2, #1
 80033d0:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 80033d2:	187b      	adds	r3, r7, r1
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	f7fe f9aa 	bl	8001730 <DALISendData>
						}
							break;
 80033dc:	f000 ffdf 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_DEVICE_GROUPS_16_23:
						{
							DALITxData_t data = {(deviceGroups >> 16) & 0xFF, 1, 0, 1};
 80033e0:	4b6c      	ldr	r3, [pc, #432]	; (8003594 <DALI_ProcessRxData+0x1670>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	22ff      	movs	r2, #255	; 0xff
 80033e8:	401a      	ands	r2, r3
 80033ea:	4b6b      	ldr	r3, [pc, #428]	; (8003598 <DALI_ProcessRxData+0x1674>)
 80033ec:	21e4      	movs	r1, #228	; 0xe4
 80033ee:	0049      	lsls	r1, r1, #1
 80033f0:	468c      	mov	ip, r1
 80033f2:	44bc      	add	ip, r7
 80033f4:	4463      	add	r3, ip
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	4b67      	ldr	r3, [pc, #412]	; (8003598 <DALI_ProcessRxData+0x1674>)
 80033fa:	22e4      	movs	r2, #228	; 0xe4
 80033fc:	0052      	lsls	r2, r2, #1
 80033fe:	4694      	mov	ip, r2
 8003400:	44bc      	add	ip, r7
 8003402:	4463      	add	r3, ip
 8003404:	2201      	movs	r2, #1
 8003406:	711a      	strb	r2, [r3, #4]
 8003408:	4b63      	ldr	r3, [pc, #396]	; (8003598 <DALI_ProcessRxData+0x1674>)
 800340a:	22e4      	movs	r2, #228	; 0xe4
 800340c:	0052      	lsls	r2, r2, #1
 800340e:	4694      	mov	ip, r2
 8003410:	44bc      	add	ip, r7
 8003412:	4463      	add	r3, ip
 8003414:	2200      	movs	r2, #0
 8003416:	715a      	strb	r2, [r3, #5]
 8003418:	4b5f      	ldr	r3, [pc, #380]	; (8003598 <DALI_ProcessRxData+0x1674>)
 800341a:	22e4      	movs	r2, #228	; 0xe4
 800341c:	0052      	lsls	r2, r2, #1
 800341e:	4694      	mov	ip, r2
 8003420:	44bc      	add	ip, r7
 8003422:	4463      	add	r3, ip
 8003424:	2201      	movs	r2, #1
 8003426:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003428:	4b5b      	ldr	r3, [pc, #364]	; (8003598 <DALI_ProcessRxData+0x1674>)
 800342a:	22e4      	movs	r2, #228	; 0xe4
 800342c:	0052      	lsls	r2, r2, #1
 800342e:	4694      	mov	ip, r2
 8003430:	44bc      	add	ip, r7
 8003432:	4463      	add	r3, ip
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	f7fe f97a 	bl	8001730 <DALISendData>
						}
							break;
 800343c:	f000 ffaf 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_DEVICE_GROUPS_24_31:
						{
							DALITxData_t data = {(deviceGroups >> 24) & 0xFF, 1, 0, 1};
 8003440:	4b54      	ldr	r3, [pc, #336]	; (8003594 <DALI_ProcessRxData+0x1670>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	0e1a      	lsrs	r2, r3, #24
 8003446:	4b55      	ldr	r3, [pc, #340]	; (800359c <DALI_ProcessRxData+0x1678>)
 8003448:	21e4      	movs	r1, #228	; 0xe4
 800344a:	0049      	lsls	r1, r1, #1
 800344c:	468c      	mov	ip, r1
 800344e:	44bc      	add	ip, r7
 8003450:	4463      	add	r3, ip
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	4b51      	ldr	r3, [pc, #324]	; (800359c <DALI_ProcessRxData+0x1678>)
 8003456:	22e4      	movs	r2, #228	; 0xe4
 8003458:	0052      	lsls	r2, r2, #1
 800345a:	4694      	mov	ip, r2
 800345c:	44bc      	add	ip, r7
 800345e:	4463      	add	r3, ip
 8003460:	2201      	movs	r2, #1
 8003462:	711a      	strb	r2, [r3, #4]
 8003464:	4b4d      	ldr	r3, [pc, #308]	; (800359c <DALI_ProcessRxData+0x1678>)
 8003466:	22e4      	movs	r2, #228	; 0xe4
 8003468:	0052      	lsls	r2, r2, #1
 800346a:	4694      	mov	ip, r2
 800346c:	44bc      	add	ip, r7
 800346e:	4463      	add	r3, ip
 8003470:	2200      	movs	r2, #0
 8003472:	715a      	strb	r2, [r3, #5]
 8003474:	4b49      	ldr	r3, [pc, #292]	; (800359c <DALI_ProcessRxData+0x1678>)
 8003476:	22e4      	movs	r2, #228	; 0xe4
 8003478:	0052      	lsls	r2, r2, #1
 800347a:	4694      	mov	ip, r2
 800347c:	44bc      	add	ip, r7
 800347e:	4463      	add	r3, ip
 8003480:	2201      	movs	r2, #1
 8003482:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003484:	4b45      	ldr	r3, [pc, #276]	; (800359c <DALI_ProcessRxData+0x1678>)
 8003486:	22e4      	movs	r2, #228	; 0xe4
 8003488:	0052      	lsls	r2, r2, #1
 800348a:	4694      	mov	ip, r2
 800348c:	44bc      	add	ip, r7
 800348e:	4463      	add	r3, ip
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	6859      	ldr	r1, [r3, #4]
 8003494:	f7fe f94c 	bl	8001730 <DALISendData>
						}
							break;
 8003498:	f000 ff81 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_POWER_CYCLE_NOTIFICATION:
							if(powerCycleNotification)
 800349c:	4b40      	ldr	r3, [pc, #256]	; (80035a0 <DALI_ProcessRxData+0x167c>)
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <DALI_ProcessRxData+0x1584>
 80034a4:	f000 ff6e 	bl	8004384 <DALI_ProcessRxData+0x2460>
							{
								DALITxData_t data = {0xFF, 1, 0, 1};
 80034a8:	4b3e      	ldr	r3, [pc, #248]	; (80035a4 <DALI_ProcessRxData+0x1680>)
 80034aa:	22e4      	movs	r2, #228	; 0xe4
 80034ac:	0052      	lsls	r2, r2, #1
 80034ae:	4694      	mov	ip, r2
 80034b0:	44bc      	add	ip, r7
 80034b2:	4463      	add	r3, ip
 80034b4:	4a34      	ldr	r2, [pc, #208]	; (8003588 <DALI_ProcessRxData+0x1664>)
 80034b6:	ca03      	ldmia	r2!, {r0, r1}
 80034b8:	c303      	stmia	r3!, {r0, r1}
								DALISendData(data);
 80034ba:	4b3a      	ldr	r3, [pc, #232]	; (80035a4 <DALI_ProcessRxData+0x1680>)
 80034bc:	22e4      	movs	r2, #228	; 0xe4
 80034be:	0052      	lsls	r2, r2, #1
 80034c0:	4694      	mov	ip, r2
 80034c2:	44bc      	add	ip, r7
 80034c4:	4463      	add	r3, ip
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	6859      	ldr	r1, [r3, #4]
 80034ca:	f7fe f931 	bl	8001730 <DALISendData>
							}
							break;
 80034ce:	f000 ff59 	bl	8004384 <DALI_ProcessRxData+0x2460>
						case QUERY_EXTENDED_VERSION_NUMBER:
							if(DTR0 == 4)
 80034d2:	4b2b      	ldr	r3, [pc, #172]	; (8003580 <DALI_ProcessRxData+0x165c>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d001      	beq.n	80034de <DALI_ProcessRxData+0x15ba>
 80034da:	f000 ff55 	bl	8004388 <DALI_ProcessRxData+0x2464>
							{
								DALITxData_t data = {extendedVersionNumber, 1, 0, 1};
 80034de:	4b32      	ldr	r3, [pc, #200]	; (80035a8 <DALI_ProcessRxData+0x1684>)
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	001a      	movs	r2, r3
 80034e4:	4b31      	ldr	r3, [pc, #196]	; (80035ac <DALI_ProcessRxData+0x1688>)
 80034e6:	21e4      	movs	r1, #228	; 0xe4
 80034e8:	0049      	lsls	r1, r1, #1
 80034ea:	468c      	mov	ip, r1
 80034ec:	44bc      	add	ip, r7
 80034ee:	4463      	add	r3, ip
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <DALI_ProcessRxData+0x1688>)
 80034f4:	22e4      	movs	r2, #228	; 0xe4
 80034f6:	0052      	lsls	r2, r2, #1
 80034f8:	4694      	mov	ip, r2
 80034fa:	44bc      	add	ip, r7
 80034fc:	4463      	add	r3, ip
 80034fe:	2201      	movs	r2, #1
 8003500:	711a      	strb	r2, [r3, #4]
 8003502:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <DALI_ProcessRxData+0x1688>)
 8003504:	22e4      	movs	r2, #228	; 0xe4
 8003506:	0052      	lsls	r2, r2, #1
 8003508:	4694      	mov	ip, r2
 800350a:	44bc      	add	ip, r7
 800350c:	4463      	add	r3, ip
 800350e:	2200      	movs	r2, #0
 8003510:	715a      	strb	r2, [r3, #5]
 8003512:	4b26      	ldr	r3, [pc, #152]	; (80035ac <DALI_ProcessRxData+0x1688>)
 8003514:	22e4      	movs	r2, #228	; 0xe4
 8003516:	0052      	lsls	r2, r2, #1
 8003518:	4694      	mov	ip, r2
 800351a:	44bc      	add	ip, r7
 800351c:	4463      	add	r3, ip
 800351e:	2201      	movs	r2, #1
 8003520:	719a      	strb	r2, [r3, #6]
								DALISendData(data);
 8003522:	4b22      	ldr	r3, [pc, #136]	; (80035ac <DALI_ProcessRxData+0x1688>)
 8003524:	22e4      	movs	r2, #228	; 0xe4
 8003526:	0052      	lsls	r2, r2, #1
 8003528:	4694      	mov	ip, r2
 800352a:	44bc      	add	ip, r7
 800352c:	4463      	add	r3, ip
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	f7fe f8fd 	bl	8001730 <DALISendData>
							}
							break;
 8003536:	f000 ff27 	bl	8004388 <DALI_ProcessRxData+0x2464>
						case QUERY_RESET_STATE:
							DALI_Check_ResetState();
 800353a:	f001 fb15 	bl	8004b68 <DALI_Check_ResetState>
							if(resetState)
 800353e:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <DALI_ProcessRxData+0x168c>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <DALI_ProcessRxData+0x1626>
 8003546:	f000 ff21 	bl	800438c <DALI_ProcessRxData+0x2468>
							{
								DALITxData_t data = {0xFF, 1, 0, 1};
 800354a:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <DALI_ProcessRxData+0x1690>)
 800354c:	22e4      	movs	r2, #228	; 0xe4
 800354e:	0052      	lsls	r2, r2, #1
 8003550:	4694      	mov	ip, r2
 8003552:	44bc      	add	ip, r7
 8003554:	4463      	add	r3, ip
 8003556:	4a0c      	ldr	r2, [pc, #48]	; (8003588 <DALI_ProcessRxData+0x1664>)
 8003558:	ca03      	ldmia	r2!, {r0, r1}
 800355a:	c303      	stmia	r3!, {r0, r1}
								DALISendData(data);
 800355c:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <DALI_ProcessRxData+0x1690>)
 800355e:	22e4      	movs	r2, #228	; 0xe4
 8003560:	0052      	lsls	r2, r2, #1
 8003562:	4694      	mov	ip, r2
 8003564:	44bc      	add	ip, r7
 8003566:	4463      	add	r3, ip
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	f7fe f8e0 	bl	8001730 <DALISendData>
							}
							break;
 8003570:	f000 ff0c 	bl	800438c <DALI_ProcessRxData+0x2468>
 8003574:	200008b2 	.word	0x200008b2
 8003578:	200008ac 	.word	0x200008ac
 800357c:	200000b5 	.word	0x200000b5
 8003580:	200000b4 	.word	0x200000b4
 8003584:	2000089a 	.word	0x2000089a
 8003588:	08008844 	.word	0x08008844
 800358c:	200008a0 	.word	0x200008a0
 8003590:	200000b7 	.word	0x200000b7
 8003594:	2000087c 	.word	0x2000087c
 8003598:	ffffff00 	.word	0xffffff00
 800359c:	fffffef8 	.word	0xfffffef8
 80035a0:	200008ba 	.word	0x200008ba
 80035a4:	fffffef0 	.word	0xfffffef0
 80035a8:	20000882 	.word	0x20000882
 80035ac:	fffffee8 	.word	0xfffffee8
 80035b0:	2000000d 	.word	0x2000000d
 80035b4:	fffffee0 	.word	0xfffffee0
						case QUERY_APPLICATION_CONTROLLER_ALWAYS_ACTIVE:
							if(applicationControllerAlwaysActive)
 80035b8:	4bd4      	ldr	r3, [pc, #848]	; (800390c <DALI_ProcessRxData+0x19e8>)
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <DALI_ProcessRxData+0x16a0>
 80035c0:	f000 fee6 	bl	8004390 <DALI_ProcessRxData+0x246c>
							{
								DALITxData_t data = {0xFF, 1, 0, 1};
 80035c4:	4bd2      	ldr	r3, [pc, #840]	; (8003910 <DALI_ProcessRxData+0x19ec>)
 80035c6:	22e4      	movs	r2, #228	; 0xe4
 80035c8:	0052      	lsls	r2, r2, #1
 80035ca:	4694      	mov	ip, r2
 80035cc:	44bc      	add	ip, r7
 80035ce:	4463      	add	r3, ip
 80035d0:	4ad0      	ldr	r2, [pc, #832]	; (8003914 <DALI_ProcessRxData+0x19f0>)
 80035d2:	ca03      	ldmia	r2!, {r0, r1}
 80035d4:	c303      	stmia	r3!, {r0, r1}
								DALISendData(data);
 80035d6:	4bce      	ldr	r3, [pc, #824]	; (8003910 <DALI_ProcessRxData+0x19ec>)
 80035d8:	22e4      	movs	r2, #228	; 0xe4
 80035da:	0052      	lsls	r2, r2, #1
 80035dc:	4694      	mov	ip, r2
 80035de:	44bc      	add	ip, r7
 80035e0:	4463      	add	r3, ip
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	f7fe f8a3 	bl	8001730 <DALISendData>
							}
							break;
 80035ea:	f000 fed1 	bl	8004390 <DALI_ProcessRxData+0x246c>
						case SET_EVENT_PRIORITY:
							if(frame != previousFrame)
 80035ee:	23d4      	movs	r3, #212	; 0xd4
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	4bc8      	ldr	r3, [pc, #800]	; (8003918 <DALI_ProcessRxData+0x19f4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d003      	beq.n	8003606 <DALI_ProcessRxData+0x16e2>
							{
								DALIReceiveTwice();
 80035fe:	f7fe fac1 	bl	8001b84 <DALIReceiveTwice>
											resetState = FALSE;
									}
								}
								isSecondFrame = 1;
							}
							break;
 8003602:	f000 fecc 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8003606:	23dc      	movs	r3, #220	; 0xdc
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	795b      	ldrb	r3, [r3, #5]
 8003610:	2210      	movs	r2, #16
 8003612:	4013      	ands	r3, r2
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d015      	beq.n	8003646 <DALI_ProcessRxData+0x1722>
									if((DTR0 > 1) && (DTR0 < 6))
 800361a:	4bc0      	ldr	r3, [pc, #768]	; (800391c <DALI_ProcessRxData+0x19f8>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d911      	bls.n	8003646 <DALI_ProcessRxData+0x1722>
 8003622:	4bbe      	ldr	r3, [pc, #760]	; (800391c <DALI_ProcessRxData+0x19f8>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b05      	cmp	r3, #5
 8003628:	d80d      	bhi.n	8003646 <DALI_ProcessRxData+0x1722>
										eventPriority = DTR0;
 800362a:	4bbc      	ldr	r3, [pc, #752]	; (800391c <DALI_ProcessRxData+0x19f8>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	b29a      	uxth	r2, r3
 8003630:	4bbb      	ldr	r3, [pc, #748]	; (8003920 <DALI_ProcessRxData+0x19fc>)
 8003632:	801a      	strh	r2, [r3, #0]
										DALI_Save_Variable();
 8003634:	f001 f95e 	bl	80048f4 <DALI_Save_Variable>
										if(eventPriority != 4)
 8003638:	4bb9      	ldr	r3, [pc, #740]	; (8003920 <DALI_ProcessRxData+0x19fc>)
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	2b04      	cmp	r3, #4
 800363e:	d002      	beq.n	8003646 <DALI_ProcessRxData+0x1722>
											resetState = FALSE;
 8003640:	4bb8      	ldr	r3, [pc, #736]	; (8003924 <DALI_ProcessRxData+0x1a00>)
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 8003646:	4bb8      	ldr	r3, [pc, #736]	; (8003928 <DALI_ProcessRxData+0x1a04>)
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
							break;
 800364c:	f000 fea7 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_EVENT_PRIORITY:
						{
							DALITxData_t data = {eventPriority, 1, 0, 1};
 8003650:	4bb3      	ldr	r3, [pc, #716]	; (8003920 <DALI_ProcessRxData+0x19fc>)
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	001a      	movs	r2, r3
 8003656:	4bb5      	ldr	r3, [pc, #724]	; (800392c <DALI_ProcessRxData+0x1a08>)
 8003658:	21e4      	movs	r1, #228	; 0xe4
 800365a:	0049      	lsls	r1, r1, #1
 800365c:	468c      	mov	ip, r1
 800365e:	44bc      	add	ip, r7
 8003660:	4463      	add	r3, ip
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	4bb1      	ldr	r3, [pc, #708]	; (800392c <DALI_ProcessRxData+0x1a08>)
 8003666:	22e4      	movs	r2, #228	; 0xe4
 8003668:	0052      	lsls	r2, r2, #1
 800366a:	4694      	mov	ip, r2
 800366c:	44bc      	add	ip, r7
 800366e:	4463      	add	r3, ip
 8003670:	2201      	movs	r2, #1
 8003672:	711a      	strb	r2, [r3, #4]
 8003674:	4bad      	ldr	r3, [pc, #692]	; (800392c <DALI_ProcessRxData+0x1a08>)
 8003676:	22e4      	movs	r2, #228	; 0xe4
 8003678:	0052      	lsls	r2, r2, #1
 800367a:	4694      	mov	ip, r2
 800367c:	44bc      	add	ip, r7
 800367e:	4463      	add	r3, ip
 8003680:	2200      	movs	r2, #0
 8003682:	715a      	strb	r2, [r3, #5]
 8003684:	4ba9      	ldr	r3, [pc, #676]	; (800392c <DALI_ProcessRxData+0x1a08>)
 8003686:	22e4      	movs	r2, #228	; 0xe4
 8003688:	0052      	lsls	r2, r2, #1
 800368a:	4694      	mov	ip, r2
 800368c:	44bc      	add	ip, r7
 800368e:	4463      	add	r3, ip
 8003690:	2201      	movs	r2, #1
 8003692:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003694:	4ba5      	ldr	r3, [pc, #660]	; (800392c <DALI_ProcessRxData+0x1a08>)
 8003696:	22e4      	movs	r2, #228	; 0xe4
 8003698:	0052      	lsls	r2, r2, #1
 800369a:	4694      	mov	ip, r2
 800369c:	44bc      	add	ip, r7
 800369e:	4463      	add	r3, ip
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	f7fe f844 	bl	8001730 <DALISendData>
						}
							break;
 80036a8:	f000 fe79 	bl	800439e <DALI_ProcessRxData+0x247a>
						default:
							// Discard message
							break;
						}
					}
					else if((cmd->instance_byte == 0xFF) || (cmd->instance_byte == instanceNumber) || (cmd->instance_byte == 0xC0 + instanceType) 	\
 80036ac:	23da      	movs	r3, #218	; 0xda
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	785b      	ldrb	r3, [r3, #1]
 80036b6:	2bff      	cmp	r3, #255	; 0xff
 80036b8:	d045      	beq.n	8003746 <DALI_ProcessRxData+0x1822>
 80036ba:	23da      	movs	r3, #218	; 0xda
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	785b      	ldrb	r3, [r3, #1]
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	4b9a      	ldr	r3, [pc, #616]	; (8003930 <DALI_ProcessRxData+0x1a0c>)
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d03b      	beq.n	8003746 <DALI_ProcessRxData+0x1822>
 80036ce:	23da      	movs	r3, #218	; 0xda
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	785b      	ldrb	r3, [r3, #1]
 80036d8:	001a      	movs	r2, r3
 80036da:	4b96      	ldr	r3, [pc, #600]	; (8003934 <DALI_ProcessRxData+0x1a10>)
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	33c0      	adds	r3, #192	; 0xc0
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d030      	beq.n	8003746 <DALI_ProcessRxData+0x1822>
							|| ((instanceGroup0 < 0xFF) && (cmd->instance_byte == instanceGroup0 + 0x80))			\
 80036e4:	4b94      	ldr	r3, [pc, #592]	; (8003938 <DALI_ProcessRxData+0x1a14>)
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	2bfe      	cmp	r3, #254	; 0xfe
 80036ea:	d80a      	bhi.n	8003702 <DALI_ProcessRxData+0x17de>
 80036ec:	23da      	movs	r3, #218	; 0xda
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	785b      	ldrb	r3, [r3, #1]
 80036f6:	001a      	movs	r2, r3
 80036f8:	4b8f      	ldr	r3, [pc, #572]	; (8003938 <DALI_ProcessRxData+0x1a14>)
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	3380      	adds	r3, #128	; 0x80
 80036fe:	429a      	cmp	r2, r3
 8003700:	d021      	beq.n	8003746 <DALI_ProcessRxData+0x1822>
							|| ((instanceGroup1 < 0xFF) && (cmd->instance_byte == instanceGroup2 + 0x80))			\
 8003702:	4b8e      	ldr	r3, [pc, #568]	; (800393c <DALI_ProcessRxData+0x1a18>)
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	2bfe      	cmp	r3, #254	; 0xfe
 8003708:	d80a      	bhi.n	8003720 <DALI_ProcessRxData+0x17fc>
 800370a:	23da      	movs	r3, #218	; 0xda
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	785b      	ldrb	r3, [r3, #1]
 8003714:	001a      	movs	r2, r3
 8003716:	4b8a      	ldr	r3, [pc, #552]	; (8003940 <DALI_ProcessRxData+0x1a1c>)
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	3380      	adds	r3, #128	; 0x80
 800371c:	429a      	cmp	r2, r3
 800371e:	d012      	beq.n	8003746 <DALI_ProcessRxData+0x1822>
							|| ((instanceGroup2 < 0xFF) && (cmd->instance_byte == instanceGroup1 + 0x80)))			\
 8003720:	4b87      	ldr	r3, [pc, #540]	; (8003940 <DALI_ProcessRxData+0x1a1c>)
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	2bfe      	cmp	r3, #254	; 0xfe
 8003726:	d901      	bls.n	800372c <DALI_ProcessRxData+0x1808>
 8003728:	f000 fe39 	bl	800439e <DALI_ProcessRxData+0x247a>
 800372c:	23da      	movs	r3, #218	; 0xda
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	785b      	ldrb	r3, [r3, #1]
 8003736:	001a      	movs	r2, r3
 8003738:	4b80      	ldr	r3, [pc, #512]	; (800393c <DALI_ProcessRxData+0x1a18>)
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	3380      	adds	r3, #128	; 0x80
 800373e:	429a      	cmp	r2, r3
 8003740:	d001      	beq.n	8003746 <DALI_ProcessRxData+0x1822>
 8003742:	f000 fe2c 	bl	800439e <DALI_ProcessRxData+0x247a>
					// Instance command
					{
						switch(cmd->opcode_byte)
 8003746:	23da      	movs	r3, #218	; 0xda
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	3b30      	subs	r3, #48	; 0x30
 8003752:	2b62      	cmp	r3, #98	; 0x62
 8003754:	d901      	bls.n	800375a <DALI_ProcessRxData+0x1836>
 8003756:	f000 fe22 	bl	800439e <DALI_ProcessRxData+0x247a>
 800375a:	009a      	lsls	r2, r3, #2
 800375c:	4b79      	ldr	r3, [pc, #484]	; (8003944 <DALI_ProcessRxData+0x1a20>)
 800375e:	18d3      	adds	r3, r2, r3
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	469f      	mov	pc, r3
						{
						case ENABLE_INSTANCE:
							if(frame != previousFrame)
 8003764:	23d4      	movs	r3, #212	; 0xd4
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4b6a      	ldr	r3, [pc, #424]	; (8003918 <DALI_ProcessRxData+0x19f4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d003      	beq.n	800377c <DALI_ProcessRxData+0x1858>
							{
								DALIReceiveTwice();
 8003774:	f7fe fa06 	bl	8001b84 <DALIReceiveTwice>
									instanceActive = TRUE;
									DALI_Save_Variable();
								}
								isSecondFrame = 1;
							}
							break;
 8003778:	f000 fe11 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 800377c:	23dc      	movs	r3, #220	; 0xdc
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	795b      	ldrb	r3, [r3, #5]
 8003786:	2210      	movs	r2, #16
 8003788:	4013      	ands	r3, r2
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d004      	beq.n	800379a <DALI_ProcessRxData+0x1876>
									instanceActive = TRUE;
 8003790:	4b6d      	ldr	r3, [pc, #436]	; (8003948 <DALI_ProcessRxData+0x1a24>)
 8003792:	2201      	movs	r2, #1
 8003794:	801a      	strh	r2, [r3, #0]
									DALI_Save_Variable();
 8003796:	f001 f8ad 	bl	80048f4 <DALI_Save_Variable>
								isSecondFrame = 1;
 800379a:	4b63      	ldr	r3, [pc, #396]	; (8003928 <DALI_ProcessRxData+0x1a04>)
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
							break;
 80037a0:	f000 fdfd 	bl	800439e <DALI_ProcessRxData+0x247a>
						case DISABLE_INSTANCE:
							if(frame != previousFrame)
 80037a4:	23d4      	movs	r3, #212	; 0xd4
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b5a      	ldr	r3, [pc, #360]	; (8003918 <DALI_ProcessRxData+0x19f4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d003      	beq.n	80037bc <DALI_ProcessRxData+0x1898>
							{
								DALIReceiveTwice();
 80037b4:	f7fe f9e6 	bl	8001b84 <DALIReceiveTwice>
									instanceActive = FALSE;
									DALI_Save_Variable();
								}
								isSecondFrame = 1;
							}
							break;
 80037b8:	f000 fdf1 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 80037bc:	23dc      	movs	r3, #220	; 0xdc
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	795b      	ldrb	r3, [r3, #5]
 80037c6:	2210      	movs	r2, #16
 80037c8:	4013      	ands	r3, r2
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d004      	beq.n	80037da <DALI_ProcessRxData+0x18b6>
									instanceActive = FALSE;
 80037d0:	4b5d      	ldr	r3, [pc, #372]	; (8003948 <DALI_ProcessRxData+0x1a24>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	801a      	strh	r2, [r3, #0]
									DALI_Save_Variable();
 80037d6:	f001 f88d 	bl	80048f4 <DALI_Save_Variable>
								isSecondFrame = 1;
 80037da:	4b53      	ldr	r3, [pc, #332]	; (8003928 <DALI_ProcessRxData+0x1a04>)
 80037dc:	2201      	movs	r2, #1
 80037de:	701a      	strb	r2, [r3, #0]
							break;
 80037e0:	f000 fddd 	bl	800439e <DALI_ProcessRxData+0x247a>
						case SET_PRIMARY_INSTANCE_GROUP:
							if(frame != previousFrame)
 80037e4:	23d4      	movs	r3, #212	; 0xd4
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b4a      	ldr	r3, [pc, #296]	; (8003918 <DALI_ProcessRxData+0x19f4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d003      	beq.n	80037fc <DALI_ProcessRxData+0x18d8>
							{
								DALIReceiveTwice();
 80037f4:	f7fe f9c6 	bl	8001b84 <DALIReceiveTwice>
									}

								}
								isSecondFrame = 1;
							}
							break;
 80037f8:	f000 fdd1 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 80037fc:	23dc      	movs	r3, #220	; 0xdc
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	795b      	ldrb	r3, [r3, #5]
 8003806:	2210      	movs	r2, #16
 8003808:	4013      	ands	r3, r2
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d015      	beq.n	800383c <DALI_ProcessRxData+0x1918>
									if((DTR0 < 32) || (DTR0 == 0xFF))
 8003810:	4b42      	ldr	r3, [pc, #264]	; (800391c <DALI_ProcessRxData+0x19f8>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b1f      	cmp	r3, #31
 8003816:	d903      	bls.n	8003820 <DALI_ProcessRxData+0x18fc>
 8003818:	4b40      	ldr	r3, [pc, #256]	; (800391c <DALI_ProcessRxData+0x19f8>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2bff      	cmp	r3, #255	; 0xff
 800381e:	d10d      	bne.n	800383c <DALI_ProcessRxData+0x1918>
										instanceGroup0 = DTR0;
 8003820:	4b3e      	ldr	r3, [pc, #248]	; (800391c <DALI_ProcessRxData+0x19f8>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	b29a      	uxth	r2, r3
 8003826:	4b44      	ldr	r3, [pc, #272]	; (8003938 <DALI_ProcessRxData+0x1a14>)
 8003828:	801a      	strh	r2, [r3, #0]
										DALI_Save_Variable();
 800382a:	f001 f863 	bl	80048f4 <DALI_Save_Variable>
										if(instanceGroup0 != 0xFF)
 800382e:	4b42      	ldr	r3, [pc, #264]	; (8003938 <DALI_ProcessRxData+0x1a14>)
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	2bff      	cmp	r3, #255	; 0xff
 8003834:	d002      	beq.n	800383c <DALI_ProcessRxData+0x1918>
											resetState = FALSE;
 8003836:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <DALI_ProcessRxData+0x1a00>)
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 800383c:	4b3a      	ldr	r3, [pc, #232]	; (8003928 <DALI_ProcessRxData+0x1a04>)
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
							break;
 8003842:	f000 fdac 	bl	800439e <DALI_ProcessRxData+0x247a>
						case SET_INSTANCE_GROUP_1:
							if(frame != previousFrame)
 8003846:	23d4      	movs	r3, #212	; 0xd4
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4b32      	ldr	r3, [pc, #200]	; (8003918 <DALI_ProcessRxData+0x19f4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d003      	beq.n	800385e <DALI_ProcessRxData+0x193a>
							{
								DALIReceiveTwice();
 8003856:	f7fe f995 	bl	8001b84 <DALIReceiveTwice>
											resetState = FALSE;
									}
								}
								isSecondFrame = 1;
							}
							break;
 800385a:	f000 fda0 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 800385e:	23dc      	movs	r3, #220	; 0xdc
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	795b      	ldrb	r3, [r3, #5]
 8003868:	2210      	movs	r2, #16
 800386a:	4013      	ands	r3, r2
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d015      	beq.n	800389e <DALI_ProcessRxData+0x197a>
									if((DTR0 < 32) || (DTR0 == 0xFF))
 8003872:	4b2a      	ldr	r3, [pc, #168]	; (800391c <DALI_ProcessRxData+0x19f8>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b1f      	cmp	r3, #31
 8003878:	d903      	bls.n	8003882 <DALI_ProcessRxData+0x195e>
 800387a:	4b28      	ldr	r3, [pc, #160]	; (800391c <DALI_ProcessRxData+0x19f8>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2bff      	cmp	r3, #255	; 0xff
 8003880:	d10d      	bne.n	800389e <DALI_ProcessRxData+0x197a>
										instanceGroup1 = DTR0;
 8003882:	4b26      	ldr	r3, [pc, #152]	; (800391c <DALI_ProcessRxData+0x19f8>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	b29a      	uxth	r2, r3
 8003888:	4b2c      	ldr	r3, [pc, #176]	; (800393c <DALI_ProcessRxData+0x1a18>)
 800388a:	801a      	strh	r2, [r3, #0]
										DALI_Save_Variable();
 800388c:	f001 f832 	bl	80048f4 <DALI_Save_Variable>
										if(instanceGroup1 != 0xFF)
 8003890:	4b2a      	ldr	r3, [pc, #168]	; (800393c <DALI_ProcessRxData+0x1a18>)
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	2bff      	cmp	r3, #255	; 0xff
 8003896:	d002      	beq.n	800389e <DALI_ProcessRxData+0x197a>
											resetState = FALSE;
 8003898:	4b22      	ldr	r3, [pc, #136]	; (8003924 <DALI_ProcessRxData+0x1a00>)
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 800389e:	4b22      	ldr	r3, [pc, #136]	; (8003928 <DALI_ProcessRxData+0x1a04>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	701a      	strb	r2, [r3, #0]
							break;
 80038a4:	f000 fd7b 	bl	800439e <DALI_ProcessRxData+0x247a>
						case SET_INSTANCE_GROUP_2:
							if(frame != previousFrame)
 80038a8:	23d4      	movs	r3, #212	; 0xd4
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <DALI_ProcessRxData+0x19f4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d003      	beq.n	80038c0 <DALI_ProcessRxData+0x199c>
							{
								DALIReceiveTwice();
 80038b8:	f7fe f964 	bl	8001b84 <DALIReceiveTwice>
											resetState = FALSE;
									}
								}
								isSecondFrame = 1;
							}
							break;
 80038bc:	f000 fd6f 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 80038c0:	23dc      	movs	r3, #220	; 0xdc
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	795b      	ldrb	r3, [r3, #5]
 80038ca:	2210      	movs	r2, #16
 80038cc:	4013      	ands	r3, r2
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d015      	beq.n	8003900 <DALI_ProcessRxData+0x19dc>
									if((DTR0 < 32) || (DTR0 == 0xFF))
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <DALI_ProcessRxData+0x19f8>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b1f      	cmp	r3, #31
 80038da:	d903      	bls.n	80038e4 <DALI_ProcessRxData+0x19c0>
 80038dc:	4b0f      	ldr	r3, [pc, #60]	; (800391c <DALI_ProcessRxData+0x19f8>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2bff      	cmp	r3, #255	; 0xff
 80038e2:	d10d      	bne.n	8003900 <DALI_ProcessRxData+0x19dc>
										instanceGroup2 = DTR0;
 80038e4:	4b0d      	ldr	r3, [pc, #52]	; (800391c <DALI_ProcessRxData+0x19f8>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	4b15      	ldr	r3, [pc, #84]	; (8003940 <DALI_ProcessRxData+0x1a1c>)
 80038ec:	801a      	strh	r2, [r3, #0]
										DALI_Save_Variable();
 80038ee:	f001 f801 	bl	80048f4 <DALI_Save_Variable>
										if(instanceGroup2 != 0xFF)
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <DALI_ProcessRxData+0x1a1c>)
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	2bff      	cmp	r3, #255	; 0xff
 80038f8:	d002      	beq.n	8003900 <DALI_ProcessRxData+0x19dc>
											resetState = FALSE;
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <DALI_ProcessRxData+0x1a00>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <DALI_ProcessRxData+0x1a04>)
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
							break;
 8003906:	f000 fd4a 	bl	800439e <DALI_ProcessRxData+0x247a>
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	200008a4 	.word	0x200008a4
 8003910:	fffffed8 	.word	0xfffffed8
 8003914:	08008844 	.word	0x08008844
 8003918:	20000888 	.word	0x20000888
 800391c:	200000b4 	.word	0x200000b4
 8003920:	200008bc 	.word	0x200008bc
 8003924:	2000000d 	.word	0x2000000d
 8003928:	200000ce 	.word	0x200000ce
 800392c:	fffffed0 	.word	0xfffffed0
 8003930:	200008a8 	.word	0x200008a8
 8003934:	2000089c 	.word	0x2000089c
 8003938:	200008b4 	.word	0x200008b4
 800393c:	200008a2 	.word	0x200008a2
 8003940:	20000880 	.word	0x20000880
 8003944:	08008d00 	.word	0x08008d00
 8003948:	2000089e 	.word	0x2000089e
						case SET_EVENT_PRIORITY:
							if(frame != previousFrame)
 800394c:	23d4      	movs	r3, #212	; 0xd4
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4bd7      	ldr	r3, [pc, #860]	; (8003cb4 <DALI_ProcessRxData+0x1d90>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d003      	beq.n	8003964 <DALI_ProcessRxData+0x1a40>
							{
								DALIReceiveTwice();
 800395c:	f7fe f912 	bl	8001b84 <DALIReceiveTwice>
											resetState = FALSE;
									}
								}
								isSecondFrame = 1;
							}
							break;
 8003960:	f000 fd1d 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8003964:	23dc      	movs	r3, #220	; 0xdc
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	795b      	ldrb	r3, [r3, #5]
 800396e:	2210      	movs	r2, #16
 8003970:	4013      	ands	r3, r2
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d015      	beq.n	80039a4 <DALI_ProcessRxData+0x1a80>
									if((DTR0 > 1) && (DTR0 < 6))
 8003978:	4bcf      	ldr	r3, [pc, #828]	; (8003cb8 <DALI_ProcessRxData+0x1d94>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d911      	bls.n	80039a4 <DALI_ProcessRxData+0x1a80>
 8003980:	4bcd      	ldr	r3, [pc, #820]	; (8003cb8 <DALI_ProcessRxData+0x1d94>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b05      	cmp	r3, #5
 8003986:	d80d      	bhi.n	80039a4 <DALI_ProcessRxData+0x1a80>
										eventPriority = DTR0;
 8003988:	4bcb      	ldr	r3, [pc, #812]	; (8003cb8 <DALI_ProcessRxData+0x1d94>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	b29a      	uxth	r2, r3
 800398e:	4bcb      	ldr	r3, [pc, #812]	; (8003cbc <DALI_ProcessRxData+0x1d98>)
 8003990:	801a      	strh	r2, [r3, #0]
										DALI_Save_Variable();
 8003992:	f000 ffaf 	bl	80048f4 <DALI_Save_Variable>
										if(eventPriority != 4)
 8003996:	4bc9      	ldr	r3, [pc, #804]	; (8003cbc <DALI_ProcessRxData+0x1d98>)
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	2b04      	cmp	r3, #4
 800399c:	d002      	beq.n	80039a4 <DALI_ProcessRxData+0x1a80>
											resetState = FALSE;
 800399e:	4bc8      	ldr	r3, [pc, #800]	; (8003cc0 <DALI_ProcessRxData+0x1d9c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 80039a4:	4bc7      	ldr	r3, [pc, #796]	; (8003cc4 <DALI_ProcessRxData+0x1da0>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
							break;
 80039aa:	f000 fcf8 	bl	800439e <DALI_ProcessRxData+0x247a>
						case SET_EVENT_SCHEME:
							if(frame != previousFrame)
 80039ae:	23d4      	movs	r3, #212	; 0xd4
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4bbf      	ldr	r3, [pc, #764]	; (8003cb4 <DALI_ProcessRxData+0x1d90>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d003      	beq.n	80039c6 <DALI_ProcessRxData+0x1aa2>
							{
								DALIReceiveTwice();
 80039be:	f7fe f8e1 	bl	8001b84 <DALIReceiveTwice>
									}

								}
								isSecondFrame = 1;
							}
							break;
 80039c2:	f000 fcec 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 80039c6:	23dc      	movs	r3, #220	; 0xdc
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	18fb      	adds	r3, r7, r3
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	795b      	ldrb	r3, [r3, #5]
 80039d0:	2210      	movs	r2, #16
 80039d2:	4013      	ands	r3, r2
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d011      	beq.n	80039fe <DALI_ProcessRxData+0x1ada>
									if(DTR0 < 5)
 80039da:	4bb7      	ldr	r3, [pc, #732]	; (8003cb8 <DALI_ProcessRxData+0x1d94>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d80d      	bhi.n	80039fe <DALI_ProcessRxData+0x1ada>
										eventScheme = DTR0;
 80039e2:	4bb5      	ldr	r3, [pc, #724]	; (8003cb8 <DALI_ProcessRxData+0x1d94>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	4bb7      	ldr	r3, [pc, #732]	; (8003cc8 <DALI_ProcessRxData+0x1da4>)
 80039ea:	801a      	strh	r2, [r3, #0]
										DALI_Save_Variable();
 80039ec:	f000 ff82 	bl	80048f4 <DALI_Save_Variable>
										if(eventScheme != 0)
 80039f0:	4bb5      	ldr	r3, [pc, #724]	; (8003cc8 <DALI_ProcessRxData+0x1da4>)
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <DALI_ProcessRxData+0x1ada>
											resetState = FALSE;
 80039f8:	4bb1      	ldr	r3, [pc, #708]	; (8003cc0 <DALI_ProcessRxData+0x1d9c>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 80039fe:	4bb1      	ldr	r3, [pc, #708]	; (8003cc4 <DALI_ProcessRxData+0x1da0>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]
							break;
 8003a04:	f000 fccb 	bl	800439e <DALI_ProcessRxData+0x247a>
						case SET_EVENT_FILTER:
							if(frame != previousFrame)
 8003a08:	23d4      	movs	r3, #212	; 0xd4
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	4ba8      	ldr	r3, [pc, #672]	; (8003cb4 <DALI_ProcessRxData+0x1d90>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d003      	beq.n	8003a20 <DALI_ProcessRxData+0x1afc>
							{
								DALIReceiveTwice();
 8003a18:	f7fe f8b4 	bl	8001b84 <DALIReceiveTwice>
											resetState = FALSE;
									}
								}
								isSecondFrame = 1;
							}
							break;
 8003a1c:	f000 fcbf 	bl	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8003a20:	23dc      	movs	r3, #220	; 0xdc
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	795b      	ldrb	r3, [r3, #5]
 8003a2a:	2210      	movs	r2, #16
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d02d      	beq.n	8003a90 <DALI_ProcessRxData+0x1b6c>
									if(applicationActive)
 8003a34:	4ba5      	ldr	r3, [pc, #660]	; (8003ccc <DALI_ProcessRxData+0x1da8>)
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d017      	beq.n	8003a6c <DALI_ProcessRxData+0x1b48>
										eventFilter = (DTR2 << 16) | (DTR1 << 8) | DTR0;
 8003a3c:	4ba4      	ldr	r3, [pc, #656]	; (8003cd0 <DALI_ProcessRxData+0x1dac>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	b21a      	sxth	r2, r3
 8003a44:	4ba3      	ldr	r3, [pc, #652]	; (8003cd4 <DALI_ProcessRxData+0x1db0>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	b21b      	sxth	r3, r3
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	b21a      	sxth	r2, r3
 8003a50:	4b99      	ldr	r3, [pc, #612]	; (8003cb8 <DALI_ProcessRxData+0x1d94>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	b21b      	sxth	r3, r3
 8003a56:	4313      	orrs	r3, r2
 8003a58:	b21b      	sxth	r3, r3
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	4b9e      	ldr	r3, [pc, #632]	; (8003cd8 <DALI_ProcessRxData+0x1db4>)
 8003a5e:	801a      	strh	r2, [r3, #0]
										DALI_Save_Variable();
 8003a60:	f000 ff48 	bl	80048f4 <DALI_Save_Variable>
											resetState = FALSE;
 8003a64:	4b96      	ldr	r3, [pc, #600]	; (8003cc0 <DALI_ProcessRxData+0x1d9c>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]
 8003a6a:	e011      	b.n	8003a90 <DALI_ProcessRxData+0x1b6c>
										if(DTR0 < 2)
 8003a6c:	4b92      	ldr	r3, [pc, #584]	; (8003cb8 <DALI_ProcessRxData+0x1d94>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d806      	bhi.n	8003a82 <DALI_ProcessRxData+0x1b5e>
											eventFilter = DTR0;
 8003a74:	4b90      	ldr	r3, [pc, #576]	; (8003cb8 <DALI_ProcessRxData+0x1d94>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	4b97      	ldr	r3, [pc, #604]	; (8003cd8 <DALI_ProcessRxData+0x1db4>)
 8003a7c:	801a      	strh	r2, [r3, #0]
											DALI_Save_Variable();
 8003a7e:	f000 ff39 	bl	80048f4 <DALI_Save_Variable>
										if(eventFilter != 1)
 8003a82:	4b95      	ldr	r3, [pc, #596]	; (8003cd8 <DALI_ProcessRxData+0x1db4>)
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d002      	beq.n	8003a90 <DALI_ProcessRxData+0x1b6c>
											resetState = FALSE;
 8003a8a:	4b8d      	ldr	r3, [pc, #564]	; (8003cc0 <DALI_ProcessRxData+0x1d9c>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 8003a90:	4b8c      	ldr	r3, [pc, #560]	; (8003cc4 <DALI_ProcessRxData+0x1da0>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	701a      	strb	r2, [r3, #0]
							break;
 8003a96:	f000 fc82 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_INSTANCE_TYPE:
						{
							DALITxData_t data = {instanceType, 1, 0, 1};
 8003a9a:	4b90      	ldr	r3, [pc, #576]	; (8003cdc <DALI_ProcessRxData+0x1db8>)
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	001a      	movs	r2, r3
 8003aa0:	4b8f      	ldr	r3, [pc, #572]	; (8003ce0 <DALI_ProcessRxData+0x1dbc>)
 8003aa2:	21e4      	movs	r1, #228	; 0xe4
 8003aa4:	0049      	lsls	r1, r1, #1
 8003aa6:	468c      	mov	ip, r1
 8003aa8:	44bc      	add	ip, r7
 8003aaa:	4463      	add	r3, ip
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	4b8c      	ldr	r3, [pc, #560]	; (8003ce0 <DALI_ProcessRxData+0x1dbc>)
 8003ab0:	22e4      	movs	r2, #228	; 0xe4
 8003ab2:	0052      	lsls	r2, r2, #1
 8003ab4:	4694      	mov	ip, r2
 8003ab6:	44bc      	add	ip, r7
 8003ab8:	4463      	add	r3, ip
 8003aba:	2201      	movs	r2, #1
 8003abc:	711a      	strb	r2, [r3, #4]
 8003abe:	4b88      	ldr	r3, [pc, #544]	; (8003ce0 <DALI_ProcessRxData+0x1dbc>)
 8003ac0:	22e4      	movs	r2, #228	; 0xe4
 8003ac2:	0052      	lsls	r2, r2, #1
 8003ac4:	4694      	mov	ip, r2
 8003ac6:	44bc      	add	ip, r7
 8003ac8:	4463      	add	r3, ip
 8003aca:	2200      	movs	r2, #0
 8003acc:	715a      	strb	r2, [r3, #5]
 8003ace:	4b84      	ldr	r3, [pc, #528]	; (8003ce0 <DALI_ProcessRxData+0x1dbc>)
 8003ad0:	22e4      	movs	r2, #228	; 0xe4
 8003ad2:	0052      	lsls	r2, r2, #1
 8003ad4:	4694      	mov	ip, r2
 8003ad6:	44bc      	add	ip, r7
 8003ad8:	4463      	add	r3, ip
 8003ada:	2201      	movs	r2, #1
 8003adc:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003ade:	4b80      	ldr	r3, [pc, #512]	; (8003ce0 <DALI_ProcessRxData+0x1dbc>)
 8003ae0:	22e4      	movs	r2, #228	; 0xe4
 8003ae2:	0052      	lsls	r2, r2, #1
 8003ae4:	4694      	mov	ip, r2
 8003ae6:	44bc      	add	ip, r7
 8003ae8:	4463      	add	r3, ip
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	6859      	ldr	r1, [r3, #4]
 8003aee:	f7fd fe1f 	bl	8001730 <DALISendData>
						}
							break;
 8003af2:	f000 fc54 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_RESOLUTION:
						{
							DALITxData_t data = {resolution, 1, 0, 1};
 8003af6:	4b7b      	ldr	r3, [pc, #492]	; (8003ce4 <DALI_ProcessRxData+0x1dc0>)
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	001a      	movs	r2, r3
 8003afc:	4b7a      	ldr	r3, [pc, #488]	; (8003ce8 <DALI_ProcessRxData+0x1dc4>)
 8003afe:	21e4      	movs	r1, #228	; 0xe4
 8003b00:	0049      	lsls	r1, r1, #1
 8003b02:	468c      	mov	ip, r1
 8003b04:	44bc      	add	ip, r7
 8003b06:	4463      	add	r3, ip
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	4b77      	ldr	r3, [pc, #476]	; (8003ce8 <DALI_ProcessRxData+0x1dc4>)
 8003b0c:	22e4      	movs	r2, #228	; 0xe4
 8003b0e:	0052      	lsls	r2, r2, #1
 8003b10:	4694      	mov	ip, r2
 8003b12:	44bc      	add	ip, r7
 8003b14:	4463      	add	r3, ip
 8003b16:	2201      	movs	r2, #1
 8003b18:	711a      	strb	r2, [r3, #4]
 8003b1a:	4b73      	ldr	r3, [pc, #460]	; (8003ce8 <DALI_ProcessRxData+0x1dc4>)
 8003b1c:	22e4      	movs	r2, #228	; 0xe4
 8003b1e:	0052      	lsls	r2, r2, #1
 8003b20:	4694      	mov	ip, r2
 8003b22:	44bc      	add	ip, r7
 8003b24:	4463      	add	r3, ip
 8003b26:	2200      	movs	r2, #0
 8003b28:	715a      	strb	r2, [r3, #5]
 8003b2a:	4b6f      	ldr	r3, [pc, #444]	; (8003ce8 <DALI_ProcessRxData+0x1dc4>)
 8003b2c:	22e4      	movs	r2, #228	; 0xe4
 8003b2e:	0052      	lsls	r2, r2, #1
 8003b30:	4694      	mov	ip, r2
 8003b32:	44bc      	add	ip, r7
 8003b34:	4463      	add	r3, ip
 8003b36:	2201      	movs	r2, #1
 8003b38:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003b3a:	4b6b      	ldr	r3, [pc, #428]	; (8003ce8 <DALI_ProcessRxData+0x1dc4>)
 8003b3c:	22e4      	movs	r2, #228	; 0xe4
 8003b3e:	0052      	lsls	r2, r2, #1
 8003b40:	4694      	mov	ip, r2
 8003b42:	44bc      	add	ip, r7
 8003b44:	4463      	add	r3, ip
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	6859      	ldr	r1, [r3, #4]
 8003b4a:	f7fd fdf1 	bl	8001730 <DALISendData>
						}
							break;
 8003b4e:	f000 fc26 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_INSTANCE_STATUS:;
						{
							uint8_t temp = (instanceError << 7) | (instanceActive << 6);
 8003b52:	4b66      	ldr	r3, [pc, #408]	; (8003cec <DALI_ProcessRxData+0x1dc8>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	01db      	lsls	r3, r3, #7
 8003b58:	b25a      	sxtb	r2, r3
 8003b5a:	4b65      	ldr	r3, [pc, #404]	; (8003cf0 <DALI_ProcessRxData+0x1dcc>)
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	019b      	lsls	r3, r3, #6
 8003b60:	b25b      	sxtb	r3, r3
 8003b62:	4313      	orrs	r3, r2
 8003b64:	b25a      	sxtb	r2, r3
 8003b66:	21d7      	movs	r1, #215	; 0xd7
 8003b68:	0049      	lsls	r1, r1, #1
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	701a      	strb	r2, [r3, #0]
							DALITxData_t data = {temp, 1, 0, 1};
 8003b6e:	187b      	adds	r3, r7, r1
 8003b70:	781a      	ldrb	r2, [r3, #0]
 8003b72:	4b60      	ldr	r3, [pc, #384]	; (8003cf4 <DALI_ProcessRxData+0x1dd0>)
 8003b74:	21e4      	movs	r1, #228	; 0xe4
 8003b76:	0049      	lsls	r1, r1, #1
 8003b78:	468c      	mov	ip, r1
 8003b7a:	44bc      	add	ip, r7
 8003b7c:	4463      	add	r3, ip
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	4b5c      	ldr	r3, [pc, #368]	; (8003cf4 <DALI_ProcessRxData+0x1dd0>)
 8003b82:	22e4      	movs	r2, #228	; 0xe4
 8003b84:	0052      	lsls	r2, r2, #1
 8003b86:	4694      	mov	ip, r2
 8003b88:	44bc      	add	ip, r7
 8003b8a:	4463      	add	r3, ip
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	711a      	strb	r2, [r3, #4]
 8003b90:	4b58      	ldr	r3, [pc, #352]	; (8003cf4 <DALI_ProcessRxData+0x1dd0>)
 8003b92:	22e4      	movs	r2, #228	; 0xe4
 8003b94:	0052      	lsls	r2, r2, #1
 8003b96:	4694      	mov	ip, r2
 8003b98:	44bc      	add	ip, r7
 8003b9a:	4463      	add	r3, ip
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	715a      	strb	r2, [r3, #5]
 8003ba0:	4b54      	ldr	r3, [pc, #336]	; (8003cf4 <DALI_ProcessRxData+0x1dd0>)
 8003ba2:	22e4      	movs	r2, #228	; 0xe4
 8003ba4:	0052      	lsls	r2, r2, #1
 8003ba6:	4694      	mov	ip, r2
 8003ba8:	44bc      	add	ip, r7
 8003baa:	4463      	add	r3, ip
 8003bac:	2201      	movs	r2, #1
 8003bae:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003bb0:	4b50      	ldr	r3, [pc, #320]	; (8003cf4 <DALI_ProcessRxData+0x1dd0>)
 8003bb2:	22e4      	movs	r2, #228	; 0xe4
 8003bb4:	0052      	lsls	r2, r2, #1
 8003bb6:	4694      	mov	ip, r2
 8003bb8:	44bc      	add	ip, r7
 8003bba:	4463      	add	r3, ip
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	6859      	ldr	r1, [r3, #4]
 8003bc0:	f7fd fdb6 	bl	8001730 <DALISendData>
						}
							break;
 8003bc4:	f000 fbeb 	bl	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_INSTANCE_ENABLED:
							if(instanceActive == TRUE)
 8003bc8:	4b49      	ldr	r3, [pc, #292]	; (8003cf0 <DALI_ProcessRxData+0x1dcc>)
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d001      	beq.n	8003bd4 <DALI_ProcessRxData+0x1cb0>
 8003bd0:	f000 fbe0 	bl	8004394 <DALI_ProcessRxData+0x2470>
							{
								DALITxData_t data = {0xFF, 1, 0, 1};
 8003bd4:	4b48      	ldr	r3, [pc, #288]	; (8003cf8 <DALI_ProcessRxData+0x1dd4>)
 8003bd6:	22e4      	movs	r2, #228	; 0xe4
 8003bd8:	0052      	lsls	r2, r2, #1
 8003bda:	4694      	mov	ip, r2
 8003bdc:	44bc      	add	ip, r7
 8003bde:	4463      	add	r3, ip
 8003be0:	4a46      	ldr	r2, [pc, #280]	; (8003cfc <DALI_ProcessRxData+0x1dd8>)
 8003be2:	ca03      	ldmia	r2!, {r0, r1}
 8003be4:	c303      	stmia	r3!, {r0, r1}
								DALISendData(data);
 8003be6:	4b44      	ldr	r3, [pc, #272]	; (8003cf8 <DALI_ProcessRxData+0x1dd4>)
 8003be8:	22e4      	movs	r2, #228	; 0xe4
 8003bea:	0052      	lsls	r2, r2, #1
 8003bec:	4694      	mov	ip, r2
 8003bee:	44bc      	add	ip, r7
 8003bf0:	4463      	add	r3, ip
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	6859      	ldr	r1, [r3, #4]
 8003bf6:	f7fd fd9b 	bl	8001730 <DALISendData>
							}
							break;
 8003bfa:	f000 fbcb 	bl	8004394 <DALI_ProcessRxData+0x2470>
						case QUERY_PRIMARY_INSTANCE_GROUP:;
						{
							DALITxData_t data = {instanceGroup0, 1, 0, 1};
 8003bfe:	4b40      	ldr	r3, [pc, #256]	; (8003d00 <DALI_ProcessRxData+0x1ddc>)
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	001a      	movs	r2, r3
 8003c04:	4b3f      	ldr	r3, [pc, #252]	; (8003d04 <DALI_ProcessRxData+0x1de0>)
 8003c06:	21e4      	movs	r1, #228	; 0xe4
 8003c08:	0049      	lsls	r1, r1, #1
 8003c0a:	468c      	mov	ip, r1
 8003c0c:	44bc      	add	ip, r7
 8003c0e:	4463      	add	r3, ip
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	4b3c      	ldr	r3, [pc, #240]	; (8003d04 <DALI_ProcessRxData+0x1de0>)
 8003c14:	22e4      	movs	r2, #228	; 0xe4
 8003c16:	0052      	lsls	r2, r2, #1
 8003c18:	4694      	mov	ip, r2
 8003c1a:	44bc      	add	ip, r7
 8003c1c:	4463      	add	r3, ip
 8003c1e:	2201      	movs	r2, #1
 8003c20:	711a      	strb	r2, [r3, #4]
 8003c22:	4b38      	ldr	r3, [pc, #224]	; (8003d04 <DALI_ProcessRxData+0x1de0>)
 8003c24:	22e4      	movs	r2, #228	; 0xe4
 8003c26:	0052      	lsls	r2, r2, #1
 8003c28:	4694      	mov	ip, r2
 8003c2a:	44bc      	add	ip, r7
 8003c2c:	4463      	add	r3, ip
 8003c2e:	2200      	movs	r2, #0
 8003c30:	715a      	strb	r2, [r3, #5]
 8003c32:	4b34      	ldr	r3, [pc, #208]	; (8003d04 <DALI_ProcessRxData+0x1de0>)
 8003c34:	22e4      	movs	r2, #228	; 0xe4
 8003c36:	0052      	lsls	r2, r2, #1
 8003c38:	4694      	mov	ip, r2
 8003c3a:	44bc      	add	ip, r7
 8003c3c:	4463      	add	r3, ip
 8003c3e:	2201      	movs	r2, #1
 8003c40:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003c42:	4b30      	ldr	r3, [pc, #192]	; (8003d04 <DALI_ProcessRxData+0x1de0>)
 8003c44:	22e4      	movs	r2, #228	; 0xe4
 8003c46:	0052      	lsls	r2, r2, #1
 8003c48:	4694      	mov	ip, r2
 8003c4a:	44bc      	add	ip, r7
 8003c4c:	4463      	add	r3, ip
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	6859      	ldr	r1, [r3, #4]
 8003c52:	f7fd fd6d 	bl	8001730 <DALISendData>
						}
							break;
 8003c56:	e3a2      	b.n	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_INSTANCE_GROUP_1:;
						{
							DALITxData_t data = {instanceGroup1, 1, 0, 1};
 8003c58:	4b2b      	ldr	r3, [pc, #172]	; (8003d08 <DALI_ProcessRxData+0x1de4>)
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	001a      	movs	r2, r3
 8003c5e:	4b2b      	ldr	r3, [pc, #172]	; (8003d0c <DALI_ProcessRxData+0x1de8>)
 8003c60:	21e4      	movs	r1, #228	; 0xe4
 8003c62:	0049      	lsls	r1, r1, #1
 8003c64:	468c      	mov	ip, r1
 8003c66:	44bc      	add	ip, r7
 8003c68:	4463      	add	r3, ip
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	4b27      	ldr	r3, [pc, #156]	; (8003d0c <DALI_ProcessRxData+0x1de8>)
 8003c6e:	22e4      	movs	r2, #228	; 0xe4
 8003c70:	0052      	lsls	r2, r2, #1
 8003c72:	4694      	mov	ip, r2
 8003c74:	44bc      	add	ip, r7
 8003c76:	4463      	add	r3, ip
 8003c78:	2201      	movs	r2, #1
 8003c7a:	711a      	strb	r2, [r3, #4]
 8003c7c:	4b23      	ldr	r3, [pc, #140]	; (8003d0c <DALI_ProcessRxData+0x1de8>)
 8003c7e:	22e4      	movs	r2, #228	; 0xe4
 8003c80:	0052      	lsls	r2, r2, #1
 8003c82:	4694      	mov	ip, r2
 8003c84:	44bc      	add	ip, r7
 8003c86:	4463      	add	r3, ip
 8003c88:	2200      	movs	r2, #0
 8003c8a:	715a      	strb	r2, [r3, #5]
 8003c8c:	4b1f      	ldr	r3, [pc, #124]	; (8003d0c <DALI_ProcessRxData+0x1de8>)
 8003c8e:	22e4      	movs	r2, #228	; 0xe4
 8003c90:	0052      	lsls	r2, r2, #1
 8003c92:	4694      	mov	ip, r2
 8003c94:	44bc      	add	ip, r7
 8003c96:	4463      	add	r3, ip
 8003c98:	2201      	movs	r2, #1
 8003c9a:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <DALI_ProcessRxData+0x1de8>)
 8003c9e:	22e4      	movs	r2, #228	; 0xe4
 8003ca0:	0052      	lsls	r2, r2, #1
 8003ca2:	4694      	mov	ip, r2
 8003ca4:	44bc      	add	ip, r7
 8003ca6:	4463      	add	r3, ip
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	6859      	ldr	r1, [r3, #4]
 8003cac:	f7fd fd40 	bl	8001730 <DALISendData>
						}
							break;
 8003cb0:	e375      	b.n	800439e <DALI_ProcessRxData+0x247a>
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	20000888 	.word	0x20000888
 8003cb8:	200000b4 	.word	0x200000b4
 8003cbc:	200008bc 	.word	0x200008bc
 8003cc0:	2000000d 	.word	0x2000000d
 8003cc4:	200000ce 	.word	0x200000ce
 8003cc8:	200008b6 	.word	0x200008b6
 8003ccc:	2000089a 	.word	0x2000089a
 8003cd0:	200000b6 	.word	0x200000b6
 8003cd4:	200000b5 	.word	0x200000b5
 8003cd8:	200008b0 	.word	0x200008b0
 8003cdc:	2000089c 	.word	0x2000089c
 8003ce0:	fffffec8 	.word	0xfffffec8
 8003ce4:	2000088c 	.word	0x2000088c
 8003ce8:	fffffec0 	.word	0xfffffec0
 8003cec:	200000be 	.word	0x200000be
 8003cf0:	2000089e 	.word	0x2000089e
 8003cf4:	fffffeb8 	.word	0xfffffeb8
 8003cf8:	fffffeb0 	.word	0xfffffeb0
 8003cfc:	08008844 	.word	0x08008844
 8003d00:	200008b4 	.word	0x200008b4
 8003d04:	fffffea8 	.word	0xfffffea8
 8003d08:	200008a2 	.word	0x200008a2
 8003d0c:	fffffea0 	.word	0xfffffea0
						case QUERY_INSTANCE_GROUP_2:;
						{
							DALITxData_t data = {instanceGroup2, 1, 0, 1};
 8003d10:	4be5      	ldr	r3, [pc, #916]	; (80040a8 <DALI_ProcessRxData+0x2184>)
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	001a      	movs	r2, r3
 8003d16:	4be5      	ldr	r3, [pc, #916]	; (80040ac <DALI_ProcessRxData+0x2188>)
 8003d18:	21e4      	movs	r1, #228	; 0xe4
 8003d1a:	0049      	lsls	r1, r1, #1
 8003d1c:	468c      	mov	ip, r1
 8003d1e:	44bc      	add	ip, r7
 8003d20:	4463      	add	r3, ip
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	4be1      	ldr	r3, [pc, #900]	; (80040ac <DALI_ProcessRxData+0x2188>)
 8003d26:	22e4      	movs	r2, #228	; 0xe4
 8003d28:	0052      	lsls	r2, r2, #1
 8003d2a:	4694      	mov	ip, r2
 8003d2c:	44bc      	add	ip, r7
 8003d2e:	4463      	add	r3, ip
 8003d30:	2201      	movs	r2, #1
 8003d32:	711a      	strb	r2, [r3, #4]
 8003d34:	4bdd      	ldr	r3, [pc, #884]	; (80040ac <DALI_ProcessRxData+0x2188>)
 8003d36:	22e4      	movs	r2, #228	; 0xe4
 8003d38:	0052      	lsls	r2, r2, #1
 8003d3a:	4694      	mov	ip, r2
 8003d3c:	44bc      	add	ip, r7
 8003d3e:	4463      	add	r3, ip
 8003d40:	2200      	movs	r2, #0
 8003d42:	715a      	strb	r2, [r3, #5]
 8003d44:	4bd9      	ldr	r3, [pc, #868]	; (80040ac <DALI_ProcessRxData+0x2188>)
 8003d46:	22e4      	movs	r2, #228	; 0xe4
 8003d48:	0052      	lsls	r2, r2, #1
 8003d4a:	4694      	mov	ip, r2
 8003d4c:	44bc      	add	ip, r7
 8003d4e:	4463      	add	r3, ip
 8003d50:	2201      	movs	r2, #1
 8003d52:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003d54:	4bd5      	ldr	r3, [pc, #852]	; (80040ac <DALI_ProcessRxData+0x2188>)
 8003d56:	22e4      	movs	r2, #228	; 0xe4
 8003d58:	0052      	lsls	r2, r2, #1
 8003d5a:	4694      	mov	ip, r2
 8003d5c:	44bc      	add	ip, r7
 8003d5e:	4463      	add	r3, ip
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	f7fd fce4 	bl	8001730 <DALISendData>
						}
							break;
 8003d68:	e319      	b.n	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_EVENT_SCHEME:;
						{
							DALITxData_t data = {eventScheme, 1, 0, 1};
 8003d6a:	4bd1      	ldr	r3, [pc, #836]	; (80040b0 <DALI_ProcessRxData+0x218c>)
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	001a      	movs	r2, r3
 8003d70:	4bd0      	ldr	r3, [pc, #832]	; (80040b4 <DALI_ProcessRxData+0x2190>)
 8003d72:	21e4      	movs	r1, #228	; 0xe4
 8003d74:	0049      	lsls	r1, r1, #1
 8003d76:	468c      	mov	ip, r1
 8003d78:	44bc      	add	ip, r7
 8003d7a:	4463      	add	r3, ip
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	4bcd      	ldr	r3, [pc, #820]	; (80040b4 <DALI_ProcessRxData+0x2190>)
 8003d80:	22e4      	movs	r2, #228	; 0xe4
 8003d82:	0052      	lsls	r2, r2, #1
 8003d84:	4694      	mov	ip, r2
 8003d86:	44bc      	add	ip, r7
 8003d88:	4463      	add	r3, ip
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	711a      	strb	r2, [r3, #4]
 8003d8e:	4bc9      	ldr	r3, [pc, #804]	; (80040b4 <DALI_ProcessRxData+0x2190>)
 8003d90:	22e4      	movs	r2, #228	; 0xe4
 8003d92:	0052      	lsls	r2, r2, #1
 8003d94:	4694      	mov	ip, r2
 8003d96:	44bc      	add	ip, r7
 8003d98:	4463      	add	r3, ip
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	715a      	strb	r2, [r3, #5]
 8003d9e:	4bc5      	ldr	r3, [pc, #788]	; (80040b4 <DALI_ProcessRxData+0x2190>)
 8003da0:	22e4      	movs	r2, #228	; 0xe4
 8003da2:	0052      	lsls	r2, r2, #1
 8003da4:	4694      	mov	ip, r2
 8003da6:	44bc      	add	ip, r7
 8003da8:	4463      	add	r3, ip
 8003daa:	2201      	movs	r2, #1
 8003dac:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003dae:	4bc1      	ldr	r3, [pc, #772]	; (80040b4 <DALI_ProcessRxData+0x2190>)
 8003db0:	22e4      	movs	r2, #228	; 0xe4
 8003db2:	0052      	lsls	r2, r2, #1
 8003db4:	4694      	mov	ip, r2
 8003db6:	44bc      	add	ip, r7
 8003db8:	4463      	add	r3, ip
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	6859      	ldr	r1, [r3, #4]
 8003dbe:	f7fd fcb7 	bl	8001730 <DALISendData>
						}
							break;
 8003dc2:	e2ec      	b.n	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_INPUT_VALUE:
						{
							inputValue_latch = inputValue;
 8003dc4:	4bbc      	ldr	r3, [pc, #752]	; (80040b8 <DALI_ProcessRxData+0x2194>)
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	001a      	movs	r2, r3
 8003dca:	4bbc      	ldr	r3, [pc, #752]	; (80040bc <DALI_ProcessRxData+0x2198>)
 8003dcc:	601a      	str	r2, [r3, #0]
							inputValue_byte = (resolution + 7)/8 - 1;
 8003dce:	4bbc      	ldr	r3, [pc, #752]	; (80040c0 <DALI_ProcessRxData+0x219c>)
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	3307      	adds	r3, #7
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	da00      	bge.n	8003dda <DALI_ProcessRxData+0x1eb6>
 8003dd8:	3307      	adds	r3, #7
 8003dda:	10db      	asrs	r3, r3, #3
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	4bb8      	ldr	r3, [pc, #736]	; (80040c4 <DALI_ProcessRxData+0x21a0>)
 8003de4:	701a      	strb	r2, [r3, #0]
							DALITxData_t data = {(inputValue_latch >> (inputValue_byte*8)) & 0xFF, 1, 0, 1};
 8003de6:	4bb5      	ldr	r3, [pc, #724]	; (80040bc <DALI_ProcessRxData+0x2198>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4bb6      	ldr	r3, [pc, #728]	; (80040c4 <DALI_ProcessRxData+0x21a0>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	40da      	lsrs	r2, r3
 8003df2:	0013      	movs	r3, r2
 8003df4:	22ff      	movs	r2, #255	; 0xff
 8003df6:	401a      	ands	r2, r3
 8003df8:	4bb3      	ldr	r3, [pc, #716]	; (80040c8 <DALI_ProcessRxData+0x21a4>)
 8003dfa:	21e4      	movs	r1, #228	; 0xe4
 8003dfc:	0049      	lsls	r1, r1, #1
 8003dfe:	468c      	mov	ip, r1
 8003e00:	44bc      	add	ip, r7
 8003e02:	4463      	add	r3, ip
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	4bb0      	ldr	r3, [pc, #704]	; (80040c8 <DALI_ProcessRxData+0x21a4>)
 8003e08:	22e4      	movs	r2, #228	; 0xe4
 8003e0a:	0052      	lsls	r2, r2, #1
 8003e0c:	4694      	mov	ip, r2
 8003e0e:	44bc      	add	ip, r7
 8003e10:	4463      	add	r3, ip
 8003e12:	2201      	movs	r2, #1
 8003e14:	711a      	strb	r2, [r3, #4]
 8003e16:	4bac      	ldr	r3, [pc, #688]	; (80040c8 <DALI_ProcessRxData+0x21a4>)
 8003e18:	22e4      	movs	r2, #228	; 0xe4
 8003e1a:	0052      	lsls	r2, r2, #1
 8003e1c:	4694      	mov	ip, r2
 8003e1e:	44bc      	add	ip, r7
 8003e20:	4463      	add	r3, ip
 8003e22:	2200      	movs	r2, #0
 8003e24:	715a      	strb	r2, [r3, #5]
 8003e26:	4ba8      	ldr	r3, [pc, #672]	; (80040c8 <DALI_ProcessRxData+0x21a4>)
 8003e28:	22e4      	movs	r2, #228	; 0xe4
 8003e2a:	0052      	lsls	r2, r2, #1
 8003e2c:	4694      	mov	ip, r2
 8003e2e:	44bc      	add	ip, r7
 8003e30:	4463      	add	r3, ip
 8003e32:	2201      	movs	r2, #1
 8003e34:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003e36:	4ba4      	ldr	r3, [pc, #656]	; (80040c8 <DALI_ProcessRxData+0x21a4>)
 8003e38:	22e4      	movs	r2, #228	; 0xe4
 8003e3a:	0052      	lsls	r2, r2, #1
 8003e3c:	4694      	mov	ip, r2
 8003e3e:	44bc      	add	ip, r7
 8003e40:	4463      	add	r3, ip
 8003e42:	6818      	ldr	r0, [r3, #0]
 8003e44:	6859      	ldr	r1, [r3, #4]
 8003e46:	f7fd fc73 	bl	8001730 <DALISendData>
						}
							break;
 8003e4a:	e2a8      	b.n	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_INPUT_VALUE_LATCH:
							if(inputValue_byte != 0)
 8003e4c:	4b9d      	ldr	r3, [pc, #628]	; (80040c4 <DALI_ProcessRxData+0x21a0>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d100      	bne.n	8003e56 <DALI_ProcessRxData+0x1f32>
 8003e54:	e2a0      	b.n	8004398 <DALI_ProcessRxData+0x2474>
							{
								inputValue_byte--;
 8003e56:	4b9b      	ldr	r3, [pc, #620]	; (80040c4 <DALI_ProcessRxData+0x21a0>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	4b99      	ldr	r3, [pc, #612]	; (80040c4 <DALI_ProcessRxData+0x21a0>)
 8003e60:	701a      	strb	r2, [r3, #0]
								DALITxData_t data = {(inputValue_latch >> (inputValue_byte*8)) & 0xFF, 1, 0, 1};
 8003e62:	4b96      	ldr	r3, [pc, #600]	; (80040bc <DALI_ProcessRxData+0x2198>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b97      	ldr	r3, [pc, #604]	; (80040c4 <DALI_ProcessRxData+0x21a0>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	40da      	lsrs	r2, r3
 8003e6e:	0013      	movs	r3, r2
 8003e70:	22ff      	movs	r2, #255	; 0xff
 8003e72:	401a      	ands	r2, r3
 8003e74:	4b95      	ldr	r3, [pc, #596]	; (80040cc <DALI_ProcessRxData+0x21a8>)
 8003e76:	21e4      	movs	r1, #228	; 0xe4
 8003e78:	0049      	lsls	r1, r1, #1
 8003e7a:	468c      	mov	ip, r1
 8003e7c:	44bc      	add	ip, r7
 8003e7e:	4463      	add	r3, ip
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	4b92      	ldr	r3, [pc, #584]	; (80040cc <DALI_ProcessRxData+0x21a8>)
 8003e84:	22e4      	movs	r2, #228	; 0xe4
 8003e86:	0052      	lsls	r2, r2, #1
 8003e88:	4694      	mov	ip, r2
 8003e8a:	44bc      	add	ip, r7
 8003e8c:	4463      	add	r3, ip
 8003e8e:	2201      	movs	r2, #1
 8003e90:	711a      	strb	r2, [r3, #4]
 8003e92:	4b8e      	ldr	r3, [pc, #568]	; (80040cc <DALI_ProcessRxData+0x21a8>)
 8003e94:	22e4      	movs	r2, #228	; 0xe4
 8003e96:	0052      	lsls	r2, r2, #1
 8003e98:	4694      	mov	ip, r2
 8003e9a:	44bc      	add	ip, r7
 8003e9c:	4463      	add	r3, ip
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	715a      	strb	r2, [r3, #5]
 8003ea2:	4b8a      	ldr	r3, [pc, #552]	; (80040cc <DALI_ProcessRxData+0x21a8>)
 8003ea4:	22e4      	movs	r2, #228	; 0xe4
 8003ea6:	0052      	lsls	r2, r2, #1
 8003ea8:	4694      	mov	ip, r2
 8003eaa:	44bc      	add	ip, r7
 8003eac:	4463      	add	r3, ip
 8003eae:	2201      	movs	r2, #1
 8003eb0:	719a      	strb	r2, [r3, #6]
								DALISendData(data);
 8003eb2:	4b86      	ldr	r3, [pc, #536]	; (80040cc <DALI_ProcessRxData+0x21a8>)
 8003eb4:	22e4      	movs	r2, #228	; 0xe4
 8003eb6:	0052      	lsls	r2, r2, #1
 8003eb8:	4694      	mov	ip, r2
 8003eba:	44bc      	add	ip, r7
 8003ebc:	4463      	add	r3, ip
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	6859      	ldr	r1, [r3, #4]
 8003ec2:	f7fd fc35 	bl	8001730 <DALISendData>
							}
							break;
 8003ec6:	e267      	b.n	8004398 <DALI_ProcessRxData+0x2474>
						case QUERY_EVENT_PRIORITY:;
						{
							DALITxData_t data = {eventPriority, 1, 0, 1};
 8003ec8:	4b81      	ldr	r3, [pc, #516]	; (80040d0 <DALI_ProcessRxData+0x21ac>)
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	001a      	movs	r2, r3
 8003ece:	4b81      	ldr	r3, [pc, #516]	; (80040d4 <DALI_ProcessRxData+0x21b0>)
 8003ed0:	21e4      	movs	r1, #228	; 0xe4
 8003ed2:	0049      	lsls	r1, r1, #1
 8003ed4:	468c      	mov	ip, r1
 8003ed6:	44bc      	add	ip, r7
 8003ed8:	4463      	add	r3, ip
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	4b7d      	ldr	r3, [pc, #500]	; (80040d4 <DALI_ProcessRxData+0x21b0>)
 8003ede:	22e4      	movs	r2, #228	; 0xe4
 8003ee0:	0052      	lsls	r2, r2, #1
 8003ee2:	4694      	mov	ip, r2
 8003ee4:	44bc      	add	ip, r7
 8003ee6:	4463      	add	r3, ip
 8003ee8:	2201      	movs	r2, #1
 8003eea:	711a      	strb	r2, [r3, #4]
 8003eec:	4b79      	ldr	r3, [pc, #484]	; (80040d4 <DALI_ProcessRxData+0x21b0>)
 8003eee:	22e4      	movs	r2, #228	; 0xe4
 8003ef0:	0052      	lsls	r2, r2, #1
 8003ef2:	4694      	mov	ip, r2
 8003ef4:	44bc      	add	ip, r7
 8003ef6:	4463      	add	r3, ip
 8003ef8:	2200      	movs	r2, #0
 8003efa:	715a      	strb	r2, [r3, #5]
 8003efc:	4b75      	ldr	r3, [pc, #468]	; (80040d4 <DALI_ProcessRxData+0x21b0>)
 8003efe:	22e4      	movs	r2, #228	; 0xe4
 8003f00:	0052      	lsls	r2, r2, #1
 8003f02:	4694      	mov	ip, r2
 8003f04:	44bc      	add	ip, r7
 8003f06:	4463      	add	r3, ip
 8003f08:	2201      	movs	r2, #1
 8003f0a:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003f0c:	4b71      	ldr	r3, [pc, #452]	; (80040d4 <DALI_ProcessRxData+0x21b0>)
 8003f0e:	22e4      	movs	r2, #228	; 0xe4
 8003f10:	0052      	lsls	r2, r2, #1
 8003f12:	4694      	mov	ip, r2
 8003f14:	44bc      	add	ip, r7
 8003f16:	4463      	add	r3, ip
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	6859      	ldr	r1, [r3, #4]
 8003f1c:	f7fd fc08 	bl	8001730 <DALISendData>
						}
							break;
 8003f20:	e23d      	b.n	800439e <DALI_ProcessRxData+0x247a>
							break;
						case QUERY_NEXT_FEATURE_TYPE:
							break;
						case QUERY_EVENT_FILTER_0_7:;
						{
							DALITxData_t data = {eventFilter & 0xFF, 1, 0, 1};
 8003f22:	4b6d      	ldr	r3, [pc, #436]	; (80040d8 <DALI_ProcessRxData+0x21b4>)
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	001a      	movs	r2, r3
 8003f28:	23ff      	movs	r3, #255	; 0xff
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	4b6b      	ldr	r3, [pc, #428]	; (80040dc <DALI_ProcessRxData+0x21b8>)
 8003f2e:	21e4      	movs	r1, #228	; 0xe4
 8003f30:	0049      	lsls	r1, r1, #1
 8003f32:	468c      	mov	ip, r1
 8003f34:	44bc      	add	ip, r7
 8003f36:	4463      	add	r3, ip
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	4b68      	ldr	r3, [pc, #416]	; (80040dc <DALI_ProcessRxData+0x21b8>)
 8003f3c:	22e4      	movs	r2, #228	; 0xe4
 8003f3e:	0052      	lsls	r2, r2, #1
 8003f40:	4694      	mov	ip, r2
 8003f42:	44bc      	add	ip, r7
 8003f44:	4463      	add	r3, ip
 8003f46:	2201      	movs	r2, #1
 8003f48:	711a      	strb	r2, [r3, #4]
 8003f4a:	4b64      	ldr	r3, [pc, #400]	; (80040dc <DALI_ProcessRxData+0x21b8>)
 8003f4c:	22e4      	movs	r2, #228	; 0xe4
 8003f4e:	0052      	lsls	r2, r2, #1
 8003f50:	4694      	mov	ip, r2
 8003f52:	44bc      	add	ip, r7
 8003f54:	4463      	add	r3, ip
 8003f56:	2200      	movs	r2, #0
 8003f58:	715a      	strb	r2, [r3, #5]
 8003f5a:	4b60      	ldr	r3, [pc, #384]	; (80040dc <DALI_ProcessRxData+0x21b8>)
 8003f5c:	22e4      	movs	r2, #228	; 0xe4
 8003f5e:	0052      	lsls	r2, r2, #1
 8003f60:	4694      	mov	ip, r2
 8003f62:	44bc      	add	ip, r7
 8003f64:	4463      	add	r3, ip
 8003f66:	2201      	movs	r2, #1
 8003f68:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003f6a:	4b5c      	ldr	r3, [pc, #368]	; (80040dc <DALI_ProcessRxData+0x21b8>)
 8003f6c:	22e4      	movs	r2, #228	; 0xe4
 8003f6e:	0052      	lsls	r2, r2, #1
 8003f70:	4694      	mov	ip, r2
 8003f72:	44bc      	add	ip, r7
 8003f74:	4463      	add	r3, ip
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	6859      	ldr	r1, [r3, #4]
 8003f7a:	f7fd fbd9 	bl	8001730 <DALISendData>
						}
							break;
 8003f7e:	e20e      	b.n	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_EVENT_FILTER_8_15:;
						{
							DALITxData_t data = {(eventFilter >> 8) & 0xFF, 1, 0, 1};
 8003f80:	4b55      	ldr	r3, [pc, #340]	; (80040d8 <DALI_ProcessRxData+0x21b4>)
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	0a1b      	lsrs	r3, r3, #8
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	001a      	movs	r2, r3
 8003f8a:	23ff      	movs	r3, #255	; 0xff
 8003f8c:	401a      	ands	r2, r3
 8003f8e:	4b54      	ldr	r3, [pc, #336]	; (80040e0 <DALI_ProcessRxData+0x21bc>)
 8003f90:	21e4      	movs	r1, #228	; 0xe4
 8003f92:	0049      	lsls	r1, r1, #1
 8003f94:	468c      	mov	ip, r1
 8003f96:	44bc      	add	ip, r7
 8003f98:	4463      	add	r3, ip
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	4b50      	ldr	r3, [pc, #320]	; (80040e0 <DALI_ProcessRxData+0x21bc>)
 8003f9e:	22e4      	movs	r2, #228	; 0xe4
 8003fa0:	0052      	lsls	r2, r2, #1
 8003fa2:	4694      	mov	ip, r2
 8003fa4:	44bc      	add	ip, r7
 8003fa6:	4463      	add	r3, ip
 8003fa8:	2201      	movs	r2, #1
 8003faa:	711a      	strb	r2, [r3, #4]
 8003fac:	4b4c      	ldr	r3, [pc, #304]	; (80040e0 <DALI_ProcessRxData+0x21bc>)
 8003fae:	22e4      	movs	r2, #228	; 0xe4
 8003fb0:	0052      	lsls	r2, r2, #1
 8003fb2:	4694      	mov	ip, r2
 8003fb4:	44bc      	add	ip, r7
 8003fb6:	4463      	add	r3, ip
 8003fb8:	2200      	movs	r2, #0
 8003fba:	715a      	strb	r2, [r3, #5]
 8003fbc:	4b48      	ldr	r3, [pc, #288]	; (80040e0 <DALI_ProcessRxData+0x21bc>)
 8003fbe:	22e4      	movs	r2, #228	; 0xe4
 8003fc0:	0052      	lsls	r2, r2, #1
 8003fc2:	4694      	mov	ip, r2
 8003fc4:	44bc      	add	ip, r7
 8003fc6:	4463      	add	r3, ip
 8003fc8:	2201      	movs	r2, #1
 8003fca:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 8003fcc:	4b44      	ldr	r3, [pc, #272]	; (80040e0 <DALI_ProcessRxData+0x21bc>)
 8003fce:	22e4      	movs	r2, #228	; 0xe4
 8003fd0:	0052      	lsls	r2, r2, #1
 8003fd2:	4694      	mov	ip, r2
 8003fd4:	44bc      	add	ip, r7
 8003fd6:	4463      	add	r3, ip
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	6859      	ldr	r1, [r3, #4]
 8003fdc:	f7fd fba8 	bl	8001730 <DALISendData>
						}
							break;
 8003fe0:	e1dd      	b.n	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_EVENT_FILTER_16_23:
						{
							DALITxData_t data = {(eventFilter >> 16) & 0xFF, 1, 0, 1};
 8003fe2:	4b40      	ldr	r3, [pc, #256]	; (80040e4 <DALI_ProcessRxData+0x21c0>)
 8003fe4:	22e4      	movs	r2, #228	; 0xe4
 8003fe6:	0052      	lsls	r2, r2, #1
 8003fe8:	4694      	mov	ip, r2
 8003fea:	44bc      	add	ip, r7
 8003fec:	4463      	add	r3, ip
 8003fee:	4a3e      	ldr	r2, [pc, #248]	; (80040e8 <DALI_ProcessRxData+0x21c4>)
 8003ff0:	ca03      	ldmia	r2!, {r0, r1}
 8003ff2:	c303      	stmia	r3!, {r0, r1}
							DALISendData(data);
 8003ff4:	4b3b      	ldr	r3, [pc, #236]	; (80040e4 <DALI_ProcessRxData+0x21c0>)
 8003ff6:	22e4      	movs	r2, #228	; 0xe4
 8003ff8:	0052      	lsls	r2, r2, #1
 8003ffa:	4694      	mov	ip, r2
 8003ffc:	44bc      	add	ip, r7
 8003ffe:	4463      	add	r3, ip
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	6859      	ldr	r1, [r3, #4]
 8004004:	f7fd fb94 	bl	8001730 <DALISendData>
						}
							break;
 8004008:	e1c9      	b.n	800439e <DALI_ProcessRxData+0x247a>
						case SET_REPORT_TIMER:
							if(frame != previousFrame)
 800400a:	23d4      	movs	r3, #212	; 0xd4
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	18fb      	adds	r3, r7, r3
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b36      	ldr	r3, [pc, #216]	; (80040ec <DALI_ProcessRxData+0x21c8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d002      	beq.n	8004020 <DALI_ProcessRxData+0x20fc>
							{
								DALIReceiveTwice();
 800401a:	f7fd fdb3 	bl	8001b84 <DALIReceiveTwice>
									if(tReport != 30)
										resetState = FALSE;
								}
								isSecondFrame = 1;
							}
							break;
 800401e:	e1be      	b.n	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8004020:	23dc      	movs	r3, #220	; 0xdc
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	795b      	ldrb	r3, [r3, #5]
 800402a:	2210      	movs	r2, #16
 800402c:	4013      	ands	r3, r2
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00b      	beq.n	800404c <DALI_ProcessRxData+0x2128>
									tReport = DTR0;
 8004034:	4b2e      	ldr	r3, [pc, #184]	; (80040f0 <DALI_ProcessRxData+0x21cc>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b2e      	ldr	r3, [pc, #184]	; (80040f4 <DALI_ProcessRxData+0x21d0>)
 800403c:	801a      	strh	r2, [r3, #0]
									if(tReport != 30)
 800403e:	4b2d      	ldr	r3, [pc, #180]	; (80040f4 <DALI_ProcessRxData+0x21d0>)
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	2b1e      	cmp	r3, #30
 8004044:	d002      	beq.n	800404c <DALI_ProcessRxData+0x2128>
										resetState = FALSE;
 8004046:	4b2c      	ldr	r3, [pc, #176]	; (80040f8 <DALI_ProcessRxData+0x21d4>)
 8004048:	2200      	movs	r2, #0
 800404a:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 800404c:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <DALI_ProcessRxData+0x21d8>)
 800404e:	2201      	movs	r2, #1
 8004050:	701a      	strb	r2, [r3, #0]
							break;
 8004052:	e1a4      	b.n	800439e <DALI_ProcessRxData+0x247a>
						case SET_HYSTERESIS:
							if(frame != previousFrame)
 8004054:	23d4      	movs	r3, #212	; 0xd4
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4b23      	ldr	r3, [pc, #140]	; (80040ec <DALI_ProcessRxData+0x21c8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d002      	beq.n	800406a <DALI_ProcessRxData+0x2146>
							{
								DALIReceiveTwice();
 8004064:	f7fd fd8e 	bl	8001b84 <DALIReceiveTwice>
											resetState = FALSE;
									}
								}
								isSecondFrame = 1;
							}
							break;
 8004068:	e199      	b.n	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 800406a:	23dc      	movs	r3, #220	; 0xdc
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	795b      	ldrb	r3, [r3, #5]
 8004074:	2210      	movs	r2, #16
 8004076:	4013      	ands	r3, r2
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00f      	beq.n	800409e <DALI_ProcessRxData+0x217a>
									if(DTR0 <= 25)
 800407e:	4b1c      	ldr	r3, [pc, #112]	; (80040f0 <DALI_ProcessRxData+0x21cc>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b19      	cmp	r3, #25
 8004084:	d80b      	bhi.n	800409e <DALI_ProcessRxData+0x217a>
										hysteresis = DTR0;
 8004086:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <DALI_ProcessRxData+0x21cc>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	b29a      	uxth	r2, r3
 800408c:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <DALI_ProcessRxData+0x21dc>)
 800408e:	801a      	strh	r2, [r3, #0]
										if(hysteresis != 5)
 8004090:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <DALI_ProcessRxData+0x21dc>)
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	2b05      	cmp	r3, #5
 8004096:	d002      	beq.n	800409e <DALI_ProcessRxData+0x217a>
											resetState = FALSE;
 8004098:	4b17      	ldr	r3, [pc, #92]	; (80040f8 <DALI_ProcessRxData+0x21d4>)
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 800409e:	4b17      	ldr	r3, [pc, #92]	; (80040fc <DALI_ProcessRxData+0x21d8>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	701a      	strb	r2, [r3, #0]
							break;
 80040a4:	e17b      	b.n	800439e <DALI_ProcessRxData+0x247a>
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	20000880 	.word	0x20000880
 80040ac:	fffffe98 	.word	0xfffffe98
 80040b0:	200008b6 	.word	0x200008b6
 80040b4:	fffffe90 	.word	0xfffffe90
 80040b8:	200008a6 	.word	0x200008a6
 80040bc:	20000890 	.word	0x20000890
 80040c0:	2000088c 	.word	0x2000088c
 80040c4:	200008ab 	.word	0x200008ab
 80040c8:	fffffe88 	.word	0xfffffe88
 80040cc:	fffffe80 	.word	0xfffffe80
 80040d0:	200008bc 	.word	0x200008bc
 80040d4:	fffffe78 	.word	0xfffffe78
 80040d8:	200008b0 	.word	0x200008b0
 80040dc:	fffffe70 	.word	0xfffffe70
 80040e0:	fffffe68 	.word	0xfffffe68
 80040e4:	fffffe60 	.word	0xfffffe60
 80040e8:	0800884c 	.word	0x0800884c
 80040ec:	20000888 	.word	0x20000888
 80040f0:	200000b4 	.word	0x200000b4
 80040f4:	200008b8 	.word	0x200008b8
 80040f8:	2000000d 	.word	0x2000000d
 80040fc:	200000ce 	.word	0x200000ce
 8004100:	20000010 	.word	0x20000010
						case SET_DEADTIME_TIMER:
							if(frame != previousFrame)
 8004104:	23d4      	movs	r3, #212	; 0xd4
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	18fb      	adds	r3, r7, r3
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	4bb7      	ldr	r3, [pc, #732]	; (80043ec <DALI_ProcessRxData+0x24c8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d002      	beq.n	800411a <DALI_ProcessRxData+0x21f6>
							{
								DALIReceiveTwice();
 8004114:	f7fd fd36 	bl	8001b84 <DALIReceiveTwice>
									if(tDeadtime != 30)
										resetState = FALSE;
								}
								isSecondFrame = 1;
							}
							break;
 8004118:	e141      	b.n	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 800411a:	23dc      	movs	r3, #220	; 0xdc
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	795b      	ldrb	r3, [r3, #5]
 8004124:	2210      	movs	r2, #16
 8004126:	4013      	ands	r3, r2
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00b      	beq.n	8004146 <DALI_ProcessRxData+0x2222>
									tDeadtime = DTR0;
 800412e:	4bb0      	ldr	r3, [pc, #704]	; (80043f0 <DALI_ProcessRxData+0x24cc>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	b29a      	uxth	r2, r3
 8004134:	4baf      	ldr	r3, [pc, #700]	; (80043f4 <DALI_ProcessRxData+0x24d0>)
 8004136:	801a      	strh	r2, [r3, #0]
									if(tDeadtime != 30)
 8004138:	4bae      	ldr	r3, [pc, #696]	; (80043f4 <DALI_ProcessRxData+0x24d0>)
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	2b1e      	cmp	r3, #30
 800413e:	d002      	beq.n	8004146 <DALI_ProcessRxData+0x2222>
										resetState = FALSE;
 8004140:	4bad      	ldr	r3, [pc, #692]	; (80043f8 <DALI_ProcessRxData+0x24d4>)
 8004142:	2200      	movs	r2, #0
 8004144:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 8004146:	4bad      	ldr	r3, [pc, #692]	; (80043fc <DALI_ProcessRxData+0x24d8>)
 8004148:	2201      	movs	r2, #1
 800414a:	701a      	strb	r2, [r3, #0]
							break;
 800414c:	e127      	b.n	800439e <DALI_ProcessRxData+0x247a>
						case SET_HYSTERESIS_MIN:
							if(frame != previousFrame)
 800414e:	23d4      	movs	r3, #212	; 0xd4
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	4ba5      	ldr	r3, [pc, #660]	; (80043ec <DALI_ProcessRxData+0x24c8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d002      	beq.n	8004164 <DALI_ProcessRxData+0x2240>
							{
								DALIReceiveTwice();
 800415e:	f7fd fd11 	bl	8001b84 <DALIReceiveTwice>
									if(hysteresisMin != 10)
										resetState = FALSE;
								}
								isSecondFrame = 1;
							}
							break;
 8004162:	e11c      	b.n	800439e <DALI_ProcessRxData+0x247a>
								if(msg_ptr->rxSendTwicePossible == 1)
 8004164:	23dc      	movs	r3, #220	; 0xdc
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	795b      	ldrb	r3, [r3, #5]
 800416e:	2210      	movs	r2, #16
 8004170:	4013      	ands	r3, r2
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00b      	beq.n	8004190 <DALI_ProcessRxData+0x226c>
									hysteresisMin = DTR0;
 8004178:	4b9d      	ldr	r3, [pc, #628]	; (80043f0 <DALI_ProcessRxData+0x24cc>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	b29a      	uxth	r2, r3
 800417e:	4ba0      	ldr	r3, [pc, #640]	; (8004400 <DALI_ProcessRxData+0x24dc>)
 8004180:	801a      	strh	r2, [r3, #0]
									if(hysteresisMin != 10)
 8004182:	4b9f      	ldr	r3, [pc, #636]	; (8004400 <DALI_ProcessRxData+0x24dc>)
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	2b0a      	cmp	r3, #10
 8004188:	d002      	beq.n	8004190 <DALI_ProcessRxData+0x226c>
										resetState = FALSE;
 800418a:	4b9b      	ldr	r3, [pc, #620]	; (80043f8 <DALI_ProcessRxData+0x24d4>)
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
								isSecondFrame = 1;
 8004190:	4b9a      	ldr	r3, [pc, #616]	; (80043fc <DALI_ProcessRxData+0x24d8>)
 8004192:	2201      	movs	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
							break;
 8004196:	e102      	b.n	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_DEADTIME_TIMER:
						{
							DALITxData_t data = {tDeadtime, 1, 0, 1};
 8004198:	4b96      	ldr	r3, [pc, #600]	; (80043f4 <DALI_ProcessRxData+0x24d0>)
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	001a      	movs	r2, r3
 800419e:	4b99      	ldr	r3, [pc, #612]	; (8004404 <DALI_ProcessRxData+0x24e0>)
 80041a0:	21e4      	movs	r1, #228	; 0xe4
 80041a2:	0049      	lsls	r1, r1, #1
 80041a4:	468c      	mov	ip, r1
 80041a6:	44bc      	add	ip, r7
 80041a8:	4463      	add	r3, ip
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	4b95      	ldr	r3, [pc, #596]	; (8004404 <DALI_ProcessRxData+0x24e0>)
 80041ae:	22e4      	movs	r2, #228	; 0xe4
 80041b0:	0052      	lsls	r2, r2, #1
 80041b2:	4694      	mov	ip, r2
 80041b4:	44bc      	add	ip, r7
 80041b6:	4463      	add	r3, ip
 80041b8:	2201      	movs	r2, #1
 80041ba:	711a      	strb	r2, [r3, #4]
 80041bc:	4b91      	ldr	r3, [pc, #580]	; (8004404 <DALI_ProcessRxData+0x24e0>)
 80041be:	22e4      	movs	r2, #228	; 0xe4
 80041c0:	0052      	lsls	r2, r2, #1
 80041c2:	4694      	mov	ip, r2
 80041c4:	44bc      	add	ip, r7
 80041c6:	4463      	add	r3, ip
 80041c8:	2200      	movs	r2, #0
 80041ca:	715a      	strb	r2, [r3, #5]
 80041cc:	4b8d      	ldr	r3, [pc, #564]	; (8004404 <DALI_ProcessRxData+0x24e0>)
 80041ce:	22e4      	movs	r2, #228	; 0xe4
 80041d0:	0052      	lsls	r2, r2, #1
 80041d2:	4694      	mov	ip, r2
 80041d4:	44bc      	add	ip, r7
 80041d6:	4463      	add	r3, ip
 80041d8:	2201      	movs	r2, #1
 80041da:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 80041dc:	4b89      	ldr	r3, [pc, #548]	; (8004404 <DALI_ProcessRxData+0x24e0>)
 80041de:	22e4      	movs	r2, #228	; 0xe4
 80041e0:	0052      	lsls	r2, r2, #1
 80041e2:	4694      	mov	ip, r2
 80041e4:	44bc      	add	ip, r7
 80041e6:	4463      	add	r3, ip
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	6859      	ldr	r1, [r3, #4]
 80041ec:	f7fd faa0 	bl	8001730 <DALISendData>
						}
							break;
 80041f0:	e0d5      	b.n	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_INSTANCE_ERROR:
						{
							if(instanceError != 0)
 80041f2:	4b85      	ldr	r3, [pc, #532]	; (8004408 <DALI_ProcessRxData+0x24e4>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d100      	bne.n	80041fc <DALI_ProcessRxData+0x22d8>
 80041fa:	e0cf      	b.n	800439c <DALI_ProcessRxData+0x2478>
							{
								DALITxData_t data = {instanceError, 1, 0, 1};
 80041fc:	4b82      	ldr	r3, [pc, #520]	; (8004408 <DALI_ProcessRxData+0x24e4>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	001a      	movs	r2, r3
 8004202:	4b82      	ldr	r3, [pc, #520]	; (800440c <DALI_ProcessRxData+0x24e8>)
 8004204:	21e4      	movs	r1, #228	; 0xe4
 8004206:	0049      	lsls	r1, r1, #1
 8004208:	468c      	mov	ip, r1
 800420a:	44bc      	add	ip, r7
 800420c:	4463      	add	r3, ip
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	4b7e      	ldr	r3, [pc, #504]	; (800440c <DALI_ProcessRxData+0x24e8>)
 8004212:	22e4      	movs	r2, #228	; 0xe4
 8004214:	0052      	lsls	r2, r2, #1
 8004216:	4694      	mov	ip, r2
 8004218:	44bc      	add	ip, r7
 800421a:	4463      	add	r3, ip
 800421c:	2201      	movs	r2, #1
 800421e:	711a      	strb	r2, [r3, #4]
 8004220:	4b7a      	ldr	r3, [pc, #488]	; (800440c <DALI_ProcessRxData+0x24e8>)
 8004222:	22e4      	movs	r2, #228	; 0xe4
 8004224:	0052      	lsls	r2, r2, #1
 8004226:	4694      	mov	ip, r2
 8004228:	44bc      	add	ip, r7
 800422a:	4463      	add	r3, ip
 800422c:	2200      	movs	r2, #0
 800422e:	715a      	strb	r2, [r3, #5]
 8004230:	4b76      	ldr	r3, [pc, #472]	; (800440c <DALI_ProcessRxData+0x24e8>)
 8004232:	22e4      	movs	r2, #228	; 0xe4
 8004234:	0052      	lsls	r2, r2, #1
 8004236:	4694      	mov	ip, r2
 8004238:	44bc      	add	ip, r7
 800423a:	4463      	add	r3, ip
 800423c:	2201      	movs	r2, #1
 800423e:	719a      	strb	r2, [r3, #6]
								DALISendData(data);
 8004240:	4b72      	ldr	r3, [pc, #456]	; (800440c <DALI_ProcessRxData+0x24e8>)
 8004242:	22e4      	movs	r2, #228	; 0xe4
 8004244:	0052      	lsls	r2, r2, #1
 8004246:	4694      	mov	ip, r2
 8004248:	44bc      	add	ip, r7
 800424a:	4463      	add	r3, ip
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	6859      	ldr	r1, [r3, #4]
 8004250:	f7fd fa6e 	bl	8001730 <DALISendData>
							}
						}
							break;
 8004254:	e0a2      	b.n	800439c <DALI_ProcessRxData+0x2478>
						case QUERY_REPORT_TIMER:
						{
							DALITxData_t data = {tReport, 1, 0, 1};
 8004256:	4b6e      	ldr	r3, [pc, #440]	; (8004410 <DALI_ProcessRxData+0x24ec>)
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	001a      	movs	r2, r3
 800425c:	4b6d      	ldr	r3, [pc, #436]	; (8004414 <DALI_ProcessRxData+0x24f0>)
 800425e:	21e4      	movs	r1, #228	; 0xe4
 8004260:	0049      	lsls	r1, r1, #1
 8004262:	468c      	mov	ip, r1
 8004264:	44bc      	add	ip, r7
 8004266:	4463      	add	r3, ip
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	4b6a      	ldr	r3, [pc, #424]	; (8004414 <DALI_ProcessRxData+0x24f0>)
 800426c:	22e4      	movs	r2, #228	; 0xe4
 800426e:	0052      	lsls	r2, r2, #1
 8004270:	4694      	mov	ip, r2
 8004272:	44bc      	add	ip, r7
 8004274:	4463      	add	r3, ip
 8004276:	2201      	movs	r2, #1
 8004278:	711a      	strb	r2, [r3, #4]
 800427a:	4b66      	ldr	r3, [pc, #408]	; (8004414 <DALI_ProcessRxData+0x24f0>)
 800427c:	22e4      	movs	r2, #228	; 0xe4
 800427e:	0052      	lsls	r2, r2, #1
 8004280:	4694      	mov	ip, r2
 8004282:	44bc      	add	ip, r7
 8004284:	4463      	add	r3, ip
 8004286:	2200      	movs	r2, #0
 8004288:	715a      	strb	r2, [r3, #5]
 800428a:	4b62      	ldr	r3, [pc, #392]	; (8004414 <DALI_ProcessRxData+0x24f0>)
 800428c:	22e4      	movs	r2, #228	; 0xe4
 800428e:	0052      	lsls	r2, r2, #1
 8004290:	4694      	mov	ip, r2
 8004292:	44bc      	add	ip, r7
 8004294:	4463      	add	r3, ip
 8004296:	2201      	movs	r2, #1
 8004298:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 800429a:	4b5e      	ldr	r3, [pc, #376]	; (8004414 <DALI_ProcessRxData+0x24f0>)
 800429c:	22e4      	movs	r2, #228	; 0xe4
 800429e:	0052      	lsls	r2, r2, #1
 80042a0:	4694      	mov	ip, r2
 80042a2:	44bc      	add	ip, r7
 80042a4:	4463      	add	r3, ip
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
 80042aa:	f7fd fa41 	bl	8001730 <DALISendData>
						}
							break;
 80042ae:	e076      	b.n	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_HYSTERESIS:
						{
							DALITxData_t data = {hysteresis, 1, 0, 1};
 80042b0:	4b59      	ldr	r3, [pc, #356]	; (8004418 <DALI_ProcessRxData+0x24f4>)
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	001a      	movs	r2, r3
 80042b6:	4b59      	ldr	r3, [pc, #356]	; (800441c <DALI_ProcessRxData+0x24f8>)
 80042b8:	21e4      	movs	r1, #228	; 0xe4
 80042ba:	0049      	lsls	r1, r1, #1
 80042bc:	468c      	mov	ip, r1
 80042be:	44bc      	add	ip, r7
 80042c0:	4463      	add	r3, ip
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	4b55      	ldr	r3, [pc, #340]	; (800441c <DALI_ProcessRxData+0x24f8>)
 80042c6:	22e4      	movs	r2, #228	; 0xe4
 80042c8:	0052      	lsls	r2, r2, #1
 80042ca:	4694      	mov	ip, r2
 80042cc:	44bc      	add	ip, r7
 80042ce:	4463      	add	r3, ip
 80042d0:	2201      	movs	r2, #1
 80042d2:	711a      	strb	r2, [r3, #4]
 80042d4:	4b51      	ldr	r3, [pc, #324]	; (800441c <DALI_ProcessRxData+0x24f8>)
 80042d6:	22e4      	movs	r2, #228	; 0xe4
 80042d8:	0052      	lsls	r2, r2, #1
 80042da:	4694      	mov	ip, r2
 80042dc:	44bc      	add	ip, r7
 80042de:	4463      	add	r3, ip
 80042e0:	2200      	movs	r2, #0
 80042e2:	715a      	strb	r2, [r3, #5]
 80042e4:	4b4d      	ldr	r3, [pc, #308]	; (800441c <DALI_ProcessRxData+0x24f8>)
 80042e6:	22e4      	movs	r2, #228	; 0xe4
 80042e8:	0052      	lsls	r2, r2, #1
 80042ea:	4694      	mov	ip, r2
 80042ec:	44bc      	add	ip, r7
 80042ee:	4463      	add	r3, ip
 80042f0:	2201      	movs	r2, #1
 80042f2:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 80042f4:	4b49      	ldr	r3, [pc, #292]	; (800441c <DALI_ProcessRxData+0x24f8>)
 80042f6:	22e4      	movs	r2, #228	; 0xe4
 80042f8:	0052      	lsls	r2, r2, #1
 80042fa:	4694      	mov	ip, r2
 80042fc:	44bc      	add	ip, r7
 80042fe:	4463      	add	r3, ip
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	6859      	ldr	r1, [r3, #4]
 8004304:	f7fd fa14 	bl	8001730 <DALISendData>
						}
							break;
 8004308:	e049      	b.n	800439e <DALI_ProcessRxData+0x247a>
						case QUERY_HYSTERESIS_MIN:
						{
							DALITxData_t data = {hysteresisMin, 1, 0, 1};
 800430a:	4b3d      	ldr	r3, [pc, #244]	; (8004400 <DALI_ProcessRxData+0x24dc>)
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	001a      	movs	r2, r3
 8004310:	4b43      	ldr	r3, [pc, #268]	; (8004420 <DALI_ProcessRxData+0x24fc>)
 8004312:	21e4      	movs	r1, #228	; 0xe4
 8004314:	0049      	lsls	r1, r1, #1
 8004316:	468c      	mov	ip, r1
 8004318:	44bc      	add	ip, r7
 800431a:	4463      	add	r3, ip
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	4b40      	ldr	r3, [pc, #256]	; (8004420 <DALI_ProcessRxData+0x24fc>)
 8004320:	22e4      	movs	r2, #228	; 0xe4
 8004322:	0052      	lsls	r2, r2, #1
 8004324:	4694      	mov	ip, r2
 8004326:	44bc      	add	ip, r7
 8004328:	4463      	add	r3, ip
 800432a:	2201      	movs	r2, #1
 800432c:	711a      	strb	r2, [r3, #4]
 800432e:	4b3c      	ldr	r3, [pc, #240]	; (8004420 <DALI_ProcessRxData+0x24fc>)
 8004330:	22e4      	movs	r2, #228	; 0xe4
 8004332:	0052      	lsls	r2, r2, #1
 8004334:	4694      	mov	ip, r2
 8004336:	44bc      	add	ip, r7
 8004338:	4463      	add	r3, ip
 800433a:	2200      	movs	r2, #0
 800433c:	715a      	strb	r2, [r3, #5]
 800433e:	4b38      	ldr	r3, [pc, #224]	; (8004420 <DALI_ProcessRxData+0x24fc>)
 8004340:	22e4      	movs	r2, #228	; 0xe4
 8004342:	0052      	lsls	r2, r2, #1
 8004344:	4694      	mov	ip, r2
 8004346:	44bc      	add	ip, r7
 8004348:	4463      	add	r3, ip
 800434a:	2201      	movs	r2, #1
 800434c:	719a      	strb	r2, [r3, #6]
							DALISendData(data);
 800434e:	4b34      	ldr	r3, [pc, #208]	; (8004420 <DALI_ProcessRxData+0x24fc>)
 8004350:	22e4      	movs	r2, #228	; 0xe4
 8004352:	0052      	lsls	r2, r2, #1
 8004354:	4694      	mov	ip, r2
 8004356:	44bc      	add	ip, r7
 8004358:	4463      	add	r3, ip
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	6859      	ldr	r1, [r3, #4]
 800435e:	f7fd f9e7 	bl	8001730 <DALISendData>
						}
							break;
 8004362:	e01c      	b.n	800439e <DALI_ProcessRxData+0x247a>
							break;
 8004364:	46c0      	nop			; (mov r8, r8)
 8004366:	e01a      	b.n	800439e <DALI_ProcessRxData+0x247a>
							break;
 8004368:	46c0      	nop			; (mov r8, r8)
 800436a:	e018      	b.n	800439e <DALI_ProcessRxData+0x247a>
							break;
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	e016      	b.n	800439e <DALI_ProcessRxData+0x247a>
							break;
 8004370:	46c0      	nop			; (mov r8, r8)
 8004372:	e014      	b.n	800439e <DALI_ProcessRxData+0x247a>
							break;
 8004374:	46c0      	nop			; (mov r8, r8)
 8004376:	e012      	b.n	800439e <DALI_ProcessRxData+0x247a>
							break;
 8004378:	46c0      	nop			; (mov r8, r8)
 800437a:	e010      	b.n	800439e <DALI_ProcessRxData+0x247a>
							break;
 800437c:	46c0      	nop			; (mov r8, r8)
 800437e:	e00e      	b.n	800439e <DALI_ProcessRxData+0x247a>
							break;
 8004380:	46c0      	nop			; (mov r8, r8)
 8004382:	e00c      	b.n	800439e <DALI_ProcessRxData+0x247a>
							break;
 8004384:	46c0      	nop			; (mov r8, r8)
 8004386:	e00a      	b.n	800439e <DALI_ProcessRxData+0x247a>
							break;
 8004388:	46c0      	nop			; (mov r8, r8)
 800438a:	e008      	b.n	800439e <DALI_ProcessRxData+0x247a>
							break;
 800438c:	46c0      	nop			; (mov r8, r8)
 800438e:	e006      	b.n	800439e <DALI_ProcessRxData+0x247a>
							break;
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	e004      	b.n	800439e <DALI_ProcessRxData+0x247a>
							break;
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	e002      	b.n	800439e <DALI_ProcessRxData+0x247a>
							break;
 8004398:	46c0      	nop			; (mov r8, r8)
 800439a:	e000      	b.n	800439e <DALI_ProcessRxData+0x247a>
							break;
 800439c:	46c0      	nop			; (mov r8, r8)
						}
					}
					if(memory_related == 0)
 800439e:	23c8      	movs	r3, #200	; 0xc8
 80043a0:	33ff      	adds	r3, #255	; 0xff
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10b      	bne.n	80043c2 <DALI_ProcessRxData+0x249e>
					{
						writeEnableState = DISABLED;
 80043aa:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <DALI_ProcessRxData+0x2500>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	701a      	strb	r2, [r3, #0]
 80043b0:	e007      	b.n	80043c2 <DALI_ProcessRxData+0x249e>
#endif
				}
			}
			else // Backward frame
			{
				backFrame = (msg_ptr->frame) & 0xFF;
 80043b2:	23dc      	movs	r3, #220	; 0xdc
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <DALI_ProcessRxData+0x2504>)
 80043c0:	701a      	strb	r2, [r3, #0]
			}
		}
		previousFrame = (isSecondFrame) ? 0 : frame;
 80043c2:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <DALI_ProcessRxData+0x24d8>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d104      	bne.n	80043d4 <DALI_ProcessRxData+0x24b0>
 80043ca:	23d4      	movs	r3, #212	; 0xd4
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	e000      	b.n	80043d6 <DALI_ProcessRxData+0x24b2>
 80043d4:	2200      	movs	r2, #0
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <DALI_ProcessRxData+0x24c8>)
 80043d8:	601a      	str	r2, [r3, #0]
		isSecondFrame = 0;
 80043da:	4b08      	ldr	r3, [pc, #32]	; (80043fc <DALI_ProcessRxData+0x24d8>)
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
		return;
 80043e0:	46c0      	nop			; (mov r8, r8)
 80043e2:	e000      	b.n	80043e6 <DALI_ProcessRxData+0x24c2>
						return;
 80043e4:	46c0      	nop			; (mov r8, r8)
	}
}
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b072      	add	sp, #456	; 0x1c8
 80043ea:	bdb0      	pop	{r4, r5, r7, pc}
 80043ec:	20000888 	.word	0x20000888
 80043f0:	200000b4 	.word	0x200000b4
 80043f4:	20000896 	.word	0x20000896
 80043f8:	2000000d 	.word	0x2000000d
 80043fc:	200000ce 	.word	0x200000ce
 8004400:	2000000e 	.word	0x2000000e
 8004404:	fffffe58 	.word	0xfffffe58
 8004408:	200000be 	.word	0x200000be
 800440c:	fffffe50 	.word	0xfffffe50
 8004410:	200008b8 	.word	0x200008b8
 8004414:	fffffe48 	.word	0xfffffe48
 8004418:	20000010 	.word	0x20000010
 800441c:	fffffe40 	.word	0xfffffe40
 8004420:	fffffe38 	.word	0xfffffe38
 8004424:	200000b8 	.word	0x200000b8
 8004428:	200000d3 	.word	0x200000d3

0800442c <DALI_SendEvent>:

void DALI_SendEvent()
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
	if((applicationActive == FALSE) && (quiescentMode == FALSE) && (dead_time == 0) && (eventFilter % 2 == 1) && (instanceActive == TRUE) && (instanceError == FALSE))
 8004432:	4bbd      	ldr	r3, [pc, #756]	; (8004728 <DALI_SendEvent+0x2fc>)
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d000      	beq.n	800443c <DALI_SendEvent+0x10>
 800443a:	e171      	b.n	8004720 <DALI_SendEvent+0x2f4>
 800443c:	4bbb      	ldr	r3, [pc, #748]	; (800472c <DALI_SendEvent+0x300>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d000      	beq.n	8004446 <DALI_SendEvent+0x1a>
 8004444:	e16c      	b.n	8004720 <DALI_SendEvent+0x2f4>
 8004446:	4bba      	ldr	r3, [pc, #744]	; (8004730 <DALI_SendEvent+0x304>)
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d000      	beq.n	8004452 <DALI_SendEvent+0x26>
 8004450:	e166      	b.n	8004720 <DALI_SendEvent+0x2f4>
 8004452:	4bb8      	ldr	r3, [pc, #736]	; (8004734 <DALI_SendEvent+0x308>)
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	2201      	movs	r2, #1
 8004458:	4013      	ands	r3, r2
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d100      	bne.n	8004462 <DALI_SendEvent+0x36>
 8004460:	e15e      	b.n	8004720 <DALI_SendEvent+0x2f4>
 8004462:	4bb5      	ldr	r3, [pc, #724]	; (8004738 <DALI_SendEvent+0x30c>)
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d000      	beq.n	800446c <DALI_SendEvent+0x40>
 800446a:	e159      	b.n	8004720 <DALI_SendEvent+0x2f4>
 800446c:	4bb3      	ldr	r3, [pc, #716]	; (800473c <DALI_SendEvent+0x310>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d000      	beq.n	8004476 <DALI_SendEvent+0x4a>
 8004474:	e154      	b.n	8004720 <DALI_SendEvent+0x2f4>
	{
		if ((((eventScheme == 1) || (eventScheme == 2)) && (shortAddress == 0xFF)) \
 8004476:	4bb2      	ldr	r3, [pc, #712]	; (8004740 <DALI_SendEvent+0x314>)
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d003      	beq.n	8004486 <DALI_SendEvent+0x5a>
 800447e:	4bb0      	ldr	r3, [pc, #704]	; (8004740 <DALI_SendEvent+0x314>)
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d103      	bne.n	800448e <DALI_SendEvent+0x62>
 8004486:	4baf      	ldr	r3, [pc, #700]	; (8004744 <DALI_SendEvent+0x318>)
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	2bff      	cmp	r3, #255	; 0xff
 800448c:	d00f      	beq.n	80044ae <DALI_SendEvent+0x82>
				|| ((eventScheme == 3) && (deviceGroups == 0)) || ((eventScheme == 4) && (instanceGroup0 == 0xFF)))
 800448e:	4bac      	ldr	r3, [pc, #688]	; (8004740 <DALI_SendEvent+0x314>)
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	2b03      	cmp	r3, #3
 8004494:	d103      	bne.n	800449e <DALI_SendEvent+0x72>
 8004496:	4bac      	ldr	r3, [pc, #688]	; (8004748 <DALI_SendEvent+0x31c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d007      	beq.n	80044ae <DALI_SendEvent+0x82>
 800449e:	4ba8      	ldr	r3, [pc, #672]	; (8004740 <DALI_SendEvent+0x314>)
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d108      	bne.n	80044b8 <DALI_SendEvent+0x8c>
 80044a6:	4ba9      	ldr	r3, [pc, #676]	; (800474c <DALI_SendEvent+0x320>)
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	2bff      	cmp	r3, #255	; 0xff
 80044ac:	d104      	bne.n	80044b8 <DALI_SendEvent+0x8c>
		{
			eventScheme = 0;
 80044ae:	4ba4      	ldr	r3, [pc, #656]	; (8004740 <DALI_SendEvent+0x314>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	801a      	strh	r2, [r3, #0]
			DALI_Save_Variable();
 80044b4:	f000 fa1e 	bl	80048f4 <DALI_Save_Variable>
		}

		uint32_t frame;
		switch(eventScheme)
 80044b8:	4ba1      	ldr	r3, [pc, #644]	; (8004740 <DALI_SendEvent+0x314>)
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d900      	bls.n	80044c2 <DALI_SendEvent+0x96>
 80044c0:	e093      	b.n	80045ea <DALI_SendEvent+0x1be>
 80044c2:	009a      	lsls	r2, r3, #2
 80044c4:	4ba2      	ldr	r3, [pc, #648]	; (8004750 <DALI_SendEvent+0x324>)
 80044c6:	18d3      	adds	r3, r2, r3
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	469f      	mov	pc, r3
		{
		case 0:
			frame = 0x800000 | ((instanceType << 17) & 0x3E0000) | 0x8000 | ((instanceNumber << 10) & 0x7C00) | ((inputValue >> 6) & 0x3FF);
 80044cc:	4ba1      	ldr	r3, [pc, #644]	; (8004754 <DALI_SendEvent+0x328>)
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	045a      	lsls	r2, r3, #17
 80044d2:	23f8      	movs	r3, #248	; 0xf8
 80044d4:	039b      	lsls	r3, r3, #14
 80044d6:	4013      	ands	r3, r2
 80044d8:	4a9f      	ldr	r2, [pc, #636]	; (8004758 <DALI_SendEvent+0x32c>)
 80044da:	431a      	orrs	r2, r3
 80044dc:	4b9f      	ldr	r3, [pc, #636]	; (800475c <DALI_SendEvent+0x330>)
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	0299      	lsls	r1, r3, #10
 80044e2:	23f8      	movs	r3, #248	; 0xf8
 80044e4:	01db      	lsls	r3, r3, #7
 80044e6:	400b      	ands	r3, r1
 80044e8:	431a      	orrs	r2, r3
 80044ea:	4b9d      	ldr	r3, [pc, #628]	; (8004760 <DALI_SendEvent+0x334>)
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	099b      	lsrs	r3, r3, #6
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	059b      	lsls	r3, r3, #22
 80044f4:	0d9b      	lsrs	r3, r3, #22
 80044f6:	4313      	orrs	r3, r2
 80044f8:	61fb      	str	r3, [r7, #28]
			break;
 80044fa:	e076      	b.n	80045ea <DALI_SendEvent+0x1be>
		case 1:
			frame = ((shortAddress << 17) & 0x7E0000) | ((instanceType << 10) & 0x7C00) | ((inputValue >> 6) & 0x3FF);
 80044fc:	4b91      	ldr	r3, [pc, #580]	; (8004744 <DALI_SendEvent+0x318>)
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	045a      	lsls	r2, r3, #17
 8004502:	23fc      	movs	r3, #252	; 0xfc
 8004504:	03db      	lsls	r3, r3, #15
 8004506:	401a      	ands	r2, r3
 8004508:	4b92      	ldr	r3, [pc, #584]	; (8004754 <DALI_SendEvent+0x328>)
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	0299      	lsls	r1, r3, #10
 800450e:	23f8      	movs	r3, #248	; 0xf8
 8004510:	01db      	lsls	r3, r3, #7
 8004512:	400b      	ands	r3, r1
 8004514:	431a      	orrs	r2, r3
 8004516:	4b92      	ldr	r3, [pc, #584]	; (8004760 <DALI_SendEvent+0x334>)
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	099b      	lsrs	r3, r3, #6
 800451c:	b29b      	uxth	r3, r3
 800451e:	059b      	lsls	r3, r3, #22
 8004520:	0d9b      	lsrs	r3, r3, #22
 8004522:	4313      	orrs	r3, r2
 8004524:	61fb      	str	r3, [r7, #28]
			break;
 8004526:	e060      	b.n	80045ea <DALI_SendEvent+0x1be>
		case 2:
			frame = ((shortAddress << 17) & 0x7E0000) | 0x8000 | ((instanceNumber << 10) & 0x7C00) | ((inputValue >> 6) & 0x3FF);
 8004528:	4b86      	ldr	r3, [pc, #536]	; (8004744 <DALI_SendEvent+0x318>)
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	045a      	lsls	r2, r3, #17
 800452e:	23fc      	movs	r3, #252	; 0xfc
 8004530:	03db      	lsls	r3, r3, #15
 8004532:	4013      	ands	r3, r2
 8004534:	2280      	movs	r2, #128	; 0x80
 8004536:	0212      	lsls	r2, r2, #8
 8004538:	431a      	orrs	r2, r3
 800453a:	4b88      	ldr	r3, [pc, #544]	; (800475c <DALI_SendEvent+0x330>)
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	0299      	lsls	r1, r3, #10
 8004540:	23f8      	movs	r3, #248	; 0xf8
 8004542:	01db      	lsls	r3, r3, #7
 8004544:	400b      	ands	r3, r1
 8004546:	431a      	orrs	r2, r3
 8004548:	4b85      	ldr	r3, [pc, #532]	; (8004760 <DALI_SendEvent+0x334>)
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	099b      	lsrs	r3, r3, #6
 800454e:	b29b      	uxth	r3, r3
 8004550:	059b      	lsls	r3, r3, #22
 8004552:	0d9b      	lsrs	r3, r3, #22
 8004554:	4313      	orrs	r3, r2
 8004556:	61fb      	str	r3, [r7, #28]
			break;
 8004558:	e047      	b.n	80045ea <DALI_SendEvent+0x1be>
		case 3:;
			uint32_t temp = deviceGroups;
 800455a:	4b7b      	ldr	r3, [pc, #492]	; (8004748 <DALI_SendEvent+0x31c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	61bb      	str	r3, [r7, #24]
			uint8_t count = 1;
 8004560:	2317      	movs	r3, #23
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	2201      	movs	r2, #1
 8004566:	701a      	strb	r2, [r3, #0]
			// Find the lowest device group number of membership of the containing device
			while(temp % 2 == 0)
 8004568:	e008      	b.n	800457c <DALI_SendEvent+0x150>
			{
				temp = temp >> 1;
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	085b      	lsrs	r3, r3, #1
 800456e:	61bb      	str	r3, [r7, #24]
				count++;
 8004570:	2117      	movs	r1, #23
 8004572:	187b      	adds	r3, r7, r1
 8004574:	781a      	ldrb	r2, [r3, #0]
 8004576:	187b      	adds	r3, r7, r1
 8004578:	3201      	adds	r2, #1
 800457a:	701a      	strb	r2, [r3, #0]
			while(temp % 2 == 0)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2201      	movs	r2, #1
 8004580:	4013      	ands	r3, r2
 8004582:	d0f2      	beq.n	800456a <DALI_SendEvent+0x13e>
			}
			frame = 0x800000 | ((count << 17) & 0x3E0000) | ((instanceType << 10) & 0x7C00) | ((inputValue >> 6) & 0x3FF);
 8004584:	2317      	movs	r3, #23
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	045a      	lsls	r2, r3, #17
 800458c:	23f8      	movs	r3, #248	; 0xf8
 800458e:	039b      	lsls	r3, r3, #14
 8004590:	4013      	ands	r3, r2
 8004592:	2280      	movs	r2, #128	; 0x80
 8004594:	0412      	lsls	r2, r2, #16
 8004596:	431a      	orrs	r2, r3
 8004598:	4b6e      	ldr	r3, [pc, #440]	; (8004754 <DALI_SendEvent+0x328>)
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	0299      	lsls	r1, r3, #10
 800459e:	23f8      	movs	r3, #248	; 0xf8
 80045a0:	01db      	lsls	r3, r3, #7
 80045a2:	400b      	ands	r3, r1
 80045a4:	431a      	orrs	r2, r3
 80045a6:	4b6e      	ldr	r3, [pc, #440]	; (8004760 <DALI_SendEvent+0x334>)
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	099b      	lsrs	r3, r3, #6
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	059b      	lsls	r3, r3, #22
 80045b0:	0d9b      	lsrs	r3, r3, #22
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61fb      	str	r3, [r7, #28]
			break;
 80045b6:	e018      	b.n	80045ea <DALI_SendEvent+0x1be>
		case 4:
			frame = 0xC00000 | ((instanceGroup0 << 17) & 0x3E0000) | ((instanceType << 10) & 0x7C00) | ((inputValue >> 6) & 0x3FF);
 80045b8:	4b64      	ldr	r3, [pc, #400]	; (800474c <DALI_SendEvent+0x320>)
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	045a      	lsls	r2, r3, #17
 80045be:	23f8      	movs	r3, #248	; 0xf8
 80045c0:	039b      	lsls	r3, r3, #14
 80045c2:	4013      	ands	r3, r2
 80045c4:	22c0      	movs	r2, #192	; 0xc0
 80045c6:	0412      	lsls	r2, r2, #16
 80045c8:	431a      	orrs	r2, r3
 80045ca:	4b62      	ldr	r3, [pc, #392]	; (8004754 <DALI_SendEvent+0x328>)
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	0299      	lsls	r1, r3, #10
 80045d0:	23f8      	movs	r3, #248	; 0xf8
 80045d2:	01db      	lsls	r3, r3, #7
 80045d4:	400b      	ands	r3, r1
 80045d6:	431a      	orrs	r2, r3
 80045d8:	4b61      	ldr	r3, [pc, #388]	; (8004760 <DALI_SendEvent+0x334>)
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	099b      	lsrs	r3, r3, #6
 80045de:	b29b      	uxth	r3, r3
 80045e0:	059b      	lsls	r3, r3, #22
 80045e2:	0d9b      	lsrs	r3, r3, #22
 80045e4:	4313      	orrs	r3, r2
 80045e6:	61fb      	str	r3, [r7, #28]
			break;
 80045e8:	46c0      	nop			; (mov r8, r8)
		}

		if((inputValue > hysteresisBandHigh) || (inputValue < hysteresisBandLow))
 80045ea:	4b5d      	ldr	r3, [pc, #372]	; (8004760 <DALI_SendEvent+0x334>)
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	001a      	movs	r2, r3
 80045f0:	4b5c      	ldr	r3, [pc, #368]	; (8004764 <DALI_SendEvent+0x338>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d806      	bhi.n	8004606 <DALI_SendEvent+0x1da>
 80045f8:	4b59      	ldr	r3, [pc, #356]	; (8004760 <DALI_SendEvent+0x334>)
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	001a      	movs	r2, r3
 80045fe:	4b5a      	ldr	r3, [pc, #360]	; (8004768 <DALI_SendEvent+0x33c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d263      	bcs.n	80046ce <DALI_SendEvent+0x2a2>
		{
			DALITxData_t data = {frame, 0, 0, 4};
 8004606:	210c      	movs	r1, #12
 8004608:	187b      	adds	r3, r7, r1
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	187b      	adds	r3, r7, r1
 8004610:	2200      	movs	r2, #0
 8004612:	711a      	strb	r2, [r3, #4]
 8004614:	187b      	adds	r3, r7, r1
 8004616:	2200      	movs	r2, #0
 8004618:	715a      	strb	r2, [r3, #5]
 800461a:	187b      	adds	r3, r7, r1
 800461c:	2204      	movs	r2, #4
 800461e:	719a      	strb	r2, [r3, #6]
			DALISendData(data);
 8004620:	187b      	adds	r3, r7, r1
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	6859      	ldr	r1, [r3, #4]
 8004626:	f7fd f883 	bl	8001730 <DALISendData>
			hysteresisBand = (hysteresisMin > (hysteresis * inputValue / 100)) ? hysteresisMin : (hysteresis * inputValue / 100);
 800462a:	4b50      	ldr	r3, [pc, #320]	; (800476c <DALI_SendEvent+0x340>)
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	001a      	movs	r2, r3
 8004630:	4b4b      	ldr	r3, [pc, #300]	; (8004760 <DALI_SendEvent+0x334>)
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	4353      	muls	r3, r2
 8004636:	2164      	movs	r1, #100	; 0x64
 8004638:	0018      	movs	r0, r3
 800463a:	f7fb fdef 	bl	800021c <__divsi3>
 800463e:	0003      	movs	r3, r0
 8004640:	0019      	movs	r1, r3
 8004642:	4b4b      	ldr	r3, [pc, #300]	; (8004770 <DALI_SendEvent+0x344>)
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	001a      	movs	r2, r3
 8004648:	000b      	movs	r3, r1
 800464a:	4293      	cmp	r3, r2
 800464c:	da00      	bge.n	8004650 <DALI_SendEvent+0x224>
 800464e:	0013      	movs	r3, r2
 8004650:	001a      	movs	r2, r3
 8004652:	4b48      	ldr	r3, [pc, #288]	; (8004774 <DALI_SendEvent+0x348>)
 8004654:	601a      	str	r2, [r3, #0]

			if(inputValue > hysteresisBandHigh)
 8004656:	4b42      	ldr	r3, [pc, #264]	; (8004760 <DALI_SendEvent+0x334>)
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	001a      	movs	r2, r3
 800465c:	4b41      	ldr	r3, [pc, #260]	; (8004764 <DALI_SendEvent+0x338>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d916      	bls.n	8004692 <DALI_SendEvent+0x266>
			{
				hysteresisBandHigh = inputValue;
 8004664:	4b3e      	ldr	r3, [pc, #248]	; (8004760 <DALI_SendEvent+0x334>)
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	001a      	movs	r2, r3
 800466a:	4b3e      	ldr	r3, [pc, #248]	; (8004764 <DALI_SendEvent+0x338>)
 800466c:	601a      	str	r2, [r3, #0]
				hysteresisBandLow = (inputValue > hysteresisBand)? (inputValue - hysteresisBand) : 0;
 800466e:	4b3c      	ldr	r3, [pc, #240]	; (8004760 <DALI_SendEvent+0x334>)
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	001a      	movs	r2, r3
 8004674:	4b3f      	ldr	r3, [pc, #252]	; (8004774 <DALI_SendEvent+0x348>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d906      	bls.n	800468a <DALI_SendEvent+0x25e>
 800467c:	4b38      	ldr	r3, [pc, #224]	; (8004760 <DALI_SendEvent+0x334>)
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	001a      	movs	r2, r3
 8004682:	4b3c      	ldr	r3, [pc, #240]	; (8004774 <DALI_SendEvent+0x348>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	1ad2      	subs	r2, r2, r3
 8004688:	e000      	b.n	800468c <DALI_SendEvent+0x260>
 800468a:	2200      	movs	r2, #0
 800468c:	4b36      	ldr	r3, [pc, #216]	; (8004768 <DALI_SendEvent+0x33c>)
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	e00c      	b.n	80046ac <DALI_SendEvent+0x280>
			}
			else
			{
				hysteresisBandLow = inputValue;
 8004692:	4b33      	ldr	r3, [pc, #204]	; (8004760 <DALI_SendEvent+0x334>)
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	001a      	movs	r2, r3
 8004698:	4b33      	ldr	r3, [pc, #204]	; (8004768 <DALI_SendEvent+0x33c>)
 800469a:	601a      	str	r2, [r3, #0]
				hysteresisBandHigh = inputValue + hysteresisBand;
 800469c:	4b30      	ldr	r3, [pc, #192]	; (8004760 <DALI_SendEvent+0x334>)
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	001a      	movs	r2, r3
 80046a2:	4b34      	ldr	r3, [pc, #208]	; (8004774 <DALI_SendEvent+0x348>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	18d2      	adds	r2, r2, r3
 80046a8:	4b2e      	ldr	r3, [pc, #184]	; (8004764 <DALI_SendEvent+0x338>)
 80046aa:	601a      	str	r2, [r3, #0]
			}
			report_time = tReport*1000;
 80046ac:	4b32      	ldr	r3, [pc, #200]	; (8004778 <DALI_SendEvent+0x34c>)
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	22fa      	movs	r2, #250	; 0xfa
 80046b2:	0092      	lsls	r2, r2, #2
 80046b4:	4353      	muls	r3, r2
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	4b30      	ldr	r3, [pc, #192]	; (800477c <DALI_SendEvent+0x350>)
 80046ba:	801a      	strh	r2, [r3, #0]
			dead_time = tDeadtime*50;
 80046bc:	4b30      	ldr	r3, [pc, #192]	; (8004780 <DALI_SendEvent+0x354>)
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	2232      	movs	r2, #50	; 0x32
 80046c2:	4353      	muls	r3, r2
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <DALI_SendEvent+0x304>)
 80046c8:	801a      	strh	r2, [r3, #0]
		{
 80046ca:	46c0      	nop			; (mov r8, r8)
			DALISendData(data);
			report_time = tReport*1000;
			dead_time = tDeadtime*50;
		}
	}
}
 80046cc:	e028      	b.n	8004720 <DALI_SendEvent+0x2f4>
		else if((report_time == 0) && (tReport != 0))
 80046ce:	4b2b      	ldr	r3, [pc, #172]	; (800477c <DALI_SendEvent+0x350>)
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d123      	bne.n	8004720 <DALI_SendEvent+0x2f4>
 80046d8:	4b27      	ldr	r3, [pc, #156]	; (8004778 <DALI_SendEvent+0x34c>)
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01f      	beq.n	8004720 <DALI_SendEvent+0x2f4>
			DALITxData_t data = {frame, 0, 0, 4};
 80046e0:	1d3b      	adds	r3, r7, #4
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	1d3b      	adds	r3, r7, #4
 80046e8:	2200      	movs	r2, #0
 80046ea:	711a      	strb	r2, [r3, #4]
 80046ec:	1d3b      	adds	r3, r7, #4
 80046ee:	2200      	movs	r2, #0
 80046f0:	715a      	strb	r2, [r3, #5]
 80046f2:	1d3b      	adds	r3, r7, #4
 80046f4:	2204      	movs	r2, #4
 80046f6:	719a      	strb	r2, [r3, #6]
			DALISendData(data);
 80046f8:	1d3b      	adds	r3, r7, #4
 80046fa:	6818      	ldr	r0, [r3, #0]
 80046fc:	6859      	ldr	r1, [r3, #4]
 80046fe:	f7fd f817 	bl	8001730 <DALISendData>
			report_time = tReport*1000;
 8004702:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <DALI_SendEvent+0x34c>)
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	22fa      	movs	r2, #250	; 0xfa
 8004708:	0092      	lsls	r2, r2, #2
 800470a:	4353      	muls	r3, r2
 800470c:	b29a      	uxth	r2, r3
 800470e:	4b1b      	ldr	r3, [pc, #108]	; (800477c <DALI_SendEvent+0x350>)
 8004710:	801a      	strh	r2, [r3, #0]
			dead_time = tDeadtime*50;
 8004712:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <DALI_SendEvent+0x354>)
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	2232      	movs	r2, #50	; 0x32
 8004718:	4353      	muls	r3, r2
 800471a:	b29a      	uxth	r2, r3
 800471c:	4b04      	ldr	r3, [pc, #16]	; (8004730 <DALI_SendEvent+0x304>)
 800471e:	801a      	strh	r2, [r3, #0]
}
 8004720:	46c0      	nop			; (mov r8, r8)
 8004722:	46bd      	mov	sp, r7
 8004724:	b008      	add	sp, #32
 8004726:	bd80      	pop	{r7, pc}
 8004728:	2000089a 	.word	0x2000089a
 800472c:	200000b7 	.word	0x200000b7
 8004730:	20000878 	.word	0x20000878
 8004734:	200008b0 	.word	0x200008b0
 8004738:	2000089e 	.word	0x2000089e
 800473c:	200000be 	.word	0x200000be
 8004740:	200008b6 	.word	0x200008b6
 8004744:	20000898 	.word	0x20000898
 8004748:	2000087c 	.word	0x2000087c
 800474c:	200008b4 	.word	0x200008b4
 8004750:	08008e8c 	.word	0x08008e8c
 8004754:	2000089c 	.word	0x2000089c
 8004758:	00808000 	.word	0x00808000
 800475c:	200008a8 	.word	0x200008a8
 8004760:	200008a6 	.word	0x200008a6
 8004764:	200000c4 	.word	0x200000c4
 8004768:	200000c8 	.word	0x200000c8
 800476c:	20000010 	.word	0x20000010
 8004770:	2000000e 	.word	0x2000000e
 8004774:	200000c0 	.word	0x200000c0
 8004778:	200008b8 	.word	0x200008b8
 800477c:	20000886 	.word	0x20000886
 8004780:	20000896 	.word	0x20000896

08004784 <DALI_Reset_Variables>:

void DALI_Reset_Variables()
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
	deviceGroups 		= 0;
 8004788:	4b46      	ldr	r3, [pc, #280]	; (80048a4 <DALI_Reset_Variables+0x120>)
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
	searchAddress 		= 0xFFFFFF;
 800478e:	4b46      	ldr	r3, [pc, #280]	; (80048a8 <DALI_Reset_Variables+0x124>)
 8004790:	4a46      	ldr	r2, [pc, #280]	; (80048ac <DALI_Reset_Variables+0x128>)
 8004792:	601a      	str	r2, [r3, #0]
	randomAddress		= 0xFFFFFF;
 8004794:	4b46      	ldr	r3, [pc, #280]	; (80048b0 <DALI_Reset_Variables+0x12c>)
 8004796:	4a45      	ldr	r2, [pc, #276]	; (80048ac <DALI_Reset_Variables+0x128>)
 8004798:	601a      	str	r2, [r3, #0]
	quiescentMode		= DISABLED;
 800479a:	4b46      	ldr	r3, [pc, #280]	; (80048b4 <DALI_Reset_Variables+0x130>)
 800479c:	2200      	movs	r2, #0
 800479e:	701a      	strb	r2, [r3, #0]
	writeEnableState 	= DISABLED;
 80047a0:	4b45      	ldr	r3, [pc, #276]	; (80048b8 <DALI_Reset_Variables+0x134>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]
	powerCycleSeen		= FALSE;
 80047a6:	4b45      	ldr	r3, [pc, #276]	; (80048bc <DALI_Reset_Variables+0x138>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	701a      	strb	r2, [r3, #0]
	resetState			= TRUE;
 80047ac:	4b44      	ldr	r3, [pc, #272]	; (80048c0 <DALI_Reset_Variables+0x13c>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	701a      	strb	r2, [r3, #0]
	instanceGroup0		= 0xFF;
 80047b2:	4b44      	ldr	r3, [pc, #272]	; (80048c4 <DALI_Reset_Variables+0x140>)
 80047b4:	22ff      	movs	r2, #255	; 0xff
 80047b6:	801a      	strh	r2, [r3, #0]
	instanceGroup1		= 0xFF;
 80047b8:	4b43      	ldr	r3, [pc, #268]	; (80048c8 <DALI_Reset_Variables+0x144>)
 80047ba:	22ff      	movs	r2, #255	; 0xff
 80047bc:	801a      	strh	r2, [r3, #0]
	instanceGroup2		= 0xFF;
 80047be:	4b43      	ldr	r3, [pc, #268]	; (80048cc <DALI_Reset_Variables+0x148>)
 80047c0:	22ff      	movs	r2, #255	; 0xff
 80047c2:	801a      	strh	r2, [r3, #0]
	eventPriority		= 4;
 80047c4:	4b42      	ldr	r3, [pc, #264]	; (80048d0 <DALI_Reset_Variables+0x14c>)
 80047c6:	2204      	movs	r2, #4
 80047c8:	801a      	strh	r2, [r3, #0]
	eventScheme			= 0;
 80047ca:	4b42      	ldr	r3, [pc, #264]	; (80048d4 <DALI_Reset_Variables+0x150>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	801a      	strh	r2, [r3, #0]
	if(applicationActive)
 80047d0:	4b41      	ldr	r3, [pc, #260]	; (80048d8 <DALI_Reset_Variables+0x154>)
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d004      	beq.n	80047e2 <DALI_Reset_Variables+0x5e>
	{
		eventFilter = 0xFFFF;
 80047d8:	4b40      	ldr	r3, [pc, #256]	; (80048dc <DALI_Reset_Variables+0x158>)
 80047da:	2201      	movs	r2, #1
 80047dc:	4252      	negs	r2, r2
 80047de:	801a      	strh	r2, [r3, #0]
 80047e0:	e05a      	b.n	8004898 <DALI_Reset_Variables+0x114>
	}
	else
	{
		eventFilter	= 1;
 80047e2:	4b3e      	ldr	r3, [pc, #248]	; (80048dc <DALI_Reset_Variables+0x158>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	801a      	strh	r2, [r3, #0]
		tReport		= 30;
 80047e8:	4b3d      	ldr	r3, [pc, #244]	; (80048e0 <DALI_Reset_Variables+0x15c>)
 80047ea:	221e      	movs	r2, #30
 80047ec:	801a      	strh	r2, [r3, #0]
		tDeadtime 	= 30;
 80047ee:	4b3d      	ldr	r3, [pc, #244]	; (80048e4 <DALI_Reset_Variables+0x160>)
 80047f0:	221e      	movs	r2, #30
 80047f2:	801a      	strh	r2, [r3, #0]
		hysteresis 	= 5;
 80047f4:	4b3c      	ldr	r3, [pc, #240]	; (80048e8 <DALI_Reset_Variables+0x164>)
 80047f6:	2205      	movs	r2, #5
 80047f8:	801a      	strh	r2, [r3, #0]
		if (resolution <= 6)
 80047fa:	4b3c      	ldr	r3, [pc, #240]	; (80048ec <DALI_Reset_Variables+0x168>)
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	2b06      	cmp	r3, #6
 8004800:	d803      	bhi.n	800480a <DALI_Reset_Variables+0x86>
			hysteresisMin = 0;
 8004802:	4b3b      	ldr	r3, [pc, #236]	; (80048f0 <DALI_Reset_Variables+0x16c>)
 8004804:	2200      	movs	r2, #0
 8004806:	801a      	strh	r2, [r3, #0]
 8004808:	e046      	b.n	8004898 <DALI_Reset_Variables+0x114>
		else if(resolution == 7)
 800480a:	4b38      	ldr	r3, [pc, #224]	; (80048ec <DALI_Reset_Variables+0x168>)
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	2b07      	cmp	r3, #7
 8004810:	d103      	bne.n	800481a <DALI_Reset_Variables+0x96>
			hysteresisMin = 1;
 8004812:	4b37      	ldr	r3, [pc, #220]	; (80048f0 <DALI_Reset_Variables+0x16c>)
 8004814:	2201      	movs	r2, #1
 8004816:	801a      	strh	r2, [r3, #0]
 8004818:	e03e      	b.n	8004898 <DALI_Reset_Variables+0x114>
		else if(resolution == 8)
 800481a:	4b34      	ldr	r3, [pc, #208]	; (80048ec <DALI_Reset_Variables+0x168>)
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	2b08      	cmp	r3, #8
 8004820:	d103      	bne.n	800482a <DALI_Reset_Variables+0xa6>
			hysteresisMin = 2;
 8004822:	4b33      	ldr	r3, [pc, #204]	; (80048f0 <DALI_Reset_Variables+0x16c>)
 8004824:	2202      	movs	r2, #2
 8004826:	801a      	strh	r2, [r3, #0]
 8004828:	e036      	b.n	8004898 <DALI_Reset_Variables+0x114>
		else if(resolution == 9)
 800482a:	4b30      	ldr	r3, [pc, #192]	; (80048ec <DALI_Reset_Variables+0x168>)
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	2b09      	cmp	r3, #9
 8004830:	d103      	bne.n	800483a <DALI_Reset_Variables+0xb6>
			hysteresisMin = 5;
 8004832:	4b2f      	ldr	r3, [pc, #188]	; (80048f0 <DALI_Reset_Variables+0x16c>)
 8004834:	2205      	movs	r2, #5
 8004836:	801a      	strh	r2, [r3, #0]
 8004838:	e02e      	b.n	8004898 <DALI_Reset_Variables+0x114>
		else if(resolution == 10)
 800483a:	4b2c      	ldr	r3, [pc, #176]	; (80048ec <DALI_Reset_Variables+0x168>)
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	2b0a      	cmp	r3, #10
 8004840:	d103      	bne.n	800484a <DALI_Reset_Variables+0xc6>
			hysteresisMin = 10;
 8004842:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <DALI_Reset_Variables+0x16c>)
 8004844:	220a      	movs	r2, #10
 8004846:	801a      	strh	r2, [r3, #0]
 8004848:	e026      	b.n	8004898 <DALI_Reset_Variables+0x114>
		else if(resolution == 11)
 800484a:	4b28      	ldr	r3, [pc, #160]	; (80048ec <DALI_Reset_Variables+0x168>)
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	2b0b      	cmp	r3, #11
 8004850:	d103      	bne.n	800485a <DALI_Reset_Variables+0xd6>
			hysteresisMin = 20;
 8004852:	4b27      	ldr	r3, [pc, #156]	; (80048f0 <DALI_Reset_Variables+0x16c>)
 8004854:	2214      	movs	r2, #20
 8004856:	801a      	strh	r2, [r3, #0]
 8004858:	e01e      	b.n	8004898 <DALI_Reset_Variables+0x114>
		else if(resolution == 12)
 800485a:	4b24      	ldr	r3, [pc, #144]	; (80048ec <DALI_Reset_Variables+0x168>)
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	2b0c      	cmp	r3, #12
 8004860:	d103      	bne.n	800486a <DALI_Reset_Variables+0xe6>
			hysteresisMin = 40;
 8004862:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <DALI_Reset_Variables+0x16c>)
 8004864:	2228      	movs	r2, #40	; 0x28
 8004866:	801a      	strh	r2, [r3, #0]
 8004868:	e016      	b.n	8004898 <DALI_Reset_Variables+0x114>
		else if(resolution == 13)
 800486a:	4b20      	ldr	r3, [pc, #128]	; (80048ec <DALI_Reset_Variables+0x168>)
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	2b0d      	cmp	r3, #13
 8004870:	d103      	bne.n	800487a <DALI_Reset_Variables+0xf6>
			hysteresisMin = 81;
 8004872:	4b1f      	ldr	r3, [pc, #124]	; (80048f0 <DALI_Reset_Variables+0x16c>)
 8004874:	2251      	movs	r2, #81	; 0x51
 8004876:	801a      	strh	r2, [r3, #0]
 8004878:	e00e      	b.n	8004898 <DALI_Reset_Variables+0x114>
		else if(resolution == 14)
 800487a:	4b1c      	ldr	r3, [pc, #112]	; (80048ec <DALI_Reset_Variables+0x168>)
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	2b0e      	cmp	r3, #14
 8004880:	d103      	bne.n	800488a <DALI_Reset_Variables+0x106>
			hysteresisMin = 163;
 8004882:	4b1b      	ldr	r3, [pc, #108]	; (80048f0 <DALI_Reset_Variables+0x16c>)
 8004884:	22a3      	movs	r2, #163	; 0xa3
 8004886:	801a      	strh	r2, [r3, #0]
 8004888:	e006      	b.n	8004898 <DALI_Reset_Variables+0x114>
		else if(resolution >= 15)
 800488a:	4b18      	ldr	r3, [pc, #96]	; (80048ec <DALI_Reset_Variables+0x168>)
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	2b0e      	cmp	r3, #14
 8004890:	d902      	bls.n	8004898 <DALI_Reset_Variables+0x114>
			hysteresisMin = 255;
 8004892:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <DALI_Reset_Variables+0x16c>)
 8004894:	22ff      	movs	r2, #255	; 0xff
 8004896:	801a      	strh	r2, [r3, #0]
	}
	DALI_Save_Variable();
 8004898:	f000 f82c 	bl	80048f4 <DALI_Save_Variable>
}
 800489c:	46c0      	nop			; (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	2000087c 	.word	0x2000087c
 80048a8:	20000008 	.word	0x20000008
 80048ac:	00ffffff 	.word	0x00ffffff
 80048b0:	200008ac 	.word	0x200008ac
 80048b4:	200000b7 	.word	0x200000b7
 80048b8:	200000b8 	.word	0x200000b8
 80048bc:	2000000c 	.word	0x2000000c
 80048c0:	2000000d 	.word	0x2000000d
 80048c4:	200008b4 	.word	0x200008b4
 80048c8:	200008a2 	.word	0x200008a2
 80048cc:	20000880 	.word	0x20000880
 80048d0:	200008bc 	.word	0x200008bc
 80048d4:	200008b6 	.word	0x200008b6
 80048d8:	2000089a 	.word	0x2000089a
 80048dc:	200008b0 	.word	0x200008b0
 80048e0:	200008b8 	.word	0x200008b8
 80048e4:	20000896 	.word	0x20000896
 80048e8:	20000010 	.word	0x20000010
 80048ec:	2000088c 	.word	0x2000088c
 80048f0:	2000000e 	.word	0x2000000e

080048f4 <DALI_Save_Variable>:

void DALI_Save_Variable()
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
	erase_page(MEMORY_NVM_VAR_ADDR);
 80048f8:	4b2e      	ldr	r3, [pc, #184]	; (80049b4 <DALI_Save_Variable+0xc0>)
 80048fa:	0018      	movs	r0, r3
 80048fc:	f000 fa22 	bl	8004d44 <erase_page>
	dali_NVM_unlock();
 8004900:	f000 fa58 	bl	8004db4 <dali_NVM_unlock>
	shortAddress_NVM = shortAddress;
 8004904:	4a2c      	ldr	r2, [pc, #176]	; (80049b8 <DALI_Save_Variable+0xc4>)
 8004906:	4b2d      	ldr	r3, [pc, #180]	; (80049bc <DALI_Save_Variable+0xc8>)
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	8013      	strh	r3, [r2, #0]
	(* (uint16_t*) (MEMORY_NVM_VAR_ADDR + 0)) = deviceGroups & 0xFFFF;
 800490c:	4b2c      	ldr	r3, [pc, #176]	; (80049c0 <DALI_Save_Variable+0xcc>)
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	4b28      	ldr	r3, [pc, #160]	; (80049b4 <DALI_Save_Variable+0xc0>)
 8004912:	b292      	uxth	r2, r2
 8004914:	801a      	strh	r2, [r3, #0]
	(* (uint16_t*) (MEMORY_NVM_VAR_ADDR + 2)) = (deviceGroups >> 16) & 0xFFFF;
 8004916:	4b2a      	ldr	r3, [pc, #168]	; (80049c0 <DALI_Save_Variable+0xcc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	0c1a      	lsrs	r2, r3, #16
 800491c:	4b29      	ldr	r3, [pc, #164]	; (80049c4 <DALI_Save_Variable+0xd0>)
 800491e:	b292      	uxth	r2, r2
 8004920:	801a      	strh	r2, [r3, #0]
	(* (uint16_t*) (MEMORY_NVM_VAR_ADDR + 4)) = randomAddress & 0xFFFF;
 8004922:	4b29      	ldr	r3, [pc, #164]	; (80049c8 <DALI_Save_Variable+0xd4>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	4b29      	ldr	r3, [pc, #164]	; (80049cc <DALI_Save_Variable+0xd8>)
 8004928:	b292      	uxth	r2, r2
 800492a:	801a      	strh	r2, [r3, #0]
	(* (uint16_t*) (MEMORY_NVM_VAR_ADDR + 6)) = (randomAddress >> 16) & 0xFFFF;
 800492c:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <DALI_Save_Variable+0xd4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	0c1a      	lsrs	r2, r3, #16
 8004932:	4b27      	ldr	r3, [pc, #156]	; (80049d0 <DALI_Save_Variable+0xdc>)
 8004934:	b292      	uxth	r2, r2
 8004936:	801a      	strh	r2, [r3, #0]
	operatingMode_NVM = operatingMode;
 8004938:	4a26      	ldr	r2, [pc, #152]	; (80049d4 <DALI_Save_Variable+0xe0>)
 800493a:	4b27      	ldr	r3, [pc, #156]	; (80049d8 <DALI_Save_Variable+0xe4>)
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	8013      	strh	r3, [r2, #0]
	applicationActive_NVM = applicationActive;
 8004940:	4a26      	ldr	r2, [pc, #152]	; (80049dc <DALI_Save_Variable+0xe8>)
 8004942:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <DALI_Save_Variable+0xec>)
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	8013      	strh	r3, [r2, #0]
	powerCycleNotification_NVM = powerCycleNotification;
 8004948:	4a26      	ldr	r2, [pc, #152]	; (80049e4 <DALI_Save_Variable+0xf0>)
 800494a:	4b27      	ldr	r3, [pc, #156]	; (80049e8 <DALI_Save_Variable+0xf4>)
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	8013      	strh	r3, [r2, #0]
	eventPriority_NVM = eventPriority;
 8004950:	4a26      	ldr	r2, [pc, #152]	; (80049ec <DALI_Save_Variable+0xf8>)
 8004952:	4b27      	ldr	r3, [pc, #156]	; (80049f0 <DALI_Save_Variable+0xfc>)
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	8013      	strh	r3, [r2, #0]
	instanceGroup0_NVM = instanceGroup0;
 8004958:	4a26      	ldr	r2, [pc, #152]	; (80049f4 <DALI_Save_Variable+0x100>)
 800495a:	4b27      	ldr	r3, [pc, #156]	; (80049f8 <DALI_Save_Variable+0x104>)
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	8013      	strh	r3, [r2, #0]
	instanceGroup1_NVM = instanceGroup1;
 8004960:	4a26      	ldr	r2, [pc, #152]	; (80049fc <DALI_Save_Variable+0x108>)
 8004962:	4b27      	ldr	r3, [pc, #156]	; (8004a00 <DALI_Save_Variable+0x10c>)
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	8013      	strh	r3, [r2, #0]
	instanceGroup2_NVM = instanceGroup2;
 8004968:	4a26      	ldr	r2, [pc, #152]	; (8004a04 <DALI_Save_Variable+0x110>)
 800496a:	4b27      	ldr	r3, [pc, #156]	; (8004a08 <DALI_Save_Variable+0x114>)
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	8013      	strh	r3, [r2, #0]
	instanceActive_NVM = instanceActive;
 8004970:	4a26      	ldr	r2, [pc, #152]	; (8004a0c <DALI_Save_Variable+0x118>)
 8004972:	4b27      	ldr	r3, [pc, #156]	; (8004a10 <DALI_Save_Variable+0x11c>)
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	8013      	strh	r3, [r2, #0]
	eventFilter_NVM = eventFilter;
 8004978:	4a26      	ldr	r2, [pc, #152]	; (8004a14 <DALI_Save_Variable+0x120>)
 800497a:	4b27      	ldr	r3, [pc, #156]	; (8004a18 <DALI_Save_Variable+0x124>)
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	8013      	strh	r3, [r2, #0]
	eventScheme_NVM = eventScheme;
 8004980:	4a26      	ldr	r2, [pc, #152]	; (8004a1c <DALI_Save_Variable+0x128>)
 8004982:	4b27      	ldr	r3, [pc, #156]	; (8004a20 <DALI_Save_Variable+0x12c>)
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	8013      	strh	r3, [r2, #0]
	tReport_NVM = tReport;
 8004988:	4a26      	ldr	r2, [pc, #152]	; (8004a24 <DALI_Save_Variable+0x130>)
 800498a:	4b27      	ldr	r3, [pc, #156]	; (8004a28 <DALI_Save_Variable+0x134>)
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	8013      	strh	r3, [r2, #0]
	tDeadtime_NVM = tDeadtime;
 8004990:	4a26      	ldr	r2, [pc, #152]	; (8004a2c <DALI_Save_Variable+0x138>)
 8004992:	4b27      	ldr	r3, [pc, #156]	; (8004a30 <DALI_Save_Variable+0x13c>)
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	8013      	strh	r3, [r2, #0]
	hysteresisMin_NVM = hysteresisMin;
 8004998:	4a26      	ldr	r2, [pc, #152]	; (8004a34 <DALI_Save_Variable+0x140>)
 800499a:	4b27      	ldr	r3, [pc, #156]	; (8004a38 <DALI_Save_Variable+0x144>)
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	8013      	strh	r3, [r2, #0]
	hysteresis_NVM = hysteresis;
 80049a0:	4a26      	ldr	r2, [pc, #152]	; (8004a3c <DALI_Save_Variable+0x148>)
 80049a2:	4b27      	ldr	r3, [pc, #156]	; (8004a40 <DALI_Save_Variable+0x14c>)
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	8013      	strh	r3, [r2, #0]
	dali_NVM_lock();
 80049a8:	f000 fa18 	bl	8004ddc <dali_NVM_lock>
}
 80049ac:	46c0      	nop			; (mov r8, r8)
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	0800e800 	.word	0x0800e800
 80049b8:	0800e808 	.word	0x0800e808
 80049bc:	20000898 	.word	0x20000898
 80049c0:	2000087c 	.word	0x2000087c
 80049c4:	0800e802 	.word	0x0800e802
 80049c8:	200008ac 	.word	0x200008ac
 80049cc:	0800e804 	.word	0x0800e804
 80049d0:	0800e806 	.word	0x0800e806
 80049d4:	0800e80a 	.word	0x0800e80a
 80049d8:	200008a0 	.word	0x200008a0
 80049dc:	0800e80c 	.word	0x0800e80c
 80049e0:	2000089a 	.word	0x2000089a
 80049e4:	0800e80e 	.word	0x0800e80e
 80049e8:	200008ba 	.word	0x200008ba
 80049ec:	0800e810 	.word	0x0800e810
 80049f0:	200008bc 	.word	0x200008bc
 80049f4:	0800e812 	.word	0x0800e812
 80049f8:	200008b4 	.word	0x200008b4
 80049fc:	0800e814 	.word	0x0800e814
 8004a00:	200008a2 	.word	0x200008a2
 8004a04:	0800e816 	.word	0x0800e816
 8004a08:	20000880 	.word	0x20000880
 8004a0c:	0800e818 	.word	0x0800e818
 8004a10:	2000089e 	.word	0x2000089e
 8004a14:	0800e81a 	.word	0x0800e81a
 8004a18:	200008b0 	.word	0x200008b0
 8004a1c:	0800e81c 	.word	0x0800e81c
 8004a20:	200008b6 	.word	0x200008b6
 8004a24:	0800e81e 	.word	0x0800e81e
 8004a28:	200008b8 	.word	0x200008b8
 8004a2c:	0800e820 	.word	0x0800e820
 8004a30:	20000896 	.word	0x20000896
 8004a34:	0800e822 	.word	0x0800e822
 8004a38:	2000000e 	.word	0x2000000e
 8004a3c:	0800e824 	.word	0x0800e824
 8004a40:	20000010 	.word	0x20000010

08004a44 <DALI_Set_inputValue>:

void DALI_Set_inputValue(uint32_t adcVal)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
	 * At calibration stage, calibrationOffset is recorded at 0 illuminance
	 * and 16*calibrationScale is recorded at fullScaleRange illuminance
	 * The inputValue is converted so that it equals 1000 at fullScaleRange illuminace (i.e when adcVal = 16*calibrationScale)
	 * and it equals 0 at 0 illuminance (i.e when adcVal = calibrationOffset)
	 */
	inputValue_10b = 1000*(adcVal - calibrationOffset)/(16*calibrationScale - calibrationOffset);	// Convert from 12-bit resolution to 0-1000 scale
 8004a4c:	4b15      	ldr	r3, [pc, #84]	; (8004aa4 <DALI_Set_inputValue+0x60>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	001a      	movs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	1a9a      	subs	r2, r3, r2
 8004a56:	0013      	movs	r3, r2
 8004a58:	015b      	lsls	r3, r3, #5
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	189b      	adds	r3, r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	0018      	movs	r0, r3
 8004a64:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <DALI_Set_inputValue+0x64>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	4a0e      	ldr	r2, [pc, #56]	; (8004aa4 <DALI_Set_inputValue+0x60>)
 8004a6c:	7812      	ldrb	r2, [r2, #0]
 8004a6e:	1a9b      	subs	r3, r3, r2
 8004a70:	0019      	movs	r1, r3
 8004a72:	f7fb fb49 	bl	8000108 <__udivsi3>
 8004a76:	0003      	movs	r3, r0
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <DALI_Set_inputValue+0x68>)
 8004a7c:	801a      	strh	r2, [r3, #0]
	inputValue = ((inputValue_10b << 10) & 0xFC00) | (inputValue_10b & 0x3FF); // MSB-aligned, unused bits conatain a repeating pattern of MSB of the result
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <DALI_Set_inputValue+0x68>)
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	029b      	lsls	r3, r3, #10
 8004a84:	b21a      	sxth	r2, r3
 8004a86:	4b09      	ldr	r3, [pc, #36]	; (8004aac <DALI_Set_inputValue+0x68>)
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b21b      	sxth	r3, r3
 8004a8c:	059b      	lsls	r3, r3, #22
 8004a8e:	0d9b      	lsrs	r3, r3, #22
 8004a90:	b21b      	sxth	r3, r3
 8004a92:	4313      	orrs	r3, r2
 8004a94:	b21b      	sxth	r3, r3
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <DALI_Set_inputValue+0x6c>)
 8004a9a:	801a      	strh	r2, [r3, #0]
}
 8004a9c:	46c0      	nop			; (mov r8, r8)
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b002      	add	sp, #8
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	0800f406 	.word	0x0800f406
 8004aa8:	0800f405 	.word	0x0800f405
 8004aac:	200000d4 	.word	0x200000d4
 8004ab0:	200008a6 	.word	0x200008a6

08004ab4 <DALI_Send_PowerCycleEvent>:

 void DALI_Send_PowerCycleEvent()
 {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
	 uint32_t frame = 0xFEE000;
 8004aba:	4b28      	ldr	r3, [pc, #160]	; (8004b5c <DALI_Send_PowerCycleEvent+0xa8>)
 8004abc:	617b      	str	r3, [r7, #20]
	 if (deviceGroups > 0)
 8004abe:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <DALI_Send_PowerCycleEvent+0xac>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d024      	beq.n	8004b10 <DALI_Send_PowerCycleEvent+0x5c>
	 {
		 frame = frame | (1 << 12);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2280      	movs	r2, #128	; 0x80
 8004aca:	0152      	lsls	r2, r2, #5
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]
		 uint32_t temp = deviceGroups;
 8004ad0:	4b23      	ldr	r3, [pc, #140]	; (8004b60 <DALI_Send_PowerCycleEvent+0xac>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	613b      	str	r3, [r7, #16]
		 uint8_t count = 0;
 8004ad6:	230f      	movs	r3, #15
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]
		 // Find the lowest device group number of membership of the containing device
		 while(temp % 2 == 0)
 8004ade:	e008      	b.n	8004af2 <DALI_Send_PowerCycleEvent+0x3e>
		 {
			 temp = temp >> 1;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	085b      	lsrs	r3, r3, #1
 8004ae4:	613b      	str	r3, [r7, #16]
			 count++;
 8004ae6:	210f      	movs	r1, #15
 8004ae8:	187b      	adds	r3, r7, r1
 8004aea:	781a      	ldrb	r2, [r3, #0]
 8004aec:	187b      	adds	r3, r7, r1
 8004aee:	3201      	adds	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
		 while(temp % 2 == 0)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	2201      	movs	r2, #1
 8004af6:	4013      	ands	r3, r2
 8004af8:	d0f2      	beq.n	8004ae0 <DALI_Send_PowerCycleEvent+0x2c>
		 }
		 frame = frame | ((count << 7) & 0xF80);
 8004afa:	230f      	movs	r3, #15
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	01db      	lsls	r3, r3, #7
 8004b02:	001a      	movs	r2, r3
 8004b04:	23f8      	movs	r3, #248	; 0xf8
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	4013      	ands	r3, r2
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
	 }
	 if (shortAddress != 0xFF)
 8004b10:	4b14      	ldr	r3, [pc, #80]	; (8004b64 <DALI_Send_PowerCycleEvent+0xb0>)
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	2bff      	cmp	r3, #255	; 0xff
 8004b16:	d00b      	beq.n	8004b30 <DALI_Send_PowerCycleEvent+0x7c>
	 {
		 frame = frame | (1 << 6);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2240      	movs	r2, #64	; 0x40
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
		 frame = frame | (shortAddress & 0x1F);
 8004b20:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <DALI_Send_PowerCycleEvent+0xb0>)
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	001a      	movs	r2, r3
 8004b26:	231f      	movs	r3, #31
 8004b28:	4013      	ands	r3, r2
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
	 }
	 DALITxData_t data = {frame, 0, 0, 3};
 8004b30:	1d3b      	adds	r3, r7, #4
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	1d3b      	adds	r3, r7, #4
 8004b38:	2200      	movs	r2, #0
 8004b3a:	711a      	strb	r2, [r3, #4]
 8004b3c:	1d3b      	adds	r3, r7, #4
 8004b3e:	2200      	movs	r2, #0
 8004b40:	715a      	strb	r2, [r3, #5]
 8004b42:	1d3b      	adds	r3, r7, #4
 8004b44:	2203      	movs	r2, #3
 8004b46:	719a      	strb	r2, [r3, #6]
	 DALISendData(data);
 8004b48:	1d3b      	adds	r3, r7, #4
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	f7fc fdef 	bl	8001730 <DALISendData>
 }
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	46bd      	mov	sp, r7
 8004b56:	b006      	add	sp, #24
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	00fee000 	.word	0x00fee000
 8004b60:	2000087c 	.word	0x2000087c
 8004b64:	20000898 	.word	0x20000898

08004b68 <DALI_Check_ResetState>:

 void DALI_Check_ResetState()
 {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
	 if(resetState != TRUE)
 8004b6c:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <DALI_Check_ResetState+0x7c>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d035      	beq.n	8004be0 <DALI_Check_ResetState+0x78>
	 {
		 if((deviceGroups != 0) || (searchAddress != 0xFFFFFF) || (instanceGroup0 != 0xFF) || (instanceGroup1 != 0xFF) || (instanceGroup2 != 0xFF) || \
 8004b74:	4b1c      	ldr	r3, [pc, #112]	; (8004be8 <DALI_Check_ResetState+0x80>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d130      	bne.n	8004bde <DALI_Check_ResetState+0x76>
 8004b7c:	4b1b      	ldr	r3, [pc, #108]	; (8004bec <DALI_Check_ResetState+0x84>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <DALI_Check_ResetState+0x88>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d12b      	bne.n	8004bde <DALI_Check_ResetState+0x76>
 8004b86:	4b1b      	ldr	r3, [pc, #108]	; (8004bf4 <DALI_Check_ResetState+0x8c>)
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	2bff      	cmp	r3, #255	; 0xff
 8004b8c:	d127      	bne.n	8004bde <DALI_Check_ResetState+0x76>
 8004b8e:	4b1a      	ldr	r3, [pc, #104]	; (8004bf8 <DALI_Check_ResetState+0x90>)
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	2bff      	cmp	r3, #255	; 0xff
 8004b94:	d123      	bne.n	8004bde <DALI_Check_ResetState+0x76>
 8004b96:	4b19      	ldr	r3, [pc, #100]	; (8004bfc <DALI_Check_ResetState+0x94>)
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	2bff      	cmp	r3, #255	; 0xff
 8004b9c:	d11f      	bne.n	8004bde <DALI_Check_ResetState+0x76>
				 (eventFilter != 1) || (eventScheme != 0) || (eventPriority != 4) || (tReport != 30) || (tDeadtime != 30) || (hysteresisMin != 10) || (hysteresis != 5))
 8004b9e:	4b18      	ldr	r3, [pc, #96]	; (8004c00 <DALI_Check_ResetState+0x98>)
 8004ba0:	881b      	ldrh	r3, [r3, #0]
		 if((deviceGroups != 0) || (searchAddress != 0xFFFFFF) || (instanceGroup0 != 0xFF) || (instanceGroup1 != 0xFF) || (instanceGroup2 != 0xFF) || \
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d11b      	bne.n	8004bde <DALI_Check_ResetState+0x76>
				 (eventFilter != 1) || (eventScheme != 0) || (eventPriority != 4) || (tReport != 30) || (tDeadtime != 30) || (hysteresisMin != 10) || (hysteresis != 5))
 8004ba6:	4b17      	ldr	r3, [pc, #92]	; (8004c04 <DALI_Check_ResetState+0x9c>)
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d117      	bne.n	8004bde <DALI_Check_ResetState+0x76>
 8004bae:	4b16      	ldr	r3, [pc, #88]	; (8004c08 <DALI_Check_ResetState+0xa0>)
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d113      	bne.n	8004bde <DALI_Check_ResetState+0x76>
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <DALI_Check_ResetState+0xa4>)
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	2b1e      	cmp	r3, #30
 8004bbc:	d10f      	bne.n	8004bde <DALI_Check_ResetState+0x76>
 8004bbe:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <DALI_Check_ResetState+0xa8>)
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	2b1e      	cmp	r3, #30
 8004bc4:	d10b      	bne.n	8004bde <DALI_Check_ResetState+0x76>
 8004bc6:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <DALI_Check_ResetState+0xac>)
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	2b0a      	cmp	r3, #10
 8004bcc:	d107      	bne.n	8004bde <DALI_Check_ResetState+0x76>
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <DALI_Check_ResetState+0xb0>)
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	2b05      	cmp	r3, #5
 8004bd4:	d103      	bne.n	8004bde <DALI_Check_ResetState+0x76>
		 {
			 return;
		 }
		 resetState = TRUE;
 8004bd6:	4b03      	ldr	r3, [pc, #12]	; (8004be4 <DALI_Check_ResetState+0x7c>)
 8004bd8:	2201      	movs	r2, #1
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	e000      	b.n	8004be0 <DALI_Check_ResetState+0x78>
			 return;
 8004bde:	46c0      	nop			; (mov r8, r8)
	 }
 }
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	2000000d 	.word	0x2000000d
 8004be8:	2000087c 	.word	0x2000087c
 8004bec:	20000008 	.word	0x20000008
 8004bf0:	00ffffff 	.word	0x00ffffff
 8004bf4:	200008b4 	.word	0x200008b4
 8004bf8:	200008a2 	.word	0x200008a2
 8004bfc:	20000880 	.word	0x20000880
 8004c00:	200008b0 	.word	0x200008b0
 8004c04:	200008b6 	.word	0x200008b6
 8004c08:	200008bc 	.word	0x200008bc
 8004c0c:	200008b8 	.word	0x200008b8
 8004c10:	20000896 	.word	0x20000896
 8004c14:	2000000e 	.word	0x2000000e
 8004c18:	20000010 	.word	0x20000010

08004c1c <dali_memory_init>:

uint32_t memory_bank_addr[256] = {0};
uint8_t lock_byte[256];	// Locked by set to 0x55
// If more memory banks are defined, the dali_memory_init function needs to be modified too
void dali_memory_init(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
	memory_bank_addr[0] = MEMORY_BANK_0_ADDR;
 8004c20:	4b31      	ldr	r3, [pc, #196]	; (8004ce8 <dali_memory_init+0xcc>)
 8004c22:	4a32      	ldr	r2, [pc, #200]	; (8004cec <dali_memory_init+0xd0>)
 8004c24:	601a      	str	r2, [r3, #0]
	memory_bank_addr[189] = MEMORY_BANK_189_ADDR;
 8004c26:	4a30      	ldr	r2, [pc, #192]	; (8004ce8 <dali_memory_init+0xcc>)
 8004c28:	23bd      	movs	r3, #189	; 0xbd
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4930      	ldr	r1, [pc, #192]	; (8004cf0 <dali_memory_init+0xd4>)
 8004c2e:	50d1      	str	r1, [r2, r3]
	lock_byte[189] = 0xFF;
 8004c30:	4b30      	ldr	r3, [pc, #192]	; (8004cf4 <dali_memory_init+0xd8>)
 8004c32:	22bd      	movs	r2, #189	; 0xbd
 8004c34:	21ff      	movs	r1, #255	; 0xff
 8004c36:	5499      	strb	r1, [r3, r2]
	if((* (uint8_t*) (MEMORY_BANK_0_ADDR)) == 0xFF)
 8004c38:	4b2c      	ldr	r3, [pc, #176]	; (8004cec <dali_memory_init+0xd0>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2bff      	cmp	r3, #255	; 0xff
 8004c3e:	d150      	bne.n	8004ce2 <dali_memory_init+0xc6>
	{
		dali_NVM_unlock();
 8004c40:	f000 f8b8 	bl	8004db4 <dali_NVM_unlock>
		// Implement memory bank 0
		(* (uint16_t*) (MEMORY_BANK_0_ADDR)) = 0xFF1A;
 8004c44:	4b29      	ldr	r3, [pc, #164]	; (8004cec <dali_memory_init+0xd0>)
 8004c46:	22e6      	movs	r2, #230	; 0xe6
 8004c48:	4252      	negs	r2, r2
 8004c4a:	801a      	strh	r2, [r3, #0]
		(* (uint16_t*) (MEMORY_BANK_0_ADDR + 0x02)) = 0xBD;		// Last accessible memory bank = 189, MSB GTIN = 0
 8004c4c:	4b2a      	ldr	r3, [pc, #168]	; (8004cf8 <dali_memory_init+0xdc>)
 8004c4e:	22bd      	movs	r2, #189	; 0xbd
 8004c50:	801a      	strh	r2, [r3, #0]
		(* (uint16_t*) (MEMORY_BANK_0_ADDR + 0x04)) = 0x3CC8;	// GTIN = 0x00 C8 3C 58 86 4A
 8004c52:	4b2a      	ldr	r3, [pc, #168]	; (8004cfc <dali_memory_init+0xe0>)
 8004c54:	4a2a      	ldr	r2, [pc, #168]	; (8004d00 <dali_memory_init+0xe4>)
 8004c56:	801a      	strh	r2, [r3, #0]
		(* (uint16_t*) (MEMORY_BANK_0_ADDR + 0x06)) = 0x8658;
 8004c58:	4b2a      	ldr	r3, [pc, #168]	; (8004d04 <dali_memory_init+0xe8>)
 8004c5a:	4a2b      	ldr	r2, [pc, #172]	; (8004d08 <dali_memory_init+0xec>)
 8004c5c:	801a      	strh	r2, [r3, #0]
		(* (uint16_t*) (MEMORY_BANK_0_ADDR + 0x08)) = 0x4A;		// GTIN LSB = 0x4A; fw major version = 0
 8004c5e:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <dali_memory_init+0xf0>)
 8004c60:	224a      	movs	r2, #74	; 0x4a
 8004c62:	801a      	strh	r2, [r3, #0]
		(* (uint16_t*) (MEMORY_BANK_0_ADDR + 0x0A)) = 0x01;		// fw minor version = 0, MSB id = 0
 8004c64:	4b2a      	ldr	r3, [pc, #168]	; (8004d10 <dali_memory_init+0xf4>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	801a      	strh	r2, [r3, #0]
		(* (uint16_t*) (MEMORY_BANK_0_ADDR + 0x12)) = 0;		// LSB id = 0; hw major version = 0
 8004c6a:	4b2a      	ldr	r3, [pc, #168]	; (8004d14 <dali_memory_init+0xf8>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	801a      	strh	r2, [r3, #0]
		(* (uint16_t*) (MEMORY_BANK_0_ADDR + 0x14)) = 0x901; 	// version number: 9 (2.1), hardware version minor: 1
 8004c70:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <dali_memory_init+0xfc>)
 8004c72:	4a2a      	ldr	r2, [pc, #168]	; (8004d1c <dali_memory_init+0x100>)
 8004c74:	801a      	strh	r2, [r3, #0]
		(* (uint16_t*) (MEMORY_BANK_0_ADDR + 0x16)) = 0x9FF;	// 102 version number: 0xFF, 103 version number: 9 (2.1)
 8004c76:	4b2a      	ldr	r3, [pc, #168]	; (8004d20 <dali_memory_init+0x104>)
 8004c78:	4a2a      	ldr	r2, [pc, #168]	; (8004d24 <dali_memory_init+0x108>)
 8004c7a:	801a      	strh	r2, [r3, #0]
		(* (uint16_t*) (MEMORY_BANK_0_ADDR + 0x18)) = 1;		// 1 control device, 0 control gear on bus
 8004c7c:	4b2a      	ldr	r3, [pc, #168]	; (8004d28 <dali_memory_init+0x10c>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	801a      	strh	r2, [r3, #0]
		(* (uint16_t*) (MEMORY_BANK_0_ADDR + 0x1A)) = 0xFF00;	// Index number = 0
 8004c82:	4b2a      	ldr	r3, [pc, #168]	; (8004d2c <dali_memory_init+0x110>)
 8004c84:	4a2a      	ldr	r2, [pc, #168]	; (8004d30 <dali_memory_init+0x114>)
 8004c86:	801a      	strh	r2, [r3, #0]

		// Implement memory bank 1
		(* (uint16_t*) (MEMORY_BANK_189_ADDR)) = 0xFF16;
 8004c88:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <dali_memory_init+0xd4>)
 8004c8a:	22ea      	movs	r2, #234	; 0xea
 8004c8c:	4252      	negs	r2, r2
 8004c8e:	801a      	strh	r2, [r3, #0]
		(* (uint16_t*) (MEMORY_BANK_189_ADDR + 0x04)) = (calibrationScale_default << 8) | factoryReset_default;
 8004c90:	23ff      	movs	r3, #255	; 0xff
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	b21a      	sxth	r2, r3
 8004c96:	23ff      	movs	r3, #255	; 0xff
 8004c98:	b21b      	sxth	r3, r3
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	b21a      	sxth	r2, r3
 8004c9e:	4b25      	ldr	r3, [pc, #148]	; (8004d34 <dali_memory_init+0x118>)
 8004ca0:	b292      	uxth	r2, r2
 8004ca2:	801a      	strh	r2, [r3, #0]
		(* (uint16_t*) (MEMORY_BANK_189_ADDR + 0x06)) = (pidProportionalCoeff_default << 8) | (calibrationOffset_default);
 8004ca4:	23ff      	movs	r3, #255	; 0xff
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	b21a      	sxth	r2, r3
 8004caa:	2300      	movs	r3, #0
 8004cac:	b21b      	sxth	r3, r3
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	b21a      	sxth	r2, r3
 8004cb2:	4b21      	ldr	r3, [pc, #132]	; (8004d38 <dali_memory_init+0x11c>)
 8004cb4:	b292      	uxth	r2, r2
 8004cb6:	801a      	strh	r2, [r3, #0]
		(* (uint16_t*) (MEMORY_BANK_189_ADDR + 0x14)) = ((fullScaleRange_default & 0xFF) << 8) | 0xFF;
 8004cb8:	23fa      	movs	r3, #250	; 0xfa
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	b21b      	sxth	r3, r3
 8004cc0:	22ff      	movs	r2, #255	; 0xff
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	b21a      	sxth	r2, r3
 8004cc6:	4b1d      	ldr	r3, [pc, #116]	; (8004d3c <dali_memory_init+0x120>)
 8004cc8:	b292      	uxth	r2, r2
 8004cca:	801a      	strh	r2, [r3, #0]
		(* (uint16_t*) (MEMORY_BANK_189_ADDR + 0x16)) = 0xFF00 | (fullScaleRange_default >> 8);
 8004ccc:	23fa      	movs	r3, #250	; 0xfa
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	0a1b      	lsrs	r3, r3, #8
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	4a1a      	ldr	r2, [pc, #104]	; (8004d40 <dali_memory_init+0x124>)
 8004cd6:	4916      	ldr	r1, [pc, #88]	; (8004d30 <dali_memory_init+0x114>)
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	8013      	strh	r3, [r2, #0]
		dali_NVM_lock();
 8004cde:	f000 f87d 	bl	8004ddc <dali_NVM_lock>
	}
}
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	200000d8 	.word	0x200000d8
 8004cec:	0800f000 	.word	0x0800f000
 8004cf0:	0800f400 	.word	0x0800f400
 8004cf4:	200008c0 	.word	0x200008c0
 8004cf8:	0800f002 	.word	0x0800f002
 8004cfc:	0800f004 	.word	0x0800f004
 8004d00:	00003cc8 	.word	0x00003cc8
 8004d04:	0800f006 	.word	0x0800f006
 8004d08:	ffff8658 	.word	0xffff8658
 8004d0c:	0800f008 	.word	0x0800f008
 8004d10:	0800f00a 	.word	0x0800f00a
 8004d14:	0800f012 	.word	0x0800f012
 8004d18:	0800f014 	.word	0x0800f014
 8004d1c:	00000901 	.word	0x00000901
 8004d20:	0800f016 	.word	0x0800f016
 8004d24:	000009ff 	.word	0x000009ff
 8004d28:	0800f018 	.word	0x0800f018
 8004d2c:	0800f01a 	.word	0x0800f01a
 8004d30:	ffffff00 	.word	0xffffff00
 8004d34:	0800f404 	.word	0x0800f404
 8004d38:	0800f406 	.word	0x0800f406
 8004d3c:	0800f414 	.word	0x0800f414
 8004d40:	0800f416 	.word	0x0800f416

08004d44 <erase_page>:

uint32_t erase_page(uint32_t page_address)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]

	if(HAL_FLASH_Unlock() != HAL_OK)
 8004d4c:	f002 f86a 	bl	8006e24 <HAL_FLASH_Unlock>
 8004d50:	1e03      	subs	r3, r0, #0
 8004d52:	d001      	beq.n	8004d58 <erase_page+0x14>
	{
		Error_Handler();
 8004d54:	f000 fdc1 	bl	80058da <Error_Handler>
	}
	CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004d58:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <erase_page+0x6c>)
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <erase_page+0x6c>)
 8004d5e:	2101      	movs	r1, #1
 8004d60:	438a      	bics	r2, r1
 8004d62:	611a      	str	r2, [r3, #16]
	FLASH_EraseInitTypeDef flash1 = {FLASH_TYPEERASE_PAGES, page_address, 1};
 8004d64:	210c      	movs	r1, #12
 8004d66:	187b      	adds	r3, r7, r1
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	187b      	adds	r3, r7, r1
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	187b      	adds	r3, r7, r1
 8004d74:	2201      	movs	r2, #1
 8004d76:	609a      	str	r2, [r3, #8]
	uint32_t erase_err = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d7c:	b672      	cpsid	i
	__disable_irq();
	HAL_FLASHEx_Erase(&flash1, &erase_err);
 8004d7e:	2308      	movs	r3, #8
 8004d80:	18fa      	adds	r2, r7, r3
 8004d82:	187b      	adds	r3, r7, r1
 8004d84:	0011      	movs	r1, r2
 8004d86:	0018      	movs	r0, r3
 8004d88:	f002 f90a 	bl	8006fa0 <HAL_FLASHEx_Erase>
  __ASM volatile ("cpsie i" : : : "memory");
 8004d8c:	b662      	cpsie	i
	__enable_irq();
	SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004d8e:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <erase_page+0x6c>)
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <erase_page+0x6c>)
 8004d94:	2101      	movs	r1, #1
 8004d96:	430a      	orrs	r2, r1
 8004d98:	611a      	str	r2, [r3, #16]
	if(HAL_FLASH_Lock() != HAL_OK)
 8004d9a:	f002 f869 	bl	8006e70 <HAL_FLASH_Lock>
 8004d9e:	1e03      	subs	r3, r0, #0
 8004da0:	d001      	beq.n	8004da6 <erase_page+0x62>
	{
		Error_Handler();
 8004da2:	f000 fd9a 	bl	80058da <Error_Handler>
	}
	return erase_err;
 8004da6:	68bb      	ldr	r3, [r7, #8]
}
 8004da8:	0018      	movs	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b006      	add	sp, #24
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40022000 	.word	0x40022000

08004db4 <dali_NVM_unlock>:

void dali_NVM_unlock()
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
	if(HAL_FLASH_Unlock() != HAL_OK)
 8004db8:	f002 f834 	bl	8006e24 <HAL_FLASH_Unlock>
 8004dbc:	1e03      	subs	r3, r0, #0
 8004dbe:	d001      	beq.n	8004dc4 <dali_NVM_unlock+0x10>
	{
		Error_Handler();
 8004dc0:	f000 fd8b 	bl	80058da <Error_Handler>
	}
	SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004dc4:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <dali_NVM_unlock+0x24>)
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	4b03      	ldr	r3, [pc, #12]	; (8004dd8 <dali_NVM_unlock+0x24>)
 8004dca:	2101      	movs	r1, #1
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	611a      	str	r2, [r3, #16]
}
 8004dd0:	46c0      	nop			; (mov r8, r8)
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	40022000 	.word	0x40022000

08004ddc <dali_NVM_lock>:
void dali_NVM_lock()
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
	CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004de0:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <dali_NVM_lock+0x24>)
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <dali_NVM_lock+0x24>)
 8004de6:	2101      	movs	r1, #1
 8004de8:	438a      	bics	r2, r1
 8004dea:	611a      	str	r2, [r3, #16]
	if(HAL_FLASH_Lock() != HAL_OK)
 8004dec:	f002 f840 	bl	8006e70 <HAL_FLASH_Lock>
 8004df0:	1e03      	subs	r3, r0, #0
 8004df2:	d001      	beq.n	8004df8 <dali_NVM_lock+0x1c>
	{
		Error_Handler();
 8004df4:	f000 fd71 	bl	80058da <Error_Handler>
	}
}
 8004df8:	46c0      	nop			; (mov r8, r8)
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	40022000 	.word	0x40022000

08004e04 <dali_memory_read>:
memory_read_t dali_memory_read(uint8_t memory_bank_number, uint8_t memory_offset)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	0002      	movs	r2, r0
 8004e0c:	1dfb      	adds	r3, r7, #7
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	1dbb      	adds	r3, r7, #6
 8004e12:	1c0a      	adds	r2, r1, #0
 8004e14:	701a      	strb	r2, [r3, #0]
	memory_read_t read;
	uint32_t memory_bank_address = memory_bank_addr[memory_bank_number];
 8004e16:	1dfb      	adds	r3, r7, #7
 8004e18:	781a      	ldrb	r2, [r3, #0]
 8004e1a:	4b2f      	ldr	r3, [pc, #188]	; (8004ed8 <dali_memory_read+0xd4>)
 8004e1c:	0092      	lsls	r2, r2, #2
 8004e1e:	58d3      	ldr	r3, [r2, r3]
 8004e20:	617b      	str	r3, [r7, #20]
	uint32_t read_address = memory_bank_address + memory_offset;
 8004e22:	1dbb      	adds	r3, r7, #6
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	18d3      	adds	r3, r2, r3
 8004e2a:	613b      	str	r3, [r7, #16]
	if(memory_bank_address == 0) // memory bank is not implemented
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d104      	bne.n	8004e3c <dali_memory_read+0x38>
	{
		read.success = 0;
 8004e32:	2308      	movs	r3, #8
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	2200      	movs	r2, #0
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	e034      	b.n	8004ea6 <dali_memory_read+0xa2>
	}
	else if((memory_offset > *(uint8_t *) memory_bank_address) || (memory_offset == 1)) // memory bank location is not implemented (not accessible)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	1dba      	adds	r2, r7, #6
 8004e42:	7812      	ldrb	r2, [r2, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d803      	bhi.n	8004e50 <dali_memory_read+0x4c>
 8004e48:	1dbb      	adds	r3, r7, #6
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d104      	bne.n	8004e5a <dali_memory_read+0x56>
	{
		read.success = 0;
 8004e50:	2308      	movs	r3, #8
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	2200      	movs	r2, #0
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	e025      	b.n	8004ea6 <dali_memory_read+0xa2>
	}
	else
	{
		if((memory_bank_number != 0) && (memory_offset == lockByte_addr))
 8004e5a:	1dfb      	adds	r3, r7, #7
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <dali_memory_read+0x76>
 8004e62:	1dbb      	adds	r3, r7, #6
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d107      	bne.n	8004e7a <dali_memory_read+0x76>
		{
			read.value = lock_byte[memory_bank_number];
 8004e6a:	1dfb      	adds	r3, r7, #7
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	4a1b      	ldr	r2, [pc, #108]	; (8004edc <dali_memory_read+0xd8>)
 8004e70:	5cd2      	ldrb	r2, [r2, r3]
 8004e72:	2308      	movs	r3, #8
 8004e74:	18fb      	adds	r3, r7, r3
 8004e76:	705a      	strb	r2, [r3, #1]
 8004e78:	e011      	b.n	8004e9e <dali_memory_read+0x9a>
		}
		else if((memory_bank_number == 189) && (memory_offset == factoryReset_addr))
 8004e7a:	1dfb      	adds	r3, r7, #7
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2bbd      	cmp	r3, #189	; 0xbd
 8004e80:	d108      	bne.n	8004e94 <dali_memory_read+0x90>
 8004e82:	1dbb      	adds	r3, r7, #6
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d104      	bne.n	8004e94 <dali_memory_read+0x90>
		{
			read.value = 0xFF;
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	18fb      	adds	r3, r7, r3
 8004e8e:	22ff      	movs	r2, #255	; 0xff
 8004e90:	705a      	strb	r2, [r3, #1]
 8004e92:	e004      	b.n	8004e9e <dali_memory_read+0x9a>
		}
		else
		{
			read.value = *(uint8_t *)read_address;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	781a      	ldrb	r2, [r3, #0]
 8004e98:	2308      	movs	r3, #8
 8004e9a:	18fb      	adds	r3, r7, r3
 8004e9c:	705a      	strb	r2, [r3, #1]
		}
		read.success = 1;
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	18fb      	adds	r3, r7, r3
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	701a      	strb	r2, [r3, #0]
	}
	return read;
 8004ea6:	210c      	movs	r1, #12
 8004ea8:	187b      	adds	r3, r7, r1
 8004eaa:	2208      	movs	r2, #8
 8004eac:	18ba      	adds	r2, r7, r2
 8004eae:	8812      	ldrh	r2, [r2, #0]
 8004eb0:	801a      	strh	r2, [r3, #0]
 8004eb2:	187a      	adds	r2, r7, r1
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	7811      	ldrb	r1, [r2, #0]
 8004eb8:	20ff      	movs	r0, #255	; 0xff
 8004eba:	4001      	ands	r1, r0
 8004ebc:	20ff      	movs	r0, #255	; 0xff
 8004ebe:	4383      	bics	r3, r0
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	7852      	ldrb	r2, [r2, #1]
 8004ec4:	21ff      	movs	r1, #255	; 0xff
 8004ec6:	400a      	ands	r2, r1
 8004ec8:	0212      	lsls	r2, r2, #8
 8004eca:	4905      	ldr	r1, [pc, #20]	; (8004ee0 <dali_memory_read+0xdc>)
 8004ecc:	400b      	ands	r3, r1
 8004ece:	4313      	orrs	r3, r2
}
 8004ed0:	1c18      	adds	r0, r3, #0
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b006      	add	sp, #24
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	200000d8 	.word	0x200000d8
 8004edc:	200008c0 	.word	0x200008c0
 8004ee0:	ffff00ff 	.word	0xffff00ff

08004ee4 <dali_memory_write>:

uint8_t dali_memory_write(uint8_t memory_bank_number, uint8_t memory_offset, uint8_t data)
{
 8004ee4:	b590      	push	{r4, r7, lr}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	0004      	movs	r4, r0
 8004eec:	0008      	movs	r0, r1
 8004eee:	0011      	movs	r1, r2
 8004ef0:	1dfb      	adds	r3, r7, #7
 8004ef2:	1c22      	adds	r2, r4, #0
 8004ef4:	701a      	strb	r2, [r3, #0]
 8004ef6:	1dbb      	adds	r3, r7, #6
 8004ef8:	1c02      	adds	r2, r0, #0
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	1d7b      	adds	r3, r7, #5
 8004efe:	1c0a      	adds	r2, r1, #0
 8004f00:	701a      	strb	r2, [r3, #0]
	uint32_t memory_bank_address = memory_bank_addr[memory_bank_number];
 8004f02:	1dfb      	adds	r3, r7, #7
 8004f04:	781a      	ldrb	r2, [r3, #0]
 8004f06:	4b31      	ldr	r3, [pc, #196]	; (8004fcc <dali_memory_write+0xe8>)
 8004f08:	0092      	lsls	r2, r2, #2
 8004f0a:	58d3      	ldr	r3, [r2, r3]
 8004f0c:	60fb      	str	r3, [r7, #12]
	uint32_t write_address = memory_bank_address + memory_offset;
 8004f0e:	1dbb      	adds	r3, r7, #6
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	18d3      	adds	r3, r2, r3
 8004f16:	60bb      	str	r3, [r7, #8]
	// Write lock byte
	if((memory_bank_number != 0) && (memory_offset == lockByte_addr))
 8004f18:	1dfb      	adds	r3, r7, #7
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00b      	beq.n	8004f38 <dali_memory_write+0x54>
 8004f20:	1dbb      	adds	r3, r7, #6
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d107      	bne.n	8004f38 <dali_memory_write+0x54>
	{
		lock_byte[memory_bank_number] = data;
 8004f28:	1dfb      	adds	r3, r7, #7
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	4a28      	ldr	r2, [pc, #160]	; (8004fd0 <dali_memory_write+0xec>)
 8004f2e:	1d79      	adds	r1, r7, #5
 8004f30:	7809      	ldrb	r1, [r1, #0]
 8004f32:	54d1      	strb	r1, [r2, r3]
		return 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	e044      	b.n	8004fc2 <dali_memory_write+0xde>
	}
	if((memory_bank_number == 189))
 8004f38:	1dfb      	adds	r3, r7, #7
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2bbd      	cmp	r3, #189	; 0xbd
 8004f3e:	d11d      	bne.n	8004f7c <dali_memory_write+0x98>
	{
		if(memory_offset == factoryReset_addr)
 8004f40:	1dbb      	adds	r3, r7, #6
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d107      	bne.n	8004f58 <dali_memory_write+0x74>
		{
			return (data) ? 0 : 2;
 8004f48:	1d7b      	adds	r3, r7, #5
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <dali_memory_write+0x70>
 8004f50:	2300      	movs	r3, #0
 8004f52:	e036      	b.n	8004fc2 <dali_memory_write+0xde>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e034      	b.n	8004fc2 <dali_memory_write+0xde>
		}
		else if(memory_offset == calibrateDark)
 8004f58:	1dbb      	adds	r3, r7, #6
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b0a      	cmp	r3, #10
 8004f5e:	d104      	bne.n	8004f6a <dali_memory_write+0x86>
		{
			darkCalibrate = 1;
 8004f60:	4b1c      	ldr	r3, [pc, #112]	; (8004fd4 <dali_memory_write+0xf0>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	701a      	strb	r2, [r3, #0]
			return 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e02b      	b.n	8004fc2 <dali_memory_write+0xde>
		}
		else if(memory_offset == calibrateFullScale)
 8004f6a:	1dbb      	adds	r3, r7, #6
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b0b      	cmp	r3, #11
 8004f70:	d127      	bne.n	8004fc2 <dali_memory_write+0xde>
		{
			fullScaleCalibrate = 1;
 8004f72:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <dali_memory_write+0xf4>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	701a      	strb	r2, [r3, #0]
			return 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	e022      	b.n	8004fc2 <dali_memory_write+0xde>
		}
	}
	// Check if the memory bank location is locked or not implemented
	else if((memory_bank_addr[memory_bank_number] == 0) || (lock_byte[memory_bank_number] != 0x55) || (memory_offset > * (uint8_t *) memory_bank_address) || ((memory_bank_number == 189) && (memory_offset != parameterLock_addr) && (parameterLock!= 0)))
 8004f7c:	1dfb      	adds	r3, r7, #7
 8004f7e:	781a      	ldrb	r2, [r3, #0]
 8004f80:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <dali_memory_write+0xe8>)
 8004f82:	0092      	lsls	r2, r2, #2
 8004f84:	58d3      	ldr	r3, [r2, r3]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d017      	beq.n	8004fba <dali_memory_write+0xd6>
 8004f8a:	1dfb      	adds	r3, r7, #7
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	4a10      	ldr	r2, [pc, #64]	; (8004fd0 <dali_memory_write+0xec>)
 8004f90:	5cd3      	ldrb	r3, [r2, r3]
 8004f92:	2b55      	cmp	r3, #85	; 0x55
 8004f94:	d111      	bne.n	8004fba <dali_memory_write+0xd6>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	1dba      	adds	r2, r7, #6
 8004f9c:	7812      	ldrb	r2, [r2, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d80b      	bhi.n	8004fba <dali_memory_write+0xd6>
 8004fa2:	1dfb      	adds	r3, r7, #7
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2bbd      	cmp	r3, #189	; 0xbd
 8004fa8:	d109      	bne.n	8004fbe <dali_memory_write+0xda>
 8004faa:	1dbb      	adds	r3, r7, #6
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d005      	beq.n	8004fbe <dali_memory_write+0xda>
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <dali_memory_write+0xf8>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <dali_memory_write+0xda>
	{
		return 1;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e001      	b.n	8004fc2 <dali_memory_write+0xde>
	}
	else
	{
		return 2;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e7ff      	b.n	8004fc2 <dali_memory_write+0xde>
	}
}
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	b005      	add	sp, #20
 8004fc8:	bd90      	pop	{r4, r7, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	200000d8 	.word	0x200000d8
 8004fd0:	200008c0 	.word	0x200008c0
 8004fd4:	200004d8 	.word	0x200004d8
 8004fd8:	200004d9 	.word	0x200004d9
 8004fdc:	0800f403 	.word	0x0800f403

08004fe0 <memory_write>:

// Need to split the write function into 2 separate functions so that the device can response with a backframe without waiting for the memory write
void memory_write(uint8_t memory_bank_number, uint8_t memory_offset, uint8_t data)
{
 8004fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe2:	b0cb      	sub	sp, #300	; 0x12c
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	0006      	movs	r6, r0
 8004fe8:	0008      	movs	r0, r1
 8004fea:	0011      	movs	r1, r2
 8004fec:	4bb5      	ldr	r3, [pc, #724]	; (80052c4 <memory_write+0x2e4>)
 8004fee:	2294      	movs	r2, #148	; 0x94
 8004ff0:	0052      	lsls	r2, r2, #1
 8004ff2:	4694      	mov	ip, r2
 8004ff4:	44bc      	add	ip, r7
 8004ff6:	4463      	add	r3, ip
 8004ff8:	1c32      	adds	r2, r6, #0
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	4bb2      	ldr	r3, [pc, #712]	; (80052c8 <memory_write+0x2e8>)
 8004ffe:	2294      	movs	r2, #148	; 0x94
 8005000:	0052      	lsls	r2, r2, #1
 8005002:	4694      	mov	ip, r2
 8005004:	44bc      	add	ip, r7
 8005006:	4463      	add	r3, ip
 8005008:	1c02      	adds	r2, r0, #0
 800500a:	701a      	strb	r2, [r3, #0]
 800500c:	4baf      	ldr	r3, [pc, #700]	; (80052cc <memory_write+0x2ec>)
 800500e:	2294      	movs	r2, #148	; 0x94
 8005010:	0052      	lsls	r2, r2, #1
 8005012:	4694      	mov	ip, r2
 8005014:	44bc      	add	ip, r7
 8005016:	4463      	add	r3, ip
 8005018:	1c0a      	adds	r2, r1, #0
 800501a:	701a      	strb	r2, [r3, #0]
	uint32_t memory_bank_address = memory_bank_addr[memory_bank_number];
 800501c:	4ba9      	ldr	r3, [pc, #676]	; (80052c4 <memory_write+0x2e4>)
 800501e:	2294      	movs	r2, #148	; 0x94
 8005020:	0052      	lsls	r2, r2, #1
 8005022:	4694      	mov	ip, r2
 8005024:	44bc      	add	ip, r7
 8005026:	4463      	add	r3, ip
 8005028:	781a      	ldrb	r2, [r3, #0]
 800502a:	4ba9      	ldr	r3, [pc, #676]	; (80052d0 <memory_write+0x2f0>)
 800502c:	0092      	lsls	r2, r2, #2
 800502e:	58d3      	ldr	r3, [r2, r3]
 8005030:	228c      	movs	r2, #140	; 0x8c
 8005032:	0052      	lsls	r2, r2, #1
 8005034:	18b9      	adds	r1, r7, r2
 8005036:	600b      	str	r3, [r1, #0]
	uint32_t write_address = memory_bank_address + memory_offset;
 8005038:	4ba3      	ldr	r3, [pc, #652]	; (80052c8 <memory_write+0x2e8>)
 800503a:	2194      	movs	r1, #148	; 0x94
 800503c:	0049      	lsls	r1, r1, #1
 800503e:	468c      	mov	ip, r1
 8005040:	44bc      	add	ip, r7
 8005042:	4463      	add	r3, ip
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	18ba      	adds	r2, r7, r2
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	18d3      	adds	r3, r2, r3
 800504c:	228a      	movs	r2, #138	; 0x8a
 800504e:	0052      	lsls	r2, r2, #1
 8005050:	18ba      	adds	r2, r7, r2
 8005052:	6013      	str	r3, [r2, #0]
	if((memory_bank_number == 189) && (memory_offset == factoryReset_addr) && (data == 0))
 8005054:	4b9b      	ldr	r3, [pc, #620]	; (80052c4 <memory_write+0x2e4>)
 8005056:	2294      	movs	r2, #148	; 0x94
 8005058:	0052      	lsls	r2, r2, #1
 800505a:	4694      	mov	ip, r2
 800505c:	44bc      	add	ip, r7
 800505e:	4463      	add	r3, ip
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2bbd      	cmp	r3, #189	; 0xbd
 8005064:	d115      	bne.n	8005092 <memory_write+0xb2>
 8005066:	4b98      	ldr	r3, [pc, #608]	; (80052c8 <memory_write+0x2e8>)
 8005068:	2294      	movs	r2, #148	; 0x94
 800506a:	0052      	lsls	r2, r2, #1
 800506c:	4694      	mov	ip, r2
 800506e:	44bc      	add	ip, r7
 8005070:	4463      	add	r3, ip
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b04      	cmp	r3, #4
 8005076:	d10c      	bne.n	8005092 <memory_write+0xb2>
 8005078:	4b94      	ldr	r3, [pc, #592]	; (80052cc <memory_write+0x2ec>)
 800507a:	2294      	movs	r2, #148	; 0x94
 800507c:	0052      	lsls	r2, r2, #1
 800507e:	4694      	mov	ip, r2
 8005080:	44bc      	add	ip, r7
 8005082:	4463      	add	r3, ip
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <memory_write+0xb2>
		dali_memory_reset(189);
 800508a:	20bd      	movs	r0, #189	; 0xbd
 800508c:	f000 f924 	bl	80052d8 <dali_memory_reset>
 8005090:	e114      	b.n	80052bc <memory_write+0x2dc>
	else
	{
		// Add up to 4 memory temporary banks if more banks are implemented in one memory page (1 page = 4 banks)
			// Currently only implement 2 memory banks, each stays on separate memory page so we only need 1 storing array
			uint32_t memory_temp_0[64];
			uint32_t memory_page_addr = (memory_bank_address/0x400)*0x400;
 8005092:	238c      	movs	r3, #140	; 0x8c
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	18fb      	adds	r3, r7, r3
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	0a9b      	lsrs	r3, r3, #10
 800509c:	029b      	lsls	r3, r3, #10
 800509e:	2288      	movs	r2, #136	; 0x88
 80050a0:	0052      	lsls	r2, r2, #1
 80050a2:	18ba      	adds	r2, r7, r2
 80050a4:	6013      	str	r3, [r2, #0]
			dali_NVM_unlock();
 80050a6:	f7ff fe85 	bl	8004db4 <dali_NVM_unlock>
			for (uint8_t i = 0; i < ((* (uint8_t *) memory_page_addr)/4); i++) // Only save implemented locations in the memory bank
 80050aa:	2328      	movs	r3, #40	; 0x28
 80050ac:	33ff      	adds	r3, #255	; 0xff
 80050ae:	18fb      	adds	r3, r7, r3
 80050b0:	2200      	movs	r2, #0
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	e01c      	b.n	80050f0 <memory_write+0x110>
			{
				memory_temp_0[i] = * (uint32_t *) (memory_page_addr + i*4);
 80050b6:	2128      	movs	r1, #40	; 0x28
 80050b8:	31ff      	adds	r1, #255	; 0xff
 80050ba:	187b      	adds	r3, r7, r1
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	001a      	movs	r2, r3
 80050c2:	2388      	movs	r3, #136	; 0x88
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	18fb      	adds	r3, r7, r3
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	18d3      	adds	r3, r2, r3
 80050cc:	0008      	movs	r0, r1
 80050ce:	187a      	adds	r2, r7, r1
 80050d0:	7812      	ldrb	r2, [r2, #0]
 80050d2:	6819      	ldr	r1, [r3, #0]
 80050d4:	4b7f      	ldr	r3, [pc, #508]	; (80052d4 <memory_write+0x2f4>)
 80050d6:	2694      	movs	r6, #148	; 0x94
 80050d8:	0076      	lsls	r6, r6, #1
 80050da:	46b4      	mov	ip, r6
 80050dc:	44bc      	add	ip, r7
 80050de:	4463      	add	r3, ip
 80050e0:	0092      	lsls	r2, r2, #2
 80050e2:	50d1      	str	r1, [r2, r3]
			for (uint8_t i = 0; i < ((* (uint8_t *) memory_page_addr)/4); i++) // Only save implemented locations in the memory bank
 80050e4:	0001      	movs	r1, r0
 80050e6:	187b      	adds	r3, r7, r1
 80050e8:	781a      	ldrb	r2, [r3, #0]
 80050ea:	187b      	adds	r3, r7, r1
 80050ec:	3201      	adds	r2, #1
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	2388      	movs	r3, #136	; 0x88
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	18fb      	adds	r3, r7, r3
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	089b      	lsrs	r3, r3, #2
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2228      	movs	r2, #40	; 0x28
 8005100:	32ff      	adds	r2, #255	; 0xff
 8005102:	18ba      	adds	r2, r7, r2
 8005104:	7812      	ldrb	r2, [r2, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d3d5      	bcc.n	80050b6 <memory_write+0xd6>
			}

			// Erase memory page
			uint32_t erase_err = erase_page(memory_page_addr);
 800510a:	2388      	movs	r3, #136	; 0x88
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	18fb      	adds	r3, r7, r3
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	0018      	movs	r0, r3
 8005114:	f7ff fe16 	bl	8004d44 <erase_page>
 8005118:	0003      	movs	r3, r0
 800511a:	2286      	movs	r2, #134	; 0x86
 800511c:	0052      	lsls	r2, r2, #1
 800511e:	18b9      	adds	r1, r7, r2
 8005120:	600b      	str	r3, [r1, #0]
			if (erase_err != 0xFFFFFFFF)
 8005122:	18bb      	adds	r3, r7, r2
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3301      	adds	r3, #1
 8005128:	d000      	beq.n	800512c <memory_write+0x14c>
 800512a:	e0c6      	b.n	80052ba <memory_write+0x2da>
				return 1;
			}

			// Modify the temporary memory with the new data
			uint32_t temp;
			temp = memory_temp_0[(write_address - memory_page_addr)/4];
 800512c:	218a      	movs	r1, #138	; 0x8a
 800512e:	0049      	lsls	r1, r1, #1
 8005130:	187b      	adds	r3, r7, r1
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	2388      	movs	r3, #136	; 0x88
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	18fb      	adds	r3, r7, r3
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	089a      	lsrs	r2, r3, #2
 8005140:	4b64      	ldr	r3, [pc, #400]	; (80052d4 <memory_write+0x2f4>)
 8005142:	2094      	movs	r0, #148	; 0x94
 8005144:	0040      	lsls	r0, r0, #1
 8005146:	4684      	mov	ip, r0
 8005148:	44bc      	add	ip, r7
 800514a:	4463      	add	r3, ip
 800514c:	0092      	lsls	r2, r2, #2
 800514e:	58d3      	ldr	r3, [r2, r3]
 8005150:	2290      	movs	r2, #144	; 0x90
 8005152:	0052      	lsls	r2, r2, #1
 8005154:	18ba      	adds	r2, r7, r2
 8005156:	6013      	str	r3, [r2, #0]

			switch(write_address % 4)
 8005158:	187b      	adds	r3, r7, r1
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2203      	movs	r2, #3
 800515e:	4013      	ands	r3, r2
 8005160:	2b01      	cmp	r3, #1
 8005162:	d017      	beq.n	8005194 <memory_write+0x1b4>
 8005164:	d304      	bcc.n	8005170 <memory_write+0x190>
 8005166:	2b02      	cmp	r3, #2
 8005168:	d02d      	beq.n	80051c6 <memory_write+0x1e6>
 800516a:	2b03      	cmp	r3, #3
 800516c:	d042      	beq.n	80051f4 <memory_write+0x214>
 800516e:	e054      	b.n	800521a <memory_write+0x23a>
			{
			case 0:
				temp = (temp & 0xFFFFFF00) | data;
 8005170:	2190      	movs	r1, #144	; 0x90
 8005172:	0049      	lsls	r1, r1, #1
 8005174:	187b      	adds	r3, r7, r1
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	22ff      	movs	r2, #255	; 0xff
 800517a:	4393      	bics	r3, r2
 800517c:	001a      	movs	r2, r3
 800517e:	4b53      	ldr	r3, [pc, #332]	; (80052cc <memory_write+0x2ec>)
 8005180:	2094      	movs	r0, #148	; 0x94
 8005182:	0040      	lsls	r0, r0, #1
 8005184:	4684      	mov	ip, r0
 8005186:	44bc      	add	ip, r7
 8005188:	4463      	add	r3, ip
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	4313      	orrs	r3, r2
 800518e:	187a      	adds	r2, r7, r1
 8005190:	6013      	str	r3, [r2, #0]
				break;
 8005192:	e042      	b.n	800521a <memory_write+0x23a>
			case 1:
				temp = (temp & 0xFFFF0000) | (data << 8) | (temp & 0xFF);
 8005194:	2190      	movs	r1, #144	; 0x90
 8005196:	0049      	lsls	r1, r1, #1
 8005198:	187b      	adds	r3, r7, r1
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	0c1b      	lsrs	r3, r3, #16
 800519e:	041b      	lsls	r3, r3, #16
 80051a0:	4a4a      	ldr	r2, [pc, #296]	; (80052cc <memory_write+0x2ec>)
 80051a2:	2094      	movs	r0, #148	; 0x94
 80051a4:	0040      	lsls	r0, r0, #1
 80051a6:	4684      	mov	ip, r0
 80051a8:	44bc      	add	ip, r7
 80051aa:	4462      	add	r2, ip
 80051ac:	7812      	ldrb	r2, [r2, #0]
 80051ae:	0212      	lsls	r2, r2, #8
 80051b0:	431a      	orrs	r2, r3
 80051b2:	0008      	movs	r0, r1
 80051b4:	187b      	adds	r3, r7, r1
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	21ff      	movs	r1, #255	; 0xff
 80051ba:	400b      	ands	r3, r1
 80051bc:	4313      	orrs	r3, r2
 80051be:	0001      	movs	r1, r0
 80051c0:	187a      	adds	r2, r7, r1
 80051c2:	6013      	str	r3, [r2, #0]
				break;
 80051c4:	e029      	b.n	800521a <memory_write+0x23a>
			case 2:
				temp = (temp & 0xFF000000) | (data << 16) | (temp & 0xFFFF);
 80051c6:	2190      	movs	r1, #144	; 0x90
 80051c8:	0049      	lsls	r1, r1, #1
 80051ca:	187b      	adds	r3, r7, r1
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	0e1b      	lsrs	r3, r3, #24
 80051d0:	061b      	lsls	r3, r3, #24
 80051d2:	4a3e      	ldr	r2, [pc, #248]	; (80052cc <memory_write+0x2ec>)
 80051d4:	2094      	movs	r0, #148	; 0x94
 80051d6:	0040      	lsls	r0, r0, #1
 80051d8:	4684      	mov	ip, r0
 80051da:	44bc      	add	ip, r7
 80051dc:	4462      	add	r2, ip
 80051de:	7812      	ldrb	r2, [r2, #0]
 80051e0:	0412      	lsls	r2, r2, #16
 80051e2:	431a      	orrs	r2, r3
 80051e4:	187b      	adds	r3, r7, r1
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	041b      	lsls	r3, r3, #16
 80051ea:	0c1b      	lsrs	r3, r3, #16
 80051ec:	4313      	orrs	r3, r2
 80051ee:	187a      	adds	r2, r7, r1
 80051f0:	6013      	str	r3, [r2, #0]
				break;
 80051f2:	e012      	b.n	800521a <memory_write+0x23a>
			case 3:
				temp = (data << 24) | (temp & 0xFFFFFF);
 80051f4:	4b35      	ldr	r3, [pc, #212]	; (80052cc <memory_write+0x2ec>)
 80051f6:	2294      	movs	r2, #148	; 0x94
 80051f8:	0052      	lsls	r2, r2, #1
 80051fa:	4694      	mov	ip, r2
 80051fc:	44bc      	add	ip, r7
 80051fe:	4463      	add	r3, ip
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	061b      	lsls	r3, r3, #24
 8005204:	001a      	movs	r2, r3
 8005206:	2190      	movs	r1, #144	; 0x90
 8005208:	0049      	lsls	r1, r1, #1
 800520a:	187b      	adds	r3, r7, r1
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	021b      	lsls	r3, r3, #8
 8005210:	0a1b      	lsrs	r3, r3, #8
 8005212:	4313      	orrs	r3, r2
 8005214:	187a      	adds	r2, r7, r1
 8005216:	6013      	str	r3, [r2, #0]
				break;
 8005218:	46c0      	nop			; (mov r8, r8)
			}
			memory_temp_0[(write_address - memory_page_addr)/4] = temp;
 800521a:	238a      	movs	r3, #138	; 0x8a
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	2388      	movs	r3, #136	; 0x88
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	18fb      	adds	r3, r7, r3
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	089a      	lsrs	r2, r3, #2
 800522e:	4b29      	ldr	r3, [pc, #164]	; (80052d4 <memory_write+0x2f4>)
 8005230:	2194      	movs	r1, #148	; 0x94
 8005232:	0049      	lsls	r1, r1, #1
 8005234:	468c      	mov	ip, r1
 8005236:	44bc      	add	ip, r7
 8005238:	4463      	add	r3, ip
 800523a:	0092      	lsls	r2, r2, #2
 800523c:	2190      	movs	r1, #144	; 0x90
 800523e:	0049      	lsls	r1, r1, #1
 8005240:	1879      	adds	r1, r7, r1
 8005242:	6809      	ldr	r1, [r1, #0]
 8005244:	50d1      	str	r1, [r2, r3]

			// Write back temporary data to flash
			for (uint8_t i = 0; i < ((* (uint8_t *) memory_page_addr)/4); i++)
 8005246:	2320      	movs	r3, #32
 8005248:	33ff      	adds	r3, #255	; 0xff
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	2200      	movs	r2, #0
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	e023      	b.n	800529a <memory_write+0x2ba>
  __ASM volatile ("cpsid i" : : : "memory");
 8005252:	b672      	cpsid	i
			{
				__disable_irq();
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, memory_page_addr + i*4, memory_temp_0[i]);
 8005254:	2620      	movs	r6, #32
 8005256:	36ff      	adds	r6, #255	; 0xff
 8005258:	19bb      	adds	r3, r7, r6
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	001a      	movs	r2, r3
 8005260:	2388      	movs	r3, #136	; 0x88
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	18d1      	adds	r1, r2, r3
 800526a:	19bb      	adds	r3, r7, r6
 800526c:	781a      	ldrb	r2, [r3, #0]
 800526e:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <memory_write+0x2f4>)
 8005270:	2094      	movs	r0, #148	; 0x94
 8005272:	0040      	lsls	r0, r0, #1
 8005274:	4684      	mov	ip, r0
 8005276:	44bc      	add	ip, r7
 8005278:	4463      	add	r3, ip
 800527a:	0092      	lsls	r2, r2, #2
 800527c:	58d3      	ldr	r3, [r2, r3]
 800527e:	001c      	movs	r4, r3
 8005280:	2300      	movs	r3, #0
 8005282:	001d      	movs	r5, r3
 8005284:	0022      	movs	r2, r4
 8005286:	002b      	movs	r3, r5
 8005288:	2002      	movs	r0, #2
 800528a:	f001 fd35 	bl	8006cf8 <HAL_FLASH_Program>
  __ASM volatile ("cpsie i" : : : "memory");
 800528e:	b662      	cpsie	i
			for (uint8_t i = 0; i < ((* (uint8_t *) memory_page_addr)/4); i++)
 8005290:	19bb      	adds	r3, r7, r6
 8005292:	781a      	ldrb	r2, [r3, #0]
 8005294:	19bb      	adds	r3, r7, r6
 8005296:	3201      	adds	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	2388      	movs	r3, #136	; 0x88
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	18fb      	adds	r3, r7, r3
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	089b      	lsrs	r3, r3, #2
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2220      	movs	r2, #32
 80052aa:	32ff      	adds	r2, #255	; 0xff
 80052ac:	18ba      	adds	r2, r7, r2
 80052ae:	7812      	ldrb	r2, [r2, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d3ce      	bcc.n	8005252 <memory_write+0x272>
				__enable_irq();
			}
			dali_NVM_lock();
 80052b4:	f7ff fd92 	bl	8004ddc <dali_NVM_lock>
 80052b8:	e000      	b.n	80052bc <memory_write+0x2dc>
				return 1;
 80052ba:	46c0      	nop			; (mov r8, r8)
	}
}
 80052bc:	46bd      	mov	sp, r7
 80052be:	b04b      	add	sp, #300	; 0x12c
 80052c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	fffffedf 	.word	0xfffffedf
 80052c8:	fffffede 	.word	0xfffffede
 80052cc:	fffffedd 	.word	0xfffffedd
 80052d0:	200000d8 	.word	0x200000d8
 80052d4:	fffffee4 	.word	0xfffffee4

080052d8 <dali_memory_reset>:
void dali_memory_reset(uint8_t memory_bank_number)
{
 80052d8:	b5b0      	push	{r4, r5, r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af00      	add	r7, sp, #0
 80052de:	0002      	movs	r2, r0
 80052e0:	2117      	movs	r1, #23
 80052e2:	187b      	adds	r3, r7, r1
 80052e4:	701a      	strb	r2, [r3, #0]
	if ((memory_bank_number == 0) || (memory_bank_number == 189))
 80052e6:	187b      	adds	r3, r7, r1
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <dali_memory_reset+0x20>
 80052ee:	2317      	movs	r3, #23
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2bbd      	cmp	r3, #189	; 0xbd
 80052f6:	d153      	bne.n	80053a0 <dali_memory_reset+0xc8>
	{
		// return if all bytes are locked
		if (lock_byte[189] != 0x55)
 80052f8:	4b2b      	ldr	r3, [pc, #172]	; (80053a8 <dali_memory_reset+0xd0>)
 80052fa:	22bd      	movs	r2, #189	; 0xbd
 80052fc:	5c9b      	ldrb	r3, [r3, r2]
 80052fe:	2b55      	cmp	r3, #85	; 0x55
 8005300:	d14d      	bne.n	800539e <dali_memory_reset+0xc6>
			return;
		dali_NVM_unlock();
 8005302:	f7ff fd57 	bl	8004db4 <dali_NVM_unlock>
		// Currently only 1 memory bank is manufacturer-implemented, so reset all is the same as reset 1 bank
		uint32_t erase_err = erase_page(MEMORY_BANK_189_ADDR);
 8005306:	4b29      	ldr	r3, [pc, #164]	; (80053ac <dali_memory_reset+0xd4>)
 8005308:	0018      	movs	r0, r3
 800530a:	f7ff fd1b 	bl	8004d44 <erase_page>
 800530e:	0003      	movs	r3, r0
 8005310:	61fb      	str	r3, [r7, #28]

		// Write default values
		uint32_t dataW = (parameterLock_default << 24) | (lockByte_default << 16) | (indicatorByte << 8) | lastByte_memory_bank_189;
 8005312:	23ff      	movs	r3, #255	; 0xff
 8005314:	061a      	lsls	r2, r3, #24
 8005316:	23ff      	movs	r3, #255	; 0xff
 8005318:	041b      	lsls	r3, r3, #16
 800531a:	431a      	orrs	r2, r3
 800531c:	23ff      	movs	r3, #255	; 0xff
 800531e:	021b      	lsls	r3, r3, #8
 8005320:	4313      	orrs	r3, r2
 8005322:	2216      	movs	r2, #22
 8005324:	4313      	orrs	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8005328:	b672      	cpsid	i
		__disable_irq();
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, MEMORY_BANK_189_ADDR, dataW);
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	60bb      	str	r3, [r7, #8]
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	491e      	ldr	r1, [pc, #120]	; (80053ac <dali_memory_reset+0xd4>)
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2002      	movs	r0, #2
 800533a:	f001 fcdd 	bl	8006cf8 <HAL_FLASH_Program>
		dataW = (pidProportionalCoeff_default << 24) | (calibrationOffset_default << 16) | (calibrationScale_default << 8) | factoryReset_default;
 800533e:	23ff      	movs	r3, #255	; 0xff
 8005340:	061a      	lsls	r2, r3, #24
 8005342:	2300      	movs	r3, #0
 8005344:	041b      	lsls	r3, r3, #16
 8005346:	431a      	orrs	r2, r3
 8005348:	23ff      	movs	r3, #255	; 0xff
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	4313      	orrs	r3, r2
 800534e:	22ff      	movs	r2, #255	; 0xff
 8005350:	4313      	orrs	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, MEMORY_BANK_189_ADDR + 4, dataW);
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	2300      	movs	r3, #0
 800535a:	607b      	str	r3, [r7, #4]
 800535c:	4914      	ldr	r1, [pc, #80]	; (80053b0 <dali_memory_reset+0xd8>)
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2002      	movs	r0, #2
 8005364:	f001 fcc8 	bl	8006cf8 <HAL_FLASH_Program>
		dataW = (fullScaleRange_default << 16) | (pidDerivativeCoeff_default << 8) | pidIntegralCoeff_default ;
 8005368:	23fa      	movs	r3, #250	; 0xfa
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	041a      	lsls	r2, r3, #16
 800536e:	23ff      	movs	r3, #255	; 0xff
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	4313      	orrs	r3, r2
 8005374:	22ff      	movs	r2, #255	; 0xff
 8005376:	4313      	orrs	r3, r2
 8005378:	61bb      	str	r3, [r7, #24]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, MEMORY_BANK_189_ADDR + 8, dataW);
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	001c      	movs	r4, r3
 800537e:	2300      	movs	r3, #0
 8005380:	001d      	movs	r5, r3
 8005382:	490c      	ldr	r1, [pc, #48]	; (80053b4 <dali_memory_reset+0xdc>)
 8005384:	0022      	movs	r2, r4
 8005386:	002b      	movs	r3, r5
 8005388:	2002      	movs	r0, #2
 800538a:	f001 fcb5 	bl	8006cf8 <HAL_FLASH_Program>
  __ASM volatile ("cpsie i" : : : "memory");
 800538e:	b662      	cpsie	i
		__enable_irq();
		dali_NVM_lock();
 8005390:	f7ff fd24 	bl	8004ddc <dali_NVM_lock>
		lock_byte[189] = 0;
 8005394:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <dali_memory_reset+0xd0>)
 8005396:	22bd      	movs	r2, #189	; 0xbd
 8005398:	2100      	movs	r1, #0
 800539a:	5499      	strb	r1, [r3, r2]
 800539c:	e000      	b.n	80053a0 <dali_memory_reset+0xc8>
			return;
 800539e:	46c0      	nop			; (mov r8, r8)
	}
}
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b008      	add	sp, #32
 80053a4:	bdb0      	pop	{r4, r5, r7, pc}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	200008c0 	.word	0x200008c0
 80053ac:	0800f400 	.word	0x0800f400
 80053b0:	0800f404 	.word	0x0800f404
 80053b4:	0800f408 	.word	0x0800f408

080053b8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80053b8:	b590      	push	{r4, r7, lr}
 80053ba:	b089      	sub	sp, #36	; 0x24
 80053bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053be:	240c      	movs	r4, #12
 80053c0:	193b      	adds	r3, r7, r4
 80053c2:	0018      	movs	r0, r3
 80053c4:	2314      	movs	r3, #20
 80053c6:	001a      	movs	r2, r3
 80053c8:	2100      	movs	r1, #0
 80053ca:	f003 f921 	bl	8008610 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80053ce:	4b69      	ldr	r3, [pc, #420]	; (8005574 <MX_GPIO_Init+0x1bc>)
 80053d0:	695a      	ldr	r2, [r3, #20]
 80053d2:	4b68      	ldr	r3, [pc, #416]	; (8005574 <MX_GPIO_Init+0x1bc>)
 80053d4:	2180      	movs	r1, #128	; 0x80
 80053d6:	03c9      	lsls	r1, r1, #15
 80053d8:	430a      	orrs	r2, r1
 80053da:	615a      	str	r2, [r3, #20]
 80053dc:	4b65      	ldr	r3, [pc, #404]	; (8005574 <MX_GPIO_Init+0x1bc>)
 80053de:	695a      	ldr	r2, [r3, #20]
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	03db      	lsls	r3, r3, #15
 80053e4:	4013      	ands	r3, r2
 80053e6:	60bb      	str	r3, [r7, #8]
 80053e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ea:	4b62      	ldr	r3, [pc, #392]	; (8005574 <MX_GPIO_Init+0x1bc>)
 80053ec:	695a      	ldr	r2, [r3, #20]
 80053ee:	4b61      	ldr	r3, [pc, #388]	; (8005574 <MX_GPIO_Init+0x1bc>)
 80053f0:	2180      	movs	r1, #128	; 0x80
 80053f2:	0289      	lsls	r1, r1, #10
 80053f4:	430a      	orrs	r2, r1
 80053f6:	615a      	str	r2, [r3, #20]
 80053f8:	4b5e      	ldr	r3, [pc, #376]	; (8005574 <MX_GPIO_Init+0x1bc>)
 80053fa:	695a      	ldr	r2, [r3, #20]
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	029b      	lsls	r3, r3, #10
 8005400:	4013      	ands	r3, r2
 8005402:	607b      	str	r3, [r7, #4]
 8005404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005406:	4b5b      	ldr	r3, [pc, #364]	; (8005574 <MX_GPIO_Init+0x1bc>)
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	4b5a      	ldr	r3, [pc, #360]	; (8005574 <MX_GPIO_Init+0x1bc>)
 800540c:	2180      	movs	r1, #128	; 0x80
 800540e:	02c9      	lsls	r1, r1, #11
 8005410:	430a      	orrs	r2, r1
 8005412:	615a      	str	r2, [r3, #20]
 8005414:	4b57      	ldr	r3, [pc, #348]	; (8005574 <MX_GPIO_Init+0x1bc>)
 8005416:	695a      	ldr	r2, [r3, #20]
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	02db      	lsls	r3, r3, #11
 800541c:	4013      	ands	r3, r2
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TX_Pin|LED_Pin, GPIO_PIN_RESET);
 8005422:	2382      	movs	r3, #130	; 0x82
 8005424:	0219      	lsls	r1, r3, #8
 8005426:	2390      	movs	r3, #144	; 0x90
 8005428:	05db      	lsls	r3, r3, #23
 800542a:	2200      	movs	r2, #0
 800542c:	0018      	movs	r0, r3
 800542e:	f001 fff0 	bl	8007412 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_GPIO_Port, TP_Pin, GPIO_PIN_RESET);
 8005432:	4b51      	ldr	r3, [pc, #324]	; (8005578 <MX_GPIO_Init+0x1c0>)
 8005434:	2200      	movs	r2, #0
 8005436:	2101      	movs	r1, #1
 8005438:	0018      	movs	r0, r3
 800543a:	f001 ffea 	bl	8007412 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800543e:	193b      	adds	r3, r7, r4
 8005440:	2203      	movs	r2, #3
 8005442:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005444:	193b      	adds	r3, r7, r4
 8005446:	2203      	movs	r2, #3
 8005448:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800544a:	193b      	adds	r3, r7, r4
 800544c:	2200      	movs	r2, #0
 800544e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005450:	193b      	adds	r3, r7, r4
 8005452:	4a4a      	ldr	r2, [pc, #296]	; (800557c <MX_GPIO_Init+0x1c4>)
 8005454:	0019      	movs	r1, r3
 8005456:	0010      	movs	r0, r2
 8005458:	f001 fe4e 	bl	80070f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA3 PA5 
                           PA6 PA7 PA8 PA11 
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5 
 800545c:	193b      	adds	r3, r7, r4
 800545e:	4a48      	ldr	r2, [pc, #288]	; (8005580 <MX_GPIO_Init+0x1c8>)
 8005460:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11 
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005462:	193b      	adds	r3, r7, r4
 8005464:	2203      	movs	r2, #3
 8005466:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005468:	193b      	adds	r3, r7, r4
 800546a:	2200      	movs	r2, #0
 800546c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800546e:	193a      	adds	r2, r7, r4
 8005470:	2390      	movs	r3, #144	; 0x90
 8005472:	05db      	lsls	r3, r3, #23
 8005474:	0011      	movs	r1, r2
 8005476:	0018      	movs	r0, r3
 8005478:	f001 fe3e 	bl	80070f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR_CONFIG_Pin;
 800547c:	193b      	adds	r3, r7, r4
 800547e:	2210      	movs	r2, #16
 8005480:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005482:	193b      	adds	r3, r7, r4
 8005484:	2200      	movs	r2, #0
 8005486:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005488:	193b      	adds	r3, r7, r4
 800548a:	2201      	movs	r2, #1
 800548c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SENSOR_CONFIG_GPIO_Port, &GPIO_InitStruct);
 800548e:	193a      	adds	r2, r7, r4
 8005490:	2390      	movs	r3, #144	; 0x90
 8005492:	05db      	lsls	r3, r3, #23
 8005494:	0011      	movs	r1, r2
 8005496:	0018      	movs	r0, r3
 8005498:	f001 fe2e 	bl	80070f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB3 PB4 
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800549c:	193b      	adds	r3, r7, r4
 800549e:	22fd      	movs	r2, #253	; 0xfd
 80054a0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054a2:	193b      	adds	r3, r7, r4
 80054a4:	2203      	movs	r2, #3
 80054a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a8:	193b      	adds	r3, r7, r4
 80054aa:	2200      	movs	r2, #0
 80054ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ae:	193b      	adds	r3, r7, r4
 80054b0:	4a31      	ldr	r2, [pc, #196]	; (8005578 <MX_GPIO_Init+0x1c0>)
 80054b2:	0019      	movs	r1, r3
 80054b4:	0010      	movs	r0, r2
 80054b6:	f001 fe1f 	bl	80070f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TX_Pin;
 80054ba:	0021      	movs	r1, r4
 80054bc:	187b      	adds	r3, r7, r1
 80054be:	2280      	movs	r2, #128	; 0x80
 80054c0:	0092      	lsls	r2, r2, #2
 80054c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054c4:	000c      	movs	r4, r1
 80054c6:	193b      	adds	r3, r7, r4
 80054c8:	2201      	movs	r2, #1
 80054ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054cc:	193b      	adds	r3, r7, r4
 80054ce:	2200      	movs	r2, #0
 80054d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80054d2:	193b      	adds	r3, r7, r4
 80054d4:	2201      	movs	r2, #1
 80054d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 80054d8:	193a      	adds	r2, r7, r4
 80054da:	2390      	movs	r3, #144	; 0x90
 80054dc:	05db      	lsls	r3, r3, #23
 80054de:	0011      	movs	r1, r2
 80054e0:	0018      	movs	r0, r3
 80054e2:	f001 fe09 	bl	80070f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RX_Pin;
 80054e6:	193b      	adds	r3, r7, r4
 80054e8:	2280      	movs	r2, #128	; 0x80
 80054ea:	00d2      	lsls	r2, r2, #3
 80054ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80054ee:	193b      	adds	r3, r7, r4
 80054f0:	4a24      	ldr	r2, [pc, #144]	; (8005584 <MX_GPIO_Init+0x1cc>)
 80054f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054f4:	193b      	adds	r3, r7, r4
 80054f6:	2201      	movs	r2, #1
 80054f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 80054fa:	193a      	adds	r2, r7, r4
 80054fc:	2390      	movs	r3, #144	; 0x90
 80054fe:	05db      	lsls	r3, r3, #23
 8005500:	0011      	movs	r1, r2
 8005502:	0018      	movs	r0, r3
 8005504:	f001 fdf8 	bl	80070f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005508:	0021      	movs	r1, r4
 800550a:	187b      	adds	r3, r7, r1
 800550c:	2280      	movs	r2, #128	; 0x80
 800550e:	0212      	lsls	r2, r2, #8
 8005510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005512:	187b      	adds	r3, r7, r1
 8005514:	2201      	movs	r2, #1
 8005516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005518:	187b      	adds	r3, r7, r1
 800551a:	2201      	movs	r2, #1
 800551c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800551e:	187b      	adds	r3, r7, r1
 8005520:	2200      	movs	r2, #0
 8005522:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005524:	000c      	movs	r4, r1
 8005526:	187a      	adds	r2, r7, r1
 8005528:	2390      	movs	r3, #144	; 0x90
 800552a:	05db      	lsls	r3, r3, #23
 800552c:	0011      	movs	r1, r2
 800552e:	0018      	movs	r0, r3
 8005530:	f001 fde2 	bl	80070f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_Pin;
 8005534:	0021      	movs	r1, r4
 8005536:	187b      	adds	r3, r7, r1
 8005538:	2201      	movs	r2, #1
 800553a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800553c:	187b      	adds	r3, r7, r1
 800553e:	2201      	movs	r2, #1
 8005540:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005542:	187b      	adds	r3, r7, r1
 8005544:	2201      	movs	r2, #1
 8005546:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005548:	187b      	adds	r3, r7, r1
 800554a:	2200      	movs	r2, #0
 800554c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TP_GPIO_Port, &GPIO_InitStruct);
 800554e:	187b      	adds	r3, r7, r1
 8005550:	4a09      	ldr	r2, [pc, #36]	; (8005578 <MX_GPIO_Init+0x1c0>)
 8005552:	0019      	movs	r1, r3
 8005554:	0010      	movs	r0, r2
 8005556:	f001 fdcf 	bl	80070f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800555a:	2200      	movs	r2, #0
 800555c:	2100      	movs	r1, #0
 800555e:	2007      	movs	r0, #7
 8005560:	f001 fb98 	bl	8006c94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8005564:	2007      	movs	r0, #7
 8005566:	f001 fbaa 	bl	8006cbe <HAL_NVIC_EnableIRQ>

}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	46bd      	mov	sp, r7
 800556e:	b009      	add	sp, #36	; 0x24
 8005570:	bd90      	pop	{r4, r7, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	40021000 	.word	0x40021000
 8005578:	48000400 	.word	0x48000400
 800557c:	48001400 	.word	0x48001400
 8005580:	000019ed 	.word	0x000019ed
 8005584:	10310000 	.word	0x10310000

08005588 <writePin>:

/* USER CODE BEGIN 2 */
void writePin(uint16_t pin, uint8_t PinState)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	0002      	movs	r2, r0
 8005590:	1dbb      	adds	r3, r7, #6
 8005592:	801a      	strh	r2, [r3, #0]
 8005594:	1d7b      	adds	r3, r7, #5
 8005596:	1c0a      	adds	r2, r1, #0
 8005598:	701a      	strb	r2, [r3, #0]
	if((pin == TX_Pin) || (pin == RX_Pin) || (pin == LED_Pin))
 800559a:	1dbb      	adds	r3, r7, #6
 800559c:	881a      	ldrh	r2, [r3, #0]
 800559e:	2380      	movs	r3, #128	; 0x80
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d00b      	beq.n	80055be <writePin+0x36>
 80055a6:	1dbb      	adds	r3, r7, #6
 80055a8:	881a      	ldrh	r2, [r3, #0]
 80055aa:	2380      	movs	r3, #128	; 0x80
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d005      	beq.n	80055be <writePin+0x36>
 80055b2:	1dbb      	adds	r3, r7, #6
 80055b4:	881a      	ldrh	r2, [r3, #0]
 80055b6:	2380      	movs	r3, #128	; 0x80
 80055b8:	021b      	lsls	r3, r3, #8
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d109      	bne.n	80055d2 <writePin+0x4a>
	{
		HAL_GPIO_WritePin(GPIOA, pin, PinState);
 80055be:	1d7b      	adds	r3, r7, #5
 80055c0:	781a      	ldrb	r2, [r3, #0]
 80055c2:	1dbb      	adds	r3, r7, #6
 80055c4:	8819      	ldrh	r1, [r3, #0]
 80055c6:	2390      	movs	r3, #144	; 0x90
 80055c8:	05db      	lsls	r3, r3, #23
 80055ca:	0018      	movs	r0, r3
 80055cc:	f001 ff21 	bl	8007412 <HAL_GPIO_WritePin>
 80055d0:	e007      	b.n	80055e2 <writePin+0x5a>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, pin, PinState);
 80055d2:	1d7b      	adds	r3, r7, #5
 80055d4:	781a      	ldrb	r2, [r3, #0]
 80055d6:	1dbb      	adds	r3, r7, #6
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	4804      	ldr	r0, [pc, #16]	; (80055ec <writePin+0x64>)
 80055dc:	0019      	movs	r1, r3
 80055de:	f001 ff18 	bl	8007412 <HAL_GPIO_WritePin>
	}
}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b002      	add	sp, #8
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	48000400 	.word	0x48000400

080055f0 <readPin>:

uint8_t readPin(uint16_t pin)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	0002      	movs	r2, r0
 80055f8:	1dbb      	adds	r3, r7, #6
 80055fa:	801a      	strh	r2, [r3, #0]
	if((pin == TX_Pin) || (pin == RX_Pin) || (pin == SENSOR_CONFIG_Pin))
 80055fc:	1dbb      	adds	r3, r7, #6
 80055fe:	881a      	ldrh	r2, [r3, #0]
 8005600:	2380      	movs	r3, #128	; 0x80
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	429a      	cmp	r2, r3
 8005606:	d009      	beq.n	800561c <readPin+0x2c>
 8005608:	1dbb      	adds	r3, r7, #6
 800560a:	881a      	ldrh	r2, [r3, #0]
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	429a      	cmp	r2, r3
 8005612:	d003      	beq.n	800561c <readPin+0x2c>
 8005614:	1dbb      	adds	r3, r7, #6
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	2b10      	cmp	r3, #16
 800561a:	d109      	bne.n	8005630 <readPin+0x40>
	{
		return HAL_GPIO_ReadPin(GPIOA, pin);
 800561c:	1dbb      	adds	r3, r7, #6
 800561e:	881a      	ldrh	r2, [r3, #0]
 8005620:	2390      	movs	r3, #144	; 0x90
 8005622:	05db      	lsls	r3, r3, #23
 8005624:	0011      	movs	r1, r2
 8005626:	0018      	movs	r0, r3
 8005628:	f001 fed6 	bl	80073d8 <HAL_GPIO_ReadPin>
 800562c:	0003      	movs	r3, r0
 800562e:	e007      	b.n	8005640 <readPin+0x50>
	}
	else
	{
		return HAL_GPIO_ReadPin(GPIOB, pin);
 8005630:	1dbb      	adds	r3, r7, #6
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	4a04      	ldr	r2, [pc, #16]	; (8005648 <readPin+0x58>)
 8005636:	0019      	movs	r1, r3
 8005638:	0010      	movs	r0, r2
 800563a:	f001 fecd 	bl	80073d8 <HAL_GPIO_ReadPin>
 800563e:	0003      	movs	r3, r0
	}
}
 8005640:	0018      	movs	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	b002      	add	sp, #8
 8005646:	bd80      	pop	{r7, pc}
 8005648:	48000400 	.word	0x48000400

0800564c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8005650:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <MX_IWDG_Init+0x34>)
 8005652:	4a0c      	ldr	r2, [pc, #48]	; (8005684 <MX_IWDG_Init+0x38>)
 8005654:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8005656:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <MX_IWDG_Init+0x34>)
 8005658:	2204      	movs	r2, #4
 800565a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800565c:	4b08      	ldr	r3, [pc, #32]	; (8005680 <MX_IWDG_Init+0x34>)
 800565e:	4a0a      	ldr	r2, [pc, #40]	; (8005688 <MX_IWDG_Init+0x3c>)
 8005660:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 1249;
 8005662:	4b07      	ldr	r3, [pc, #28]	; (8005680 <MX_IWDG_Init+0x34>)
 8005664:	4a09      	ldr	r2, [pc, #36]	; (800568c <MX_IWDG_Init+0x40>)
 8005666:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8005668:	4b05      	ldr	r3, [pc, #20]	; (8005680 <MX_IWDG_Init+0x34>)
 800566a:	0018      	movs	r0, r3
 800566c:	f001 feee 	bl	800744c <HAL_IWDG_Init>
 8005670:	1e03      	subs	r3, r0, #0
 8005672:	d001      	beq.n	8005678 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8005674:	f000 f931 	bl	80058da <Error_Handler>
  }

}
 8005678:	46c0      	nop			; (mov r8, r8)
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	200009c0 	.word	0x200009c0
 8005684:	40003000 	.word	0x40003000
 8005688:	00000fff 	.word	0x00000fff
 800568c:	000004e1 	.word	0x000004e1

08005690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005696:	f000 fc81 	bl	8005f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800569a:	f000 f8d5 	bl	8005848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800569e:	f7ff fe8b 	bl	80053b8 <MX_GPIO_Init>
  MX_ADC_Init();
 80056a2:	f7fa fed1 	bl	8000448 <MX_ADC_Init>
#ifndef DEBUG
  MX_IWDG_Init();
 80056a6:	f7ff ffd1 	bl	800564c <MX_IWDG_Init>
#endif
  MX_TIM2_Init();
 80056aa:	f000 fa67 	bl	8005b7c <MX_TIM2_Init>
  MX_TIM3_Init();
 80056ae:	f000 fab9 	bl	8005c24 <MX_TIM3_Init>
  MX_TIM6_Init();
 80056b2:	f000 fb0d 	bl	8005cd0 <MX_TIM6_Init>
  MX_TIM14_Init();
 80056b6:	f000 fb47 	bl	8005d48 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  ADC_ChannelConfTypeDef sConfig = {0};
 80056ba:	1d3b      	adds	r3, r7, #4
 80056bc:	0018      	movs	r0, r3
 80056be:	230c      	movs	r3, #12
 80056c0:	001a      	movs	r2, r3
 80056c2:	2100      	movs	r1, #0
 80056c4:	f002 ffa4 	bl	8008610 <memset>
  if(HAL_GPIO_ReadPin(SENSOR_CONFIG_GPIO_Port, SENSOR_CONFIG_Pin) != 0) // R10 installed: using CES sensor board
 80056c8:	2390      	movs	r3, #144	; 0x90
 80056ca:	05db      	lsls	r3, r3, #23
 80056cc:	2110      	movs	r1, #16
 80056ce:	0018      	movs	r0, r3
 80056d0:	f001 fe82 	bl	80073d8 <HAL_GPIO_ReadPin>
 80056d4:	1e03      	subs	r3, r0, #0
 80056d6:	d003      	beq.n	80056e0 <main+0x50>
  {
	  sConfig.Channel = ADC_CHANNEL_1;
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	2201      	movs	r2, #1
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e002      	b.n	80056e6 <main+0x56>
  }
  else // using on-board sensor
  {
	  sConfig.Channel = ADC_CHANNEL_9;
 80056e0:	1d3b      	adds	r3, r7, #4
 80056e2:	2209      	movs	r2, #9
 80056e4:	601a      	str	r2, [r3, #0]
  }
  sConfig.Rank = ADC_RANK_NONE;
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	4a48      	ldr	r2, [pc, #288]	; (800580c <main+0x17c>)
 80056ea:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80056ec:	1d3b      	adds	r3, r7, #4
 80056ee:	2207      	movs	r2, #7
 80056f0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80056f2:	1d3a      	adds	r2, r7, #4
 80056f4:	4b46      	ldr	r3, [pc, #280]	; (8005810 <main+0x180>)
 80056f6:	0011      	movs	r1, r2
 80056f8:	0018      	movs	r0, r3
 80056fa:	f000 ff47 	bl	800658c <HAL_ADC_ConfigChannel>
 80056fe:	1e03      	subs	r3, r0, #0
 8005700:	d001      	beq.n	8005706 <main+0x76>
  {
    Error_Handler();
 8005702:	f000 f8ea 	bl	80058da <Error_Handler>
  }
  HAL_TIM_Base_Start(&htim2);
 8005706:	4b43      	ldr	r3, [pc, #268]	; (8005814 <main+0x184>)
 8005708:	0018      	movs	r0, r3
 800570a:	f002 fb8f 	bl	8007e2c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 800570e:	4b42      	ldr	r3, [pc, #264]	; (8005818 <main+0x188>)
 8005710:	0018      	movs	r0, r3
 8005712:	f002 fb8b 	bl	8007e2c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8005716:	4b41      	ldr	r3, [pc, #260]	; (800581c <main+0x18c>)
 8005718:	0018      	movs	r0, r3
 800571a:	f002 fba9 	bl	8007e70 <HAL_TIM_Base_Start_IT>
  DALI_AppInit();
 800571e:	f7fc fa3d 	bl	8001b9c <DALI_AppInit>
  writePin(LED_Pin, 1);
 8005722:	2380      	movs	r3, #128	; 0x80
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	2101      	movs	r1, #1
 8005728:	0018      	movs	r0, r3
 800572a:	f7ff ff2d 	bl	8005588 <writePin>
#ifndef DEBUG
  __HAL_IWDG_START(&hiwdg);
 800572e:	4b3c      	ldr	r3, [pc, #240]	; (8005820 <main+0x190>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a3c      	ldr	r2, [pc, #240]	; (8005824 <main+0x194>)
 8005734:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim14);
 8005736:	4b3c      	ldr	r3, [pc, #240]	; (8005828 <main+0x198>)
 8005738:	0018      	movs	r0, r3
 800573a:	f002 fb99 	bl	8007e70 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifndef DEBUG
	  HAL_IWDG_Refresh(&hiwdg);
 800573e:	4b38      	ldr	r3, [pc, #224]	; (8005820 <main+0x190>)
 8005740:	0018      	movs	r0, r3
 8005742:	f001 fecd 	bl	80074e0 <HAL_IWDG_Refresh>
	  DALI_ProcessRxData();
 8005746:	f7fc fbed 	bl	8001f24 <DALI_ProcessRxData>
	  if(powerNoti_flag == 1)
 800574a:	4b38      	ldr	r3, [pc, #224]	; (800582c <main+0x19c>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	d104      	bne.n	800575e <main+0xce>
	  {
		  DALI_Send_PowerCycleEvent();
 8005754:	f7ff f9ae 	bl	8004ab4 <DALI_Send_PowerCycleEvent>
		  powerNoti_flag = 0;
 8005758:	4b34      	ldr	r3, [pc, #208]	; (800582c <main+0x19c>)
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
	  }
	  if(adc_flag == 1)
 800575e:	4b34      	ldr	r3, [pc, #208]	; (8005830 <main+0x1a0>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b01      	cmp	r3, #1
 8005766:	d14c      	bne.n	8005802 <main+0x172>
	  {
		  adc_flag = 0;
 8005768:	4b31      	ldr	r3, [pc, #196]	; (8005830 <main+0x1a0>)
 800576a:	2200      	movs	r2, #0
 800576c:	701a      	strb	r2, [r3, #0]
		  adc_time = 1000; //1000 ms
 800576e:	4b31      	ldr	r3, [pc, #196]	; (8005834 <main+0x1a4>)
 8005770:	22fa      	movs	r2, #250	; 0xfa
 8005772:	0092      	lsls	r2, r2, #2
 8005774:	801a      	strh	r2, [r3, #0]
		  HAL_ADCEx_Calibration_Start(&hadc);
 8005776:	4b26      	ldr	r3, [pc, #152]	; (8005810 <main+0x180>)
 8005778:	0018      	movs	r0, r3
 800577a:	f001 f941 	bl	8006a00 <HAL_ADCEx_Calibration_Start>
		  HAL_ADC_Start(&hadc);
 800577e:	4b24      	ldr	r3, [pc, #144]	; (8005810 <main+0x180>)
 8005780:	0018      	movs	r0, r3
 8005782:	f000 fdd1 	bl	8006328 <HAL_ADC_Start>
		  if(HAL_ADC_PollForConversion(&hadc, 200) == HAL_OK)
 8005786:	4b22      	ldr	r3, [pc, #136]	; (8005810 <main+0x180>)
 8005788:	21c8      	movs	r1, #200	; 0xc8
 800578a:	0018      	movs	r0, r3
 800578c:	f000 fe60 	bl	8006450 <HAL_ADC_PollForConversion>
 8005790:	1e03      	subs	r3, r0, #0
 8005792:	d12f      	bne.n	80057f4 <main+0x164>
		  {
			  sensor_val = HAL_ADC_GetValue(&hadc);
 8005794:	4b1e      	ldr	r3, [pc, #120]	; (8005810 <main+0x180>)
 8005796:	0018      	movs	r0, r3
 8005798:	f000 feec 	bl	8006574 <HAL_ADC_GetValue>
 800579c:	0002      	movs	r2, r0
 800579e:	4b26      	ldr	r3, [pc, #152]	; (8005838 <main+0x1a8>)
 80057a0:	601a      	str	r2, [r3, #0]
			  if(darkCalibrate)
 80057a2:	4b26      	ldr	r3, [pc, #152]	; (800583c <main+0x1ac>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00b      	beq.n	80057c2 <main+0x132>
			  {
				  memory_write(189, calibrationOffset_addr, (uint8_t) sensor_val);
 80057aa:	4b23      	ldr	r3, [pc, #140]	; (8005838 <main+0x1a8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	001a      	movs	r2, r3
 80057b2:	2106      	movs	r1, #6
 80057b4:	20bd      	movs	r0, #189	; 0xbd
 80057b6:	f7ff fc13 	bl	8004fe0 <memory_write>
				  darkCalibrate = 0;
 80057ba:	4b20      	ldr	r3, [pc, #128]	; (800583c <main+0x1ac>)
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	e01b      	b.n	80057fa <main+0x16a>
			  }
			  else if(fullScaleCalibrate)
 80057c2:	4b1f      	ldr	r3, [pc, #124]	; (8005840 <main+0x1b0>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00c      	beq.n	80057e4 <main+0x154>
			  {
				  memory_write(189, calibrationScale_addr, (uint8_t) (sensor_val/16));
 80057ca:	4b1b      	ldr	r3, [pc, #108]	; (8005838 <main+0x1a8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	091b      	lsrs	r3, r3, #4
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	001a      	movs	r2, r3
 80057d4:	2105      	movs	r1, #5
 80057d6:	20bd      	movs	r0, #189	; 0xbd
 80057d8:	f7ff fc02 	bl	8004fe0 <memory_write>
				  fullScaleCalibrate = 0;
 80057dc:	4b18      	ldr	r3, [pc, #96]	; (8005840 <main+0x1b0>)
 80057de:	2200      	movs	r2, #0
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	e00a      	b.n	80057fa <main+0x16a>
			  }
			  else
			  {
				  DALI_Set_inputValue(sensor_val);
 80057e4:	4b14      	ldr	r3, [pc, #80]	; (8005838 <main+0x1a8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	0018      	movs	r0, r3
 80057ea:	f7ff f92b 	bl	8004a44 <DALI_Set_inputValue>
				  DALI_SendEvent();
 80057ee:	f7fe fe1d 	bl	800442c <DALI_SendEvent>
 80057f2:	e002      	b.n	80057fa <main+0x16a>
			  }
		  }
		  else
		  {
			  instanceError = TRUE;
 80057f4:	4b13      	ldr	r3, [pc, #76]	; (8005844 <main+0x1b4>)
 80057f6:	2201      	movs	r2, #1
 80057f8:	701a      	strb	r2, [r3, #0]
		  }
		  HAL_ADC_Stop(&hadc);
 80057fa:	4b05      	ldr	r3, [pc, #20]	; (8005810 <main+0x180>)
 80057fc:	0018      	movs	r0, r3
 80057fe:	f000 fde7 	bl	80063d0 <HAL_ADC_Stop>
	  }
	  HAL_PWR_EnterSLEEPMode(0, PWR_SLEEPENTRY_WFI);
 8005802:	2101      	movs	r1, #1
 8005804:	2000      	movs	r0, #0
 8005806:	f001 fe7b 	bl	8007500 <HAL_PWR_EnterSLEEPMode>
	  HAL_IWDG_Refresh(&hiwdg);
 800580a:	e798      	b.n	800573e <main+0xae>
 800580c:	00001001 	.word	0x00001001
 8005810:	200004e8 	.word	0x200004e8
 8005814:	20000a58 	.word	0x20000a58
 8005818:	200009d8 	.word	0x200009d8
 800581c:	20000a18 	.word	0x20000a18
 8005820:	200009c0 	.word	0x200009c0
 8005824:	0000cccc 	.word	0x0000cccc
 8005828:	20000a98 	.word	0x20000a98
 800582c:	200000d2 	.word	0x200000d2
 8005830:	200009d4 	.word	0x200009d4
 8005834:	20000012 	.word	0x20000012
 8005838:	200009d0 	.word	0x200009d0
 800583c:	200004d8 	.word	0x200004d8
 8005840:	200004d9 	.word	0x200004d9
 8005844:	200000be 	.word	0x200000be

08005848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005848:	b590      	push	{r4, r7, lr}
 800584a:	b091      	sub	sp, #68	; 0x44
 800584c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800584e:	2410      	movs	r4, #16
 8005850:	193b      	adds	r3, r7, r4
 8005852:	0018      	movs	r0, r3
 8005854:	2330      	movs	r3, #48	; 0x30
 8005856:	001a      	movs	r2, r3
 8005858:	2100      	movs	r1, #0
 800585a:	f002 fed9 	bl	8008610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800585e:	003b      	movs	r3, r7
 8005860:	0018      	movs	r0, r3
 8005862:	2310      	movs	r3, #16
 8005864:	001a      	movs	r2, r3
 8005866:	2100      	movs	r1, #0
 8005868:	f002 fed2 	bl	8008610 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800586c:	0021      	movs	r1, r4
 800586e:	187b      	adds	r3, r7, r1
 8005870:	221a      	movs	r2, #26
 8005872:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005874:	187b      	adds	r3, r7, r1
 8005876:	2201      	movs	r2, #1
 8005878:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800587a:	187b      	adds	r3, r7, r1
 800587c:	2201      	movs	r2, #1
 800587e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005880:	187b      	adds	r3, r7, r1
 8005882:	2210      	movs	r2, #16
 8005884:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8005886:	187b      	adds	r3, r7, r1
 8005888:	2210      	movs	r2, #16
 800588a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800588c:	187b      	adds	r3, r7, r1
 800588e:	2201      	movs	r2, #1
 8005890:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005892:	187b      	adds	r3, r7, r1
 8005894:	2200      	movs	r2, #0
 8005896:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005898:	187b      	adds	r3, r7, r1
 800589a:	0018      	movs	r0, r3
 800589c:	f001 fe4c 	bl	8007538 <HAL_RCC_OscConfig>
 80058a0:	1e03      	subs	r3, r0, #0
 80058a2:	d001      	beq.n	80058a8 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80058a4:	f000 f819 	bl	80058da <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80058a8:	003b      	movs	r3, r7
 80058aa:	2207      	movs	r2, #7
 80058ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80058ae:	003b      	movs	r3, r7
 80058b0:	2200      	movs	r2, #0
 80058b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058b4:	003b      	movs	r3, r7
 80058b6:	2200      	movs	r2, #0
 80058b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80058ba:	003b      	movs	r3, r7
 80058bc:	2200      	movs	r2, #0
 80058be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80058c0:	003b      	movs	r3, r7
 80058c2:	2100      	movs	r1, #0
 80058c4:	0018      	movs	r0, r3
 80058c6:	f002 f953 	bl	8007b70 <HAL_RCC_ClockConfig>
 80058ca:	1e03      	subs	r3, r0, #0
 80058cc:	d001      	beq.n	80058d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80058ce:	f000 f804 	bl	80058da <Error_Handler>
  }
}
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	46bd      	mov	sp, r7
 80058d6:	b011      	add	sp, #68	; 0x44
 80058d8:	bd90      	pop	{r4, r7, pc}

080058da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80058de:	46c0      	nop			; (mov r8, r8)
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ea:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <HAL_MspInit+0x44>)
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	4b0e      	ldr	r3, [pc, #56]	; (8005928 <HAL_MspInit+0x44>)
 80058f0:	2101      	movs	r1, #1
 80058f2:	430a      	orrs	r2, r1
 80058f4:	619a      	str	r2, [r3, #24]
 80058f6:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <HAL_MspInit+0x44>)
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	2201      	movs	r2, #1
 80058fc:	4013      	ands	r3, r2
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <HAL_MspInit+0x44>)
 8005904:	69da      	ldr	r2, [r3, #28]
 8005906:	4b08      	ldr	r3, [pc, #32]	; (8005928 <HAL_MspInit+0x44>)
 8005908:	2180      	movs	r1, #128	; 0x80
 800590a:	0549      	lsls	r1, r1, #21
 800590c:	430a      	orrs	r2, r1
 800590e:	61da      	str	r2, [r3, #28]
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <HAL_MspInit+0x44>)
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	2380      	movs	r3, #128	; 0x80
 8005916:	055b      	lsls	r3, r3, #21
 8005918:	4013      	ands	r3, r2
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	46bd      	mov	sp, r7
 8005922:	b002      	add	sp, #8
 8005924:	bd80      	pop	{r7, pc}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	40021000 	.word	0x40021000

0800592c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005930:	46c0      	nop			; (mov r8, r8)
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800593a:	e7fe      	b.n	800593a <HardFault_Handler+0x4>

0800593c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005940:	46c0      	nop			; (mov r8, r8)
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800594a:	46c0      	nop			; (mov r8, r8)
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(report_time > 0)
 8005954:	4b2c      	ldr	r3, [pc, #176]	; (8005a08 <SysTick_Handler+0xb8>)
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d006      	beq.n	800596c <SysTick_Handler+0x1c>
	{
		report_time--;
 800595e:	4b2a      	ldr	r3, [pc, #168]	; (8005a08 <SysTick_Handler+0xb8>)
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	4b27      	ldr	r3, [pc, #156]	; (8005a08 <SysTick_Handler+0xb8>)
 800596a:	801a      	strh	r2, [r3, #0]
	}
	if(dead_time > 0)
 800596c:	4b27      	ldr	r3, [pc, #156]	; (8005a0c <SysTick_Handler+0xbc>)
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d006      	beq.n	8005984 <SysTick_Handler+0x34>
	{
		dead_time--;
 8005976:	4b25      	ldr	r3, [pc, #148]	; (8005a0c <SysTick_Handler+0xbc>)
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	4b22      	ldr	r3, [pc, #136]	; (8005a0c <SysTick_Handler+0xbc>)
 8005982:	801a      	strh	r2, [r3, #0]
	}
	if(id_time > 0)
 8005984:	4b22      	ldr	r3, [pc, #136]	; (8005a10 <SysTick_Handler+0xc0>)
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00f      	beq.n	80059ac <SysTick_Handler+0x5c>
	{
		id_time--;
 800598c:	4b20      	ldr	r3, [pc, #128]	; (8005a10 <SysTick_Handler+0xc0>)
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	3b01      	subs	r3, #1
 8005992:	b29a      	uxth	r2, r3
 8005994:	4b1e      	ldr	r3, [pc, #120]	; (8005a10 <SysTick_Handler+0xc0>)
 8005996:	801a      	strh	r2, [r3, #0]
		if(id_time == 0)
 8005998:	4b1d      	ldr	r3, [pc, #116]	; (8005a10 <SysTick_Handler+0xc0>)
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d105      	bne.n	80059ac <SysTick_Handler+0x5c>
			writePin(LED_Pin, 1);
 80059a0:	2380      	movs	r3, #128	; 0x80
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	2101      	movs	r1, #1
 80059a6:	0018      	movs	r0, r3
 80059a8:	f7ff fdee 	bl	8005588 <writePin>
	}
	if(adc_time > 0)
 80059ac:	4b19      	ldr	r3, [pc, #100]	; (8005a14 <SysTick_Handler+0xc4>)
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00e      	beq.n	80059d4 <SysTick_Handler+0x84>
	{
		adc_time--;
 80059b6:	4b17      	ldr	r3, [pc, #92]	; (8005a14 <SysTick_Handler+0xc4>)
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	4b14      	ldr	r3, [pc, #80]	; (8005a14 <SysTick_Handler+0xc4>)
 80059c2:	801a      	strh	r2, [r3, #0]
		if(adc_time == 0)
 80059c4:	4b13      	ldr	r3, [pc, #76]	; (8005a14 <SysTick_Handler+0xc4>)
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d102      	bne.n	80059d4 <SysTick_Handler+0x84>
			adc_flag = 1;
 80059ce:	4b12      	ldr	r3, [pc, #72]	; (8005a18 <SysTick_Handler+0xc8>)
 80059d0:	2201      	movs	r2, #1
 80059d2:	701a      	strb	r2, [r3, #0]
	}
	if(powerNoti_time > 0)
 80059d4:	4b11      	ldr	r3, [pc, #68]	; (8005a1c <SysTick_Handler+0xcc>)
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00e      	beq.n	80059fc <SysTick_Handler+0xac>
	{
		powerNoti_time--;
 80059de:	4b0f      	ldr	r3, [pc, #60]	; (8005a1c <SysTick_Handler+0xcc>)
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <SysTick_Handler+0xcc>)
 80059ea:	801a      	strh	r2, [r3, #0]
		if(powerNoti_time == 0)
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <SysTick_Handler+0xcc>)
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d102      	bne.n	80059fc <SysTick_Handler+0xac>
			powerNoti_flag = 1;
 80059f6:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <SysTick_Handler+0xd0>)
 80059f8:	2201      	movs	r2, #1
 80059fa:	701a      	strb	r2, [r3, #0]
		if(power_up_timer == 0)
			power_up_100ms = 1;
	}
#endif
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059fc:	f000 fb16 	bl	800602c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a00:	46c0      	nop			; (mov r8, r8)
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	20000886 	.word	0x20000886
 8005a0c:	20000878 	.word	0x20000878
 8005a10:	200000cc 	.word	0x200000cc
 8005a14:	20000012 	.word	0x20000012
 8005a18:	200009d4 	.word	0x200009d4
 8005a1c:	200000d0 	.word	0x200000d0
 8005a20:	200000d2 	.word	0x200000d2

08005a24 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != 0x00u)
 8005a28:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <EXTI4_15_IRQHandler+0x24>)
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	2380      	movs	r3, #128	; 0x80
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	4013      	ands	r3, r2
 8005a32:	d006      	beq.n	8005a42 <EXTI4_15_IRQHandler+0x1e>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8005a34:	4b04      	ldr	r3, [pc, #16]	; (8005a48 <EXTI4_15_IRQHandler+0x24>)
 8005a36:	2280      	movs	r2, #128	; 0x80
 8005a38:	00d2      	lsls	r2, r2, #3
 8005a3a:	615a      	str	r2, [r3, #20]
		else if(collisionDetect == 1)
		{
			collisionDetect = 0;
		}
#else
			DALIRxIntHandler();
 8005a3c:	f7fb fa5a 	bl	8000ef4 <DALIRxIntHandler>
#endif
	}
	return;
 8005a40:	46c0      	nop			; (mov r8, r8)
 8005a42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40010400 	.word	0x40010400

08005a4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET)
 8005a50:	4b0c      	ldr	r3, [pc, #48]	; (8005a84 <TIM2_IRQHandler+0x38>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2201      	movs	r2, #1
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d10e      	bne.n	8005a7c <TIM2_IRQHandler+0x30>
	{
		if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET)
 8005a5e:	4b09      	ldr	r3, [pc, #36]	; (8005a84 <TIM2_IRQHandler+0x38>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	2201      	movs	r2, #1
 8005a66:	4013      	ands	r3, r2
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d107      	bne.n	8005a7c <TIM2_IRQHandler+0x30>
		{
			__HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <TIM2_IRQHandler+0x38>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2202      	movs	r2, #2
 8005a72:	4252      	negs	r2, r2
 8005a74:	611a      	str	r2, [r3, #16]
			DALITimerIntHandler();
 8005a76:	f7fa fdfb 	bl	8000670 <DALITimerIntHandler>
		}
	}
	return;
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	20000a58 	.word	0x20000a58

08005a88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
		}
	}
	return;
#endif
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005a8c:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <TIM6_DAC_IRQHandler+0x14>)
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f002 fa10 	bl	8007eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005a94:	46c0      	nop			; (mov r8, r8)
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	20000a18 	.word	0x20000a18

08005aa0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
	// 1 minutes interrupt
	if(quiescent_time > 0)
 8005aa4:	4b17      	ldr	r3, [pc, #92]	; (8005b04 <TIM14_IRQHandler+0x64>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00e      	beq.n	8005acc <TIM14_IRQHandler+0x2c>
	{
		quiescent_time--;
 8005aae:	4b15      	ldr	r3, [pc, #84]	; (8005b04 <TIM14_IRQHandler+0x64>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	4b12      	ldr	r3, [pc, #72]	; (8005b04 <TIM14_IRQHandler+0x64>)
 8005aba:	701a      	strb	r2, [r3, #0]
		if(quiescent_time == 0)
 8005abc:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <TIM14_IRQHandler+0x64>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d102      	bne.n	8005acc <TIM14_IRQHandler+0x2c>
		{
			quiescentMode = DISABLED;
 8005ac6:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <TIM14_IRQHandler+0x68>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]
		}
	}
	if(initialise_time > 0)
 8005acc:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <TIM14_IRQHandler+0x6c>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00e      	beq.n	8005af4 <TIM14_IRQHandler+0x54>
	{
		initialise_time--;
 8005ad6:	4b0d      	ldr	r3, [pc, #52]	; (8005b0c <TIM14_IRQHandler+0x6c>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <TIM14_IRQHandler+0x6c>)
 8005ae2:	701a      	strb	r2, [r3, #0]
		if(initialise_time == 0)
 8005ae4:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <TIM14_IRQHandler+0x6c>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d102      	bne.n	8005af4 <TIM14_IRQHandler+0x54>
		{
			initialisationState = DISABLED;
 8005aee:	4b08      	ldr	r3, [pc, #32]	; (8005b10 <TIM14_IRQHandler+0x70>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005af4:	4b07      	ldr	r3, [pc, #28]	; (8005b14 <TIM14_IRQHandler+0x74>)
 8005af6:	0018      	movs	r0, r3
 8005af8:	f002 f9dc 	bl	8007eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005afc:	46c0      	nop			; (mov r8, r8)
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	46c0      	nop			; (mov r8, r8)
 8005b04:	200008aa 	.word	0x200008aa
 8005b08:	200000b7 	.word	0x200000b7
 8005b0c:	20000894 	.word	0x20000894
 8005b10:	200000b9 	.word	0x200000b9
 8005b14:	20000a98 	.word	0x20000a98

08005b18 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005b20:	4b11      	ldr	r3, [pc, #68]	; (8005b68 <_sbrk+0x50>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d102      	bne.n	8005b2e <_sbrk+0x16>
		heap_end = &end;
 8005b28:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <_sbrk+0x50>)
 8005b2a:	4a10      	ldr	r2, [pc, #64]	; (8005b6c <_sbrk+0x54>)
 8005b2c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005b2e:	4b0e      	ldr	r3, [pc, #56]	; (8005b68 <_sbrk+0x50>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005b34:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <_sbrk+0x50>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	18d3      	adds	r3, r2, r3
 8005b3c:	466a      	mov	r2, sp
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d907      	bls.n	8005b52 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005b42:	f002 fd3b 	bl	80085bc <__errno>
 8005b46:	0003      	movs	r3, r0
 8005b48:	220c      	movs	r2, #12
 8005b4a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	425b      	negs	r3, r3
 8005b50:	e006      	b.n	8005b60 <_sbrk+0x48>
	}

	heap_end += incr;
 8005b52:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <_sbrk+0x50>)
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	18d2      	adds	r2, r2, r3
 8005b5a:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <_sbrk+0x50>)
 8005b5c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
}
 8005b60:	0018      	movs	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	b004      	add	sp, #16
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	200004dc 	.word	0x200004dc
 8005b6c:	20000b08 	.word	0x20000b08

08005b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005b74:	46c0      	nop			; (mov r8, r8)
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b82:	2308      	movs	r3, #8
 8005b84:	18fb      	adds	r3, r7, r3
 8005b86:	0018      	movs	r0, r3
 8005b88:	2310      	movs	r3, #16
 8005b8a:	001a      	movs	r2, r3
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	f002 fd3f 	bl	8008610 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b92:	003b      	movs	r3, r7
 8005b94:	0018      	movs	r0, r3
 8005b96:	2308      	movs	r3, #8
 8005b98:	001a      	movs	r2, r3
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	f002 fd38 	bl	8008610 <memset>

  htim2.Instance = TIM2;
 8005ba0:	4b1e      	ldr	r3, [pc, #120]	; (8005c1c <MX_TIM2_Init+0xa0>)
 8005ba2:	2280      	movs	r2, #128	; 0x80
 8005ba4:	05d2      	lsls	r2, r2, #23
 8005ba6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005ba8:	4b1c      	ldr	r3, [pc, #112]	; (8005c1c <MX_TIM2_Init+0xa0>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bae:	4b1b      	ldr	r3, [pc, #108]	; (8005c1c <MX_TIM2_Init+0xa0>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3333;
 8005bb4:	4b19      	ldr	r3, [pc, #100]	; (8005c1c <MX_TIM2_Init+0xa0>)
 8005bb6:	4a1a      	ldr	r2, [pc, #104]	; (8005c20 <MX_TIM2_Init+0xa4>)
 8005bb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bba:	4b18      	ldr	r3, [pc, #96]	; (8005c1c <MX_TIM2_Init+0xa0>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bc0:	4b16      	ldr	r3, [pc, #88]	; (8005c1c <MX_TIM2_Init+0xa0>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005bc6:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <MX_TIM2_Init+0xa0>)
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f002 f903 	bl	8007dd4 <HAL_TIM_Base_Init>
 8005bce:	1e03      	subs	r3, r0, #0
 8005bd0:	d001      	beq.n	8005bd6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8005bd2:	f7ff fe82 	bl	80058da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005bd6:	2108      	movs	r1, #8
 8005bd8:	187b      	adds	r3, r7, r1
 8005bda:	2280      	movs	r2, #128	; 0x80
 8005bdc:	0152      	lsls	r2, r2, #5
 8005bde:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005be0:	187a      	adds	r2, r7, r1
 8005be2:	4b0e      	ldr	r3, [pc, #56]	; (8005c1c <MX_TIM2_Init+0xa0>)
 8005be4:	0011      	movs	r1, r2
 8005be6:	0018      	movs	r0, r3
 8005be8:	f002 fa7a 	bl	80080e0 <HAL_TIM_ConfigClockSource>
 8005bec:	1e03      	subs	r3, r0, #0
 8005bee:	d001      	beq.n	8005bf4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8005bf0:	f7ff fe73 	bl	80058da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bf4:	003b      	movs	r3, r7
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bfa:	003b      	movs	r3, r7
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c00:	003a      	movs	r2, r7
 8005c02:	4b06      	ldr	r3, [pc, #24]	; (8005c1c <MX_TIM2_Init+0xa0>)
 8005c04:	0011      	movs	r1, r2
 8005c06:	0018      	movs	r0, r3
 8005c08:	f002 fc6a 	bl	80084e0 <HAL_TIMEx_MasterConfigSynchronization>
 8005c0c:	1e03      	subs	r3, r0, #0
 8005c0e:	d001      	beq.n	8005c14 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8005c10:	f7ff fe63 	bl	80058da <Error_Handler>
  }

}
 8005c14:	46c0      	nop			; (mov r8, r8)
 8005c16:	46bd      	mov	sp, r7
 8005c18:	b006      	add	sp, #24
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20000a58 	.word	0x20000a58
 8005c20:	00000d05 	.word	0x00000d05

08005c24 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c2a:	2308      	movs	r3, #8
 8005c2c:	18fb      	adds	r3, r7, r3
 8005c2e:	0018      	movs	r0, r3
 8005c30:	2310      	movs	r3, #16
 8005c32:	001a      	movs	r2, r3
 8005c34:	2100      	movs	r1, #0
 8005c36:	f002 fceb 	bl	8008610 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c3a:	003b      	movs	r3, r7
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	2308      	movs	r3, #8
 8005c40:	001a      	movs	r2, r3
 8005c42:	2100      	movs	r1, #0
 8005c44:	f002 fce4 	bl	8008610 <memset>

  htim3.Instance = TIM3;
 8005c48:	4b1e      	ldr	r3, [pc, #120]	; (8005cc4 <MX_TIM3_Init+0xa0>)
 8005c4a:	4a1f      	ldr	r2, [pc, #124]	; (8005cc8 <MX_TIM3_Init+0xa4>)
 8005c4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005c4e:	4b1d      	ldr	r3, [pc, #116]	; (8005cc4 <MX_TIM3_Init+0xa0>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c54:	4b1b      	ldr	r3, [pc, #108]	; (8005cc4 <MX_TIM3_Init+0xa0>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8005c5a:	4b1a      	ldr	r3, [pc, #104]	; (8005cc4 <MX_TIM3_Init+0xa0>)
 8005c5c:	4a1b      	ldr	r2, [pc, #108]	; (8005ccc <MX_TIM3_Init+0xa8>)
 8005c5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c60:	4b18      	ldr	r3, [pc, #96]	; (8005cc4 <MX_TIM3_Init+0xa0>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c66:	4b17      	ldr	r3, [pc, #92]	; (8005cc4 <MX_TIM3_Init+0xa0>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005c6c:	4b15      	ldr	r3, [pc, #84]	; (8005cc4 <MX_TIM3_Init+0xa0>)
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f002 f8b0 	bl	8007dd4 <HAL_TIM_Base_Init>
 8005c74:	1e03      	subs	r3, r0, #0
 8005c76:	d001      	beq.n	8005c7c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005c78:	f7ff fe2f 	bl	80058da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c7c:	2108      	movs	r1, #8
 8005c7e:	187b      	adds	r3, r7, r1
 8005c80:	2280      	movs	r2, #128	; 0x80
 8005c82:	0152      	lsls	r2, r2, #5
 8005c84:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005c86:	187a      	adds	r2, r7, r1
 8005c88:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <MX_TIM3_Init+0xa0>)
 8005c8a:	0011      	movs	r1, r2
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f002 fa27 	bl	80080e0 <HAL_TIM_ConfigClockSource>
 8005c92:	1e03      	subs	r3, r0, #0
 8005c94:	d001      	beq.n	8005c9a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005c96:	f7ff fe20 	bl	80058da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c9a:	003b      	movs	r3, r7
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ca0:	003b      	movs	r3, r7
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ca6:	003a      	movs	r2, r7
 8005ca8:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <MX_TIM3_Init+0xa0>)
 8005caa:	0011      	movs	r1, r2
 8005cac:	0018      	movs	r0, r3
 8005cae:	f002 fc17 	bl	80084e0 <HAL_TIMEx_MasterConfigSynchronization>
 8005cb2:	1e03      	subs	r3, r0, #0
 8005cb4:	d001      	beq.n	8005cba <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8005cb6:	f7ff fe10 	bl	80058da <Error_Handler>
  }

}
 8005cba:	46c0      	nop			; (mov r8, r8)
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	b006      	add	sp, #24
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	200009d8 	.word	0x200009d8
 8005cc8:	40000400 	.word	0x40000400
 8005ccc:	0000ffff 	.word	0x0000ffff

08005cd0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cd6:	003b      	movs	r3, r7
 8005cd8:	0018      	movs	r0, r3
 8005cda:	2308      	movs	r3, #8
 8005cdc:	001a      	movs	r2, r3
 8005cde:	2100      	movs	r1, #0
 8005ce0:	f002 fc96 	bl	8008610 <memset>

  htim6.Instance = TIM6;
 8005ce4:	4b15      	ldr	r3, [pc, #84]	; (8005d3c <MX_TIM6_Init+0x6c>)
 8005ce6:	4a16      	ldr	r2, [pc, #88]	; (8005d40 <MX_TIM6_Init+0x70>)
 8005ce8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3;
 8005cea:	4b14      	ldr	r3, [pc, #80]	; (8005d3c <MX_TIM6_Init+0x6c>)
 8005cec:	2203      	movs	r2, #3
 8005cee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cf0:	4b12      	ldr	r3, [pc, #72]	; (8005d3c <MX_TIM6_Init+0x6c>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff;
 8005cf6:	4b11      	ldr	r3, [pc, #68]	; (8005d3c <MX_TIM6_Init+0x6c>)
 8005cf8:	4a12      	ldr	r2, [pc, #72]	; (8005d44 <MX_TIM6_Init+0x74>)
 8005cfa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <MX_TIM6_Init+0x6c>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005d02:	4b0e      	ldr	r3, [pc, #56]	; (8005d3c <MX_TIM6_Init+0x6c>)
 8005d04:	0018      	movs	r0, r3
 8005d06:	f002 f865 	bl	8007dd4 <HAL_TIM_Base_Init>
 8005d0a:	1e03      	subs	r3, r0, #0
 8005d0c:	d001      	beq.n	8005d12 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8005d0e:	f7ff fde4 	bl	80058da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d12:	003b      	movs	r3, r7
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d18:	003b      	movs	r3, r7
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005d1e:	003a      	movs	r2, r7
 8005d20:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <MX_TIM6_Init+0x6c>)
 8005d22:	0011      	movs	r1, r2
 8005d24:	0018      	movs	r0, r3
 8005d26:	f002 fbdb 	bl	80084e0 <HAL_TIMEx_MasterConfigSynchronization>
 8005d2a:	1e03      	subs	r3, r0, #0
 8005d2c:	d001      	beq.n	8005d32 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8005d2e:	f7ff fdd4 	bl	80058da <Error_Handler>
  }

}
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	46bd      	mov	sp, r7
 8005d36:	b002      	add	sp, #8
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	46c0      	nop			; (mov r8, r8)
 8005d3c:	20000a18 	.word	0x20000a18
 8005d40:	40001000 	.word	0x40001000
 8005d44:	0000ffff 	.word	0x0000ffff

08005d48 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8005d4c:	4b0e      	ldr	r3, [pc, #56]	; (8005d88 <MX_TIM14_Init+0x40>)
 8005d4e:	4a0f      	ldr	r2, [pc, #60]	; (8005d8c <MX_TIM14_Init+0x44>)
 8005d50:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 39999;
 8005d52:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <MX_TIM14_Init+0x40>)
 8005d54:	4a0e      	ldr	r2, [pc, #56]	; (8005d90 <MX_TIM14_Init+0x48>)
 8005d56:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d58:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <MX_TIM14_Init+0x40>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 11999;
 8005d5e:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <MX_TIM14_Init+0x40>)
 8005d60:	4a0c      	ldr	r2, [pc, #48]	; (8005d94 <MX_TIM14_Init+0x4c>)
 8005d62:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d64:	4b08      	ldr	r3, [pc, #32]	; (8005d88 <MX_TIM14_Init+0x40>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d6a:	4b07      	ldr	r3, [pc, #28]	; (8005d88 <MX_TIM14_Init+0x40>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005d70:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <MX_TIM14_Init+0x40>)
 8005d72:	0018      	movs	r0, r3
 8005d74:	f002 f82e 	bl	8007dd4 <HAL_TIM_Base_Init>
 8005d78:	1e03      	subs	r3, r0, #0
 8005d7a:	d001      	beq.n	8005d80 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8005d7c:	f7ff fdad 	bl	80058da <Error_Handler>
  }

}
 8005d80:	46c0      	nop			; (mov r8, r8)
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	20000a98 	.word	0x20000a98
 8005d8c:	40002000 	.word	0x40002000
 8005d90:	00009c3f 	.word	0x00009c3f
 8005d94:	00002edf 	.word	0x00002edf

08005d98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	2380      	movs	r3, #128	; 0x80
 8005da6:	05db      	lsls	r3, r3, #23
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d114      	bne.n	8005dd6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005dac:	4b35      	ldr	r3, [pc, #212]	; (8005e84 <HAL_TIM_Base_MspInit+0xec>)
 8005dae:	69da      	ldr	r2, [r3, #28]
 8005db0:	4b34      	ldr	r3, [pc, #208]	; (8005e84 <HAL_TIM_Base_MspInit+0xec>)
 8005db2:	2101      	movs	r1, #1
 8005db4:	430a      	orrs	r2, r1
 8005db6:	61da      	str	r2, [r3, #28]
 8005db8:	4b32      	ldr	r3, [pc, #200]	; (8005e84 <HAL_TIM_Base_MspInit+0xec>)
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	200f      	movs	r0, #15
 8005dca:	f000 ff63 	bl	8006c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005dce:	200f      	movs	r0, #15
 8005dd0:	f000 ff75 	bl	8006cbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */
    TIM14->CR1 |= TIM_CR1_URS;
  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8005dd4:	e052      	b.n	8005e7c <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a2b      	ldr	r2, [pc, #172]	; (8005e88 <HAL_TIM_Base_MspInit+0xf0>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d10c      	bne.n	8005dfa <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005de0:	4b28      	ldr	r3, [pc, #160]	; (8005e84 <HAL_TIM_Base_MspInit+0xec>)
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <HAL_TIM_Base_MspInit+0xec>)
 8005de6:	2102      	movs	r1, #2
 8005de8:	430a      	orrs	r2, r1
 8005dea:	61da      	str	r2, [r3, #28]
 8005dec:	4b25      	ldr	r3, [pc, #148]	; (8005e84 <HAL_TIM_Base_MspInit+0xec>)
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	2202      	movs	r2, #2
 8005df2:	4013      	ands	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
 8005df6:	693b      	ldr	r3, [r7, #16]
}
 8005df8:	e040      	b.n	8005e7c <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM6)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a23      	ldr	r2, [pc, #140]	; (8005e8c <HAL_TIM_Base_MspInit+0xf4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d11a      	bne.n	8005e3a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005e04:	4b1f      	ldr	r3, [pc, #124]	; (8005e84 <HAL_TIM_Base_MspInit+0xec>)
 8005e06:	69da      	ldr	r2, [r3, #28]
 8005e08:	4b1e      	ldr	r3, [pc, #120]	; (8005e84 <HAL_TIM_Base_MspInit+0xec>)
 8005e0a:	2110      	movs	r1, #16
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	61da      	str	r2, [r3, #28]
 8005e10:	4b1c      	ldr	r3, [pc, #112]	; (8005e84 <HAL_TIM_Base_MspInit+0xec>)
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	2210      	movs	r2, #16
 8005e16:	4013      	ands	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2100      	movs	r1, #0
 8005e20:	2011      	movs	r0, #17
 8005e22:	f000 ff37 	bl	8006c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005e26:	2011      	movs	r0, #17
 8005e28:	f000 ff49 	bl	8006cbe <HAL_NVIC_EnableIRQ>
    TIM6->CR1 |= TIM_CR1_URS;
 8005e2c:	4b17      	ldr	r3, [pc, #92]	; (8005e8c <HAL_TIM_Base_MspInit+0xf4>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	4b16      	ldr	r3, [pc, #88]	; (8005e8c <HAL_TIM_Base_MspInit+0xf4>)
 8005e32:	2104      	movs	r1, #4
 8005e34:	430a      	orrs	r2, r1
 8005e36:	601a      	str	r2, [r3, #0]
}
 8005e38:	e020      	b.n	8005e7c <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM14)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a14      	ldr	r2, [pc, #80]	; (8005e90 <HAL_TIM_Base_MspInit+0xf8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d11b      	bne.n	8005e7c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005e44:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <HAL_TIM_Base_MspInit+0xec>)
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	4b0e      	ldr	r3, [pc, #56]	; (8005e84 <HAL_TIM_Base_MspInit+0xec>)
 8005e4a:	2180      	movs	r1, #128	; 0x80
 8005e4c:	0049      	lsls	r1, r1, #1
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	61da      	str	r2, [r3, #28]
 8005e52:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <HAL_TIM_Base_MspInit+0xec>)
 8005e54:	69da      	ldr	r2, [r3, #28]
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	60bb      	str	r3, [r7, #8]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8005e60:	2200      	movs	r2, #0
 8005e62:	2100      	movs	r1, #0
 8005e64:	2013      	movs	r0, #19
 8005e66:	f000 ff15 	bl	8006c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8005e6a:	2013      	movs	r0, #19
 8005e6c:	f000 ff27 	bl	8006cbe <HAL_NVIC_EnableIRQ>
    TIM14->CR1 |= TIM_CR1_URS;
 8005e70:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <HAL_TIM_Base_MspInit+0xf8>)
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <HAL_TIM_Base_MspInit+0xf8>)
 8005e76:	2104      	movs	r1, #4
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	601a      	str	r2, [r3, #0]
}
 8005e7c:	46c0      	nop			; (mov r8, r8)
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	b006      	add	sp, #24
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	40021000 	.word	0x40021000
 8005e88:	40000400 	.word	0x40000400
 8005e8c:	40001000 	.word	0x40001000
 8005e90:	40002000 	.word	0x40002000

08005e94 <set_timer_reload_val>:
  }
} 

/* USER CODE BEGIN 1 */
void set_timer_reload_val(uint32_t timer_val, TIM_HandleTypeDef* htim)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
	htim->Instance->ARR = timer_val;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	b002      	add	sp, #8
 8005eac:	bd80      	pop	{r7, pc}

08005eae <reset_timer>:
void reset_timer(TIM_HandleTypeDef* htim)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
	htim->Instance->CNT = 0;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005ebe:	46c0      	nop			; (mov r8, r8)
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	b002      	add	sp, #8
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <set_timer_count>:
void set_timer_count(uint32_t timer_val, TIM_HandleTypeDef* htim)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
	htim->Instance->CNT = timer_val;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005ed8:	46c0      	nop			; (mov r8, r8)
 8005eda:	46bd      	mov	sp, r7
 8005edc:	b002      	add	sp, #8
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <get_timer_count>:
uint32_t get_timer_count(TIM_HandleTypeDef* htim)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
	return htim->Instance->CNT;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005eee:	0018      	movs	r0, r3
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	b002      	add	sp, #8
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <disable_timer_int>:
void disable_timer_int(TIM_HandleTypeDef* htim)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b082      	sub	sp, #8
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
	__HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2101      	movs	r1, #1
 8005f0a:	438a      	bics	r2, r1
 8005f0c:	60da      	str	r2, [r3, #12]
	//__HAL_TIM_DISABLE(htim);
}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	46bd      	mov	sp, r7
 8005f12:	b002      	add	sp, #8
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <enable_timer_int>:
void enable_timer_int(TIM_HandleTypeDef* htim)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_ENABLE(htim);
	__HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8005f20:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <enable_timer_int+0x2c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2202      	movs	r2, #2
 8005f26:	4252      	negs	r2, r2
 8005f28:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2101      	movs	r1, #1
 8005f36:	430a      	orrs	r2, r1
 8005f38:	60da      	str	r2, [r3, #12]
}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b002      	add	sp, #8
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	20000a58 	.word	0x20000a58

08005f48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005f48:	480d      	ldr	r0, [pc, #52]	; (8005f80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005f4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f4c:	480d      	ldr	r0, [pc, #52]	; (8005f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8005f4e:	490e      	ldr	r1, [pc, #56]	; (8005f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005f50:	4a0e      	ldr	r2, [pc, #56]	; (8005f8c <LoopForever+0xe>)
  movs r3, #0
 8005f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f54:	e002      	b.n	8005f5c <LoopCopyDataInit>

08005f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f5a:	3304      	adds	r3, #4

08005f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f60:	d3f9      	bcc.n	8005f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f62:	4a0b      	ldr	r2, [pc, #44]	; (8005f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005f64:	4c0b      	ldr	r4, [pc, #44]	; (8005f94 <LoopForever+0x16>)
  movs r3, #0
 8005f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f68:	e001      	b.n	8005f6e <LoopFillZerobss>

08005f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f6c:	3204      	adds	r2, #4

08005f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f70:	d3fb      	bcc.n	8005f6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005f72:	f7ff fdfd 	bl	8005b70 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005f76:	f002 fb27 	bl	80085c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005f7a:	f7ff fb89 	bl	8005690 <main>

08005f7e <LoopForever>:

LoopForever:
    b LoopForever
 8005f7e:	e7fe      	b.n	8005f7e <LoopForever>
  ldr   r0, =_estack
 8005f80:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f88:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8005f8c:	08008eb8 	.word	0x08008eb8
  ldr r2, =_sbss
 8005f90:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8005f94:	20000b04 	.word	0x20000b04

08005f98 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005f98:	e7fe      	b.n	8005f98 <ADC1_COMP_IRQHandler>
	...

08005f9c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fa0:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <HAL_Init+0x24>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <HAL_Init+0x24>)
 8005fa6:	2110      	movs	r1, #16
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8005fac:	2000      	movs	r0, #0
 8005fae:	f000 f809 	bl	8005fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005fb2:	f7ff fc97 	bl	80058e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	0018      	movs	r0, r3
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	40022000 	.word	0x40022000

08005fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fc4:	b590      	push	{r4, r7, lr}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005fcc:	4b14      	ldr	r3, [pc, #80]	; (8006020 <HAL_InitTick+0x5c>)
 8005fce:	681c      	ldr	r4, [r3, #0]
 8005fd0:	4b14      	ldr	r3, [pc, #80]	; (8006024 <HAL_InitTick+0x60>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	0019      	movs	r1, r3
 8005fd6:	23fa      	movs	r3, #250	; 0xfa
 8005fd8:	0098      	lsls	r0, r3, #2
 8005fda:	f7fa f895 	bl	8000108 <__udivsi3>
 8005fde:	0003      	movs	r3, r0
 8005fe0:	0019      	movs	r1, r3
 8005fe2:	0020      	movs	r0, r4
 8005fe4:	f7fa f890 	bl	8000108 <__udivsi3>
 8005fe8:	0003      	movs	r3, r0
 8005fea:	0018      	movs	r0, r3
 8005fec:	f000 fe77 	bl	8006cde <HAL_SYSTICK_Config>
 8005ff0:	1e03      	subs	r3, r0, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e00f      	b.n	8006018 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d80b      	bhi.n	8006016 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	2301      	movs	r3, #1
 8006002:	425b      	negs	r3, r3
 8006004:	2200      	movs	r2, #0
 8006006:	0018      	movs	r0, r3
 8006008:	f000 fe44 	bl	8006c94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800600c:	4b06      	ldr	r3, [pc, #24]	; (8006028 <HAL_InitTick+0x64>)
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	e000      	b.n	8006018 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
}
 8006018:	0018      	movs	r0, r3
 800601a:	46bd      	mov	sp, r7
 800601c:	b003      	add	sp, #12
 800601e:	bd90      	pop	{r4, r7, pc}
 8006020:	20000014 	.word	0x20000014
 8006024:	2000001c 	.word	0x2000001c
 8006028:	20000018 	.word	0x20000018

0800602c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <HAL_IncTick+0x1c>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	001a      	movs	r2, r3
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <HAL_IncTick+0x20>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	18d2      	adds	r2, r2, r3
 800603c:	4b03      	ldr	r3, [pc, #12]	; (800604c <HAL_IncTick+0x20>)
 800603e:	601a      	str	r2, [r3, #0]
}
 8006040:	46c0      	nop			; (mov r8, r8)
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	2000001c 	.word	0x2000001c
 800604c:	20000ad8 	.word	0x20000ad8

08006050 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  return uwTick;
 8006054:	4b02      	ldr	r3, [pc, #8]	; (8006060 <HAL_GetTick+0x10>)
 8006056:	681b      	ldr	r3, [r3, #0]
}
 8006058:	0018      	movs	r0, r3
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	20000ad8 	.word	0x20000ad8

08006064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800606c:	f7ff fff0 	bl	8006050 <HAL_GetTick>
 8006070:	0003      	movs	r3, r0
 8006072:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3301      	adds	r3, #1
 800607c:	d005      	beq.n	800608a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800607e:	4b09      	ldr	r3, [pc, #36]	; (80060a4 <HAL_Delay+0x40>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	001a      	movs	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	189b      	adds	r3, r3, r2
 8006088:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	f7ff ffe0 	bl	8006050 <HAL_GetTick>
 8006090:	0002      	movs	r2, r0
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	429a      	cmp	r2, r3
 800609a:	d8f7      	bhi.n	800608c <HAL_Delay+0x28>
  {
  }
}
 800609c:	46c0      	nop			; (mov r8, r8)
 800609e:	46bd      	mov	sp, r7
 80060a0:	b004      	add	sp, #16
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	2000001c 	.word	0x2000001c

080060a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060b0:	230f      	movs	r3, #15
 80060b2:	18fb      	adds	r3, r7, r3
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e125      	b.n	8006312 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10a      	bne.n	80060e4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2234      	movs	r2, #52	; 0x34
 80060d8:	2100      	movs	r1, #0
 80060da:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	0018      	movs	r0, r3
 80060e0:	f7fa fa1a 	bl	8000518 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	2210      	movs	r2, #16
 80060ea:	4013      	ands	r3, r2
 80060ec:	d000      	beq.n	80060f0 <HAL_ADC_Init+0x48>
 80060ee:	e103      	b.n	80062f8 <HAL_ADC_Init+0x250>
 80060f0:	230f      	movs	r3, #15
 80060f2:	18fb      	adds	r3, r7, r3
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d000      	beq.n	80060fc <HAL_ADC_Init+0x54>
 80060fa:	e0fd      	b.n	80062f8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2204      	movs	r2, #4
 8006104:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8006106:	d000      	beq.n	800610a <HAL_ADC_Init+0x62>
 8006108:	e0f6      	b.n	80062f8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	4a83      	ldr	r2, [pc, #524]	; (800631c <HAL_ADC_Init+0x274>)
 8006110:	4013      	ands	r3, r2
 8006112:	2202      	movs	r2, #2
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2203      	movs	r2, #3
 8006122:	4013      	ands	r3, r2
 8006124:	2b01      	cmp	r3, #1
 8006126:	d112      	bne.n	800614e <HAL_ADC_Init+0xa6>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2201      	movs	r2, #1
 8006130:	4013      	ands	r3, r2
 8006132:	2b01      	cmp	r3, #1
 8006134:	d009      	beq.n	800614a <HAL_ADC_Init+0xa2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	2380      	movs	r3, #128	; 0x80
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	401a      	ands	r2, r3
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	021b      	lsls	r3, r3, #8
 8006146:	429a      	cmp	r2, r3
 8006148:	d101      	bne.n	800614e <HAL_ADC_Init+0xa6>
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <HAL_ADC_Init+0xa8>
 800614e:	2300      	movs	r3, #0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d116      	bne.n	8006182 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	2218      	movs	r2, #24
 800615c:	4393      	bics	r3, r2
 800615e:	0019      	movs	r1, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	0899      	lsrs	r1, r3, #2
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4964      	ldr	r1, [pc, #400]	; (8006320 <HAL_ADC_Init+0x278>)
 800618e:	400a      	ands	r2, r1
 8006190:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	7e1b      	ldrb	r3, [r3, #24]
 8006196:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	7e5b      	ldrb	r3, [r3, #25]
 800619c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800619e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	7e9b      	ldrb	r3, [r3, #26]
 80061a4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80061a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d002      	beq.n	80061b6 <HAL_ADC_Init+0x10e>
 80061b0:	2380      	movs	r3, #128	; 0x80
 80061b2:	015b      	lsls	r3, r3, #5
 80061b4:	e000      	b.n	80061b8 <HAL_ADC_Init+0x110>
 80061b6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80061b8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80061be:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d101      	bne.n	80061cc <HAL_ADC_Init+0x124>
 80061c8:	2304      	movs	r3, #4
 80061ca:	e000      	b.n	80061ce <HAL_ADC_Init+0x126>
 80061cc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80061ce:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2124      	movs	r1, #36	; 0x24
 80061d4:	5c5b      	ldrb	r3, [r3, r1]
 80061d6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80061d8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	4313      	orrs	r3, r2
 80061de:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	7edb      	ldrb	r3, [r3, #27]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d115      	bne.n	8006214 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	7e9b      	ldrb	r3, [r3, #26]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d105      	bne.n	80061fc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2280      	movs	r2, #128	; 0x80
 80061f4:	0252      	lsls	r2, r2, #9
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60bb      	str	r3, [r7, #8]
 80061fa:	e00b      	b.n	8006214 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006200:	2220      	movs	r2, #32
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620c:	2201      	movs	r2, #1
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	23c2      	movs	r3, #194	; 0xc2
 800621a:	33ff      	adds	r3, #255	; 0xff
 800621c:	429a      	cmp	r2, r3
 800621e:	d007      	beq.n	8006230 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8006228:	4313      	orrs	r3, r2
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	4313      	orrs	r3, r2
 800622e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68d9      	ldr	r1, [r3, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	430a      	orrs	r2, r1
 800623e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006244:	2380      	movs	r3, #128	; 0x80
 8006246:	055b      	lsls	r3, r3, #21
 8006248:	429a      	cmp	r2, r3
 800624a:	d01b      	beq.n	8006284 <HAL_ADC_Init+0x1dc>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006250:	2b01      	cmp	r3, #1
 8006252:	d017      	beq.n	8006284 <HAL_ADC_Init+0x1dc>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	2b02      	cmp	r3, #2
 800625a:	d013      	beq.n	8006284 <HAL_ADC_Init+0x1dc>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	2b03      	cmp	r3, #3
 8006262:	d00f      	beq.n	8006284 <HAL_ADC_Init+0x1dc>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	2b04      	cmp	r3, #4
 800626a:	d00b      	beq.n	8006284 <HAL_ADC_Init+0x1dc>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006270:	2b05      	cmp	r3, #5
 8006272:	d007      	beq.n	8006284 <HAL_ADC_Init+0x1dc>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	2b06      	cmp	r3, #6
 800627a:	d003      	beq.n	8006284 <HAL_ADC_Init+0x1dc>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	2b07      	cmp	r3, #7
 8006282:	d112      	bne.n	80062aa <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	695a      	ldr	r2, [r3, #20]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2107      	movs	r1, #7
 8006290:	438a      	bics	r2, r1
 8006292:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6959      	ldr	r1, [r3, #20]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629e:	2207      	movs	r2, #7
 80062a0:	401a      	ands	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	4a1c      	ldr	r2, [pc, #112]	; (8006324 <HAL_ADC_Init+0x27c>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d10b      	bne.n	80062d2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	2203      	movs	r2, #3
 80062c6:	4393      	bics	r3, r2
 80062c8:	2201      	movs	r2, #1
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80062d0:	e01c      	b.n	800630c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d6:	2212      	movs	r2, #18
 80062d8:	4393      	bics	r3, r2
 80062da:	2210      	movs	r2, #16
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e6:	2201      	movs	r2, #1
 80062e8:	431a      	orrs	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80062ee:	230f      	movs	r3, #15
 80062f0:	18fb      	adds	r3, r7, r3
 80062f2:	2201      	movs	r2, #1
 80062f4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80062f6:	e009      	b.n	800630c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fc:	2210      	movs	r2, #16
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8006304:	230f      	movs	r3, #15
 8006306:	18fb      	adds	r3, r7, r3
 8006308:	2201      	movs	r2, #1
 800630a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800630c:	230f      	movs	r3, #15
 800630e:	18fb      	adds	r3, r7, r3
 8006310:	781b      	ldrb	r3, [r3, #0]
}
 8006312:	0018      	movs	r0, r3
 8006314:	46bd      	mov	sp, r7
 8006316:	b004      	add	sp, #16
 8006318:	bd80      	pop	{r7, pc}
 800631a:	46c0      	nop			; (mov r8, r8)
 800631c:	fffffefd 	.word	0xfffffefd
 8006320:	fffe0219 	.word	0xfffe0219
 8006324:	833fffe7 	.word	0x833fffe7

08006328 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006328:	b590      	push	{r4, r7, lr}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006330:	230f      	movs	r3, #15
 8006332:	18fb      	adds	r3, r7, r3
 8006334:	2200      	movs	r2, #0
 8006336:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	2204      	movs	r2, #4
 8006340:	4013      	ands	r3, r2
 8006342:	d138      	bne.n	80063b6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2234      	movs	r2, #52	; 0x34
 8006348:	5c9b      	ldrb	r3, [r3, r2]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_ADC_Start+0x2a>
 800634e:	2302      	movs	r3, #2
 8006350:	e038      	b.n	80063c4 <HAL_ADC_Start+0x9c>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2234      	movs	r2, #52	; 0x34
 8006356:	2101      	movs	r1, #1
 8006358:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	7e5b      	ldrb	r3, [r3, #25]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d007      	beq.n	8006372 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006362:	230f      	movs	r3, #15
 8006364:	18fc      	adds	r4, r7, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	0018      	movs	r0, r3
 800636a:	f000 fa1d 	bl	80067a8 <ADC_Enable>
 800636e:	0003      	movs	r3, r0
 8006370:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006372:	230f      	movs	r3, #15
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d120      	bne.n	80063be <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	4a12      	ldr	r2, [pc, #72]	; (80063cc <HAL_ADC_Start+0xa4>)
 8006382:	4013      	ands	r3, r2
 8006384:	2280      	movs	r2, #128	; 0x80
 8006386:	0052      	lsls	r2, r2, #1
 8006388:	431a      	orrs	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2234      	movs	r2, #52	; 0x34
 8006398:	2100      	movs	r1, #0
 800639a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	221c      	movs	r2, #28
 80063a2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689a      	ldr	r2, [r3, #8]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2104      	movs	r1, #4
 80063b0:	430a      	orrs	r2, r1
 80063b2:	609a      	str	r2, [r3, #8]
 80063b4:	e003      	b.n	80063be <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80063b6:	230f      	movs	r3, #15
 80063b8:	18fb      	adds	r3, r7, r3
 80063ba:	2202      	movs	r2, #2
 80063bc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80063be:	230f      	movs	r3, #15
 80063c0:	18fb      	adds	r3, r7, r3
 80063c2:	781b      	ldrb	r3, [r3, #0]
}
 80063c4:	0018      	movs	r0, r3
 80063c6:	46bd      	mov	sp, r7
 80063c8:	b005      	add	sp, #20
 80063ca:	bd90      	pop	{r4, r7, pc}
 80063cc:	fffff0fe 	.word	0xfffff0fe

080063d0 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80063d0:	b5b0      	push	{r4, r5, r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063d8:	230f      	movs	r3, #15
 80063da:	18fb      	adds	r3, r7, r3
 80063dc:	2200      	movs	r2, #0
 80063de:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2234      	movs	r2, #52	; 0x34
 80063e4:	5c9b      	ldrb	r3, [r3, r2]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_ADC_Stop+0x1e>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e02a      	b.n	8006444 <HAL_ADC_Stop+0x74>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2234      	movs	r2, #52	; 0x34
 80063f2:	2101      	movs	r1, #1
 80063f4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80063f6:	250f      	movs	r5, #15
 80063f8:	197c      	adds	r4, r7, r5
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	0018      	movs	r0, r3
 80063fe:	f000 fab9 	bl	8006974 <ADC_ConversionStop>
 8006402:	0003      	movs	r3, r0
 8006404:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006406:	197b      	adds	r3, r7, r5
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d113      	bne.n	8006436 <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800640e:	250f      	movs	r5, #15
 8006410:	197c      	adds	r4, r7, r5
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	0018      	movs	r0, r3
 8006416:	f000 fa43 	bl	80068a0 <ADC_Disable>
 800641a:	0003      	movs	r3, r0
 800641c:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800641e:	197b      	adds	r3, r7, r5
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d107      	bne.n	8006436 <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	4a08      	ldr	r2, [pc, #32]	; (800644c <HAL_ADC_Stop+0x7c>)
 800642c:	4013      	ands	r3, r2
 800642e:	2201      	movs	r2, #1
 8006430:	431a      	orrs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2234      	movs	r2, #52	; 0x34
 800643a:	2100      	movs	r1, #0
 800643c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800643e:	230f      	movs	r3, #15
 8006440:	18fb      	adds	r3, r7, r3
 8006442:	781b      	ldrb	r3, [r3, #0]
}
 8006444:	0018      	movs	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	b004      	add	sp, #16
 800644a:	bdb0      	pop	{r4, r5, r7, pc}
 800644c:	fffffefe 	.word	0xfffffefe

08006450 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	2b08      	cmp	r3, #8
 8006460:	d102      	bne.n	8006468 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8006462:	2308      	movs	r3, #8
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	e014      	b.n	8006492 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	4013      	ands	r3, r2
 8006472:	2b01      	cmp	r3, #1
 8006474:	d10b      	bne.n	800648e <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	2220      	movs	r2, #32
 800647c:	431a      	orrs	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2234      	movs	r2, #52	; 0x34
 8006486:	2100      	movs	r1, #0
 8006488:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e06b      	b.n	8006566 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800648e:	230c      	movs	r3, #12
 8006490:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8006492:	f7ff fddd 	bl	8006050 <HAL_GetTick>
 8006496:	0003      	movs	r3, r0
 8006498:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800649a:	e019      	b.n	80064d0 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	3301      	adds	r3, #1
 80064a0:	d016      	beq.n	80064d0 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d007      	beq.n	80064b8 <HAL_ADC_PollForConversion+0x68>
 80064a8:	f7ff fdd2 	bl	8006050 <HAL_GetTick>
 80064ac:	0002      	movs	r2, r0
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d20b      	bcs.n	80064d0 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	2204      	movs	r2, #4
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2234      	movs	r2, #52	; 0x34
 80064c8:	2100      	movs	r1, #0
 80064ca:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e04a      	b.n	8006566 <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4013      	ands	r3, r2
 80064da:	d0df      	beq.n	800649c <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	2280      	movs	r2, #128	; 0x80
 80064e2:	0092      	lsls	r2, r2, #2
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	23c0      	movs	r3, #192	; 0xc0
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	4013      	ands	r3, r2
 80064f6:	d12d      	bne.n	8006554 <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d129      	bne.n	8006554 <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2208      	movs	r2, #8
 8006508:	4013      	ands	r3, r2
 800650a:	2b08      	cmp	r3, #8
 800650c:	d122      	bne.n	8006554 <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	2204      	movs	r2, #4
 8006516:	4013      	ands	r3, r2
 8006518:	d110      	bne.n	800653c <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	210c      	movs	r1, #12
 8006526:	438a      	bics	r2, r1
 8006528:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	4a10      	ldr	r2, [pc, #64]	; (8006570 <HAL_ADC_PollForConversion+0x120>)
 8006530:	4013      	ands	r3, r2
 8006532:	2201      	movs	r2, #1
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	639a      	str	r2, [r3, #56]	; 0x38
 800653a:	e00b      	b.n	8006554 <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	2220      	movs	r2, #32
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654c:	2201      	movs	r2, #1
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	7e1b      	ldrb	r3, [r3, #24]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d103      	bne.n	8006564 <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	220c      	movs	r2, #12
 8006562:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	0018      	movs	r0, r3
 8006568:	46bd      	mov	sp, r7
 800656a:	b004      	add	sp, #16
 800656c:	bd80      	pop	{r7, pc}
 800656e:	46c0      	nop			; (mov r8, r8)
 8006570:	fffffefe 	.word	0xfffffefe

08006574 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006582:	0018      	movs	r0, r3
 8006584:	46bd      	mov	sp, r7
 8006586:	b002      	add	sp, #8
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006596:	230f      	movs	r3, #15
 8006598:	18fb      	adds	r3, r7, r3
 800659a:	2200      	movs	r2, #0
 800659c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a6:	2380      	movs	r3, #128	; 0x80
 80065a8:	055b      	lsls	r3, r3, #21
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d011      	beq.n	80065d2 <HAL_ADC_ConfigChannel+0x46>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d00d      	beq.n	80065d2 <HAL_ADC_ConfigChannel+0x46>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d009      	beq.n	80065d2 <HAL_ADC_ConfigChannel+0x46>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d005      	beq.n	80065d2 <HAL_ADC_ConfigChannel+0x46>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d001      	beq.n	80065d2 <HAL_ADC_ConfigChannel+0x46>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2234      	movs	r2, #52	; 0x34
 80065d6:	5c9b      	ldrb	r3, [r3, r2]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <HAL_ADC_ConfigChannel+0x54>
 80065dc:	2302      	movs	r3, #2
 80065de:	e0d0      	b.n	8006782 <HAL_ADC_ConfigChannel+0x1f6>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2234      	movs	r2, #52	; 0x34
 80065e4:	2101      	movs	r1, #1
 80065e6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	2204      	movs	r2, #4
 80065f0:	4013      	ands	r3, r2
 80065f2:	d000      	beq.n	80065f6 <HAL_ADC_ConfigChannel+0x6a>
 80065f4:	e0b4      	b.n	8006760 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	4a64      	ldr	r2, [pc, #400]	; (800678c <HAL_ADC_ConfigChannel+0x200>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d100      	bne.n	8006602 <HAL_ADC_ConfigChannel+0x76>
 8006600:	e082      	b.n	8006708 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2201      	movs	r2, #1
 800660e:	409a      	lsls	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661c:	2380      	movs	r3, #128	; 0x80
 800661e:	055b      	lsls	r3, r3, #21
 8006620:	429a      	cmp	r2, r3
 8006622:	d037      	beq.n	8006694 <HAL_ADC_ConfigChannel+0x108>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	2b01      	cmp	r3, #1
 800662a:	d033      	beq.n	8006694 <HAL_ADC_ConfigChannel+0x108>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	2b02      	cmp	r3, #2
 8006632:	d02f      	beq.n	8006694 <HAL_ADC_ConfigChannel+0x108>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	2b03      	cmp	r3, #3
 800663a:	d02b      	beq.n	8006694 <HAL_ADC_ConfigChannel+0x108>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	2b04      	cmp	r3, #4
 8006642:	d027      	beq.n	8006694 <HAL_ADC_ConfigChannel+0x108>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006648:	2b05      	cmp	r3, #5
 800664a:	d023      	beq.n	8006694 <HAL_ADC_ConfigChannel+0x108>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	2b06      	cmp	r3, #6
 8006652:	d01f      	beq.n	8006694 <HAL_ADC_ConfigChannel+0x108>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	2b07      	cmp	r3, #7
 800665a:	d01b      	beq.n	8006694 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	2107      	movs	r1, #7
 8006668:	400b      	ands	r3, r1
 800666a:	429a      	cmp	r2, r3
 800666c:	d012      	beq.n	8006694 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	695a      	ldr	r2, [r3, #20]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2107      	movs	r1, #7
 800667a:	438a      	bics	r2, r1
 800667c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6959      	ldr	r1, [r3, #20]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	2207      	movs	r2, #7
 800668a:	401a      	ands	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b10      	cmp	r3, #16
 800669a:	d007      	beq.n	80066ac <HAL_ADC_ConfigChannel+0x120>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b11      	cmp	r3, #17
 80066a2:	d003      	beq.n	80066ac <HAL_ADC_ConfigChannel+0x120>
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b12      	cmp	r3, #18
 80066aa:	d163      	bne.n	8006774 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80066ac:	4b38      	ldr	r3, [pc, #224]	; (8006790 <HAL_ADC_ConfigChannel+0x204>)
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b10      	cmp	r3, #16
 80066b6:	d009      	beq.n	80066cc <HAL_ADC_ConfigChannel+0x140>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b11      	cmp	r3, #17
 80066be:	d102      	bne.n	80066c6 <HAL_ADC_ConfigChannel+0x13a>
 80066c0:	2380      	movs	r3, #128	; 0x80
 80066c2:	03db      	lsls	r3, r3, #15
 80066c4:	e004      	b.n	80066d0 <HAL_ADC_ConfigChannel+0x144>
 80066c6:	2380      	movs	r3, #128	; 0x80
 80066c8:	045b      	lsls	r3, r3, #17
 80066ca:	e001      	b.n	80066d0 <HAL_ADC_ConfigChannel+0x144>
 80066cc:	2380      	movs	r3, #128	; 0x80
 80066ce:	041b      	lsls	r3, r3, #16
 80066d0:	4a2f      	ldr	r2, [pc, #188]	; (8006790 <HAL_ADC_ConfigChannel+0x204>)
 80066d2:	430b      	orrs	r3, r1
 80066d4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b10      	cmp	r3, #16
 80066dc:	d14a      	bne.n	8006774 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80066de:	4b2d      	ldr	r3, [pc, #180]	; (8006794 <HAL_ADC_ConfigChannel+0x208>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	492d      	ldr	r1, [pc, #180]	; (8006798 <HAL_ADC_ConfigChannel+0x20c>)
 80066e4:	0018      	movs	r0, r3
 80066e6:	f7f9 fd0f 	bl	8000108 <__udivsi3>
 80066ea:	0003      	movs	r3, r0
 80066ec:	001a      	movs	r2, r3
 80066ee:	0013      	movs	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	189b      	adds	r3, r3, r2
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80066f8:	e002      	b.n	8006700 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f9      	bne.n	80066fa <HAL_ADC_ConfigChannel+0x16e>
 8006706:	e035      	b.n	8006774 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2101      	movs	r1, #1
 8006714:	4099      	lsls	r1, r3
 8006716:	000b      	movs	r3, r1
 8006718:	43d9      	mvns	r1, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	400a      	ands	r2, r1
 8006720:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b10      	cmp	r3, #16
 8006728:	d007      	beq.n	800673a <HAL_ADC_ConfigChannel+0x1ae>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b11      	cmp	r3, #17
 8006730:	d003      	beq.n	800673a <HAL_ADC_ConfigChannel+0x1ae>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b12      	cmp	r3, #18
 8006738:	d11c      	bne.n	8006774 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800673a:	4b15      	ldr	r3, [pc, #84]	; (8006790 <HAL_ADC_ConfigChannel+0x204>)
 800673c:	6819      	ldr	r1, [r3, #0]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b10      	cmp	r3, #16
 8006744:	d007      	beq.n	8006756 <HAL_ADC_ConfigChannel+0x1ca>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b11      	cmp	r3, #17
 800674c:	d101      	bne.n	8006752 <HAL_ADC_ConfigChannel+0x1c6>
 800674e:	4b13      	ldr	r3, [pc, #76]	; (800679c <HAL_ADC_ConfigChannel+0x210>)
 8006750:	e002      	b.n	8006758 <HAL_ADC_ConfigChannel+0x1cc>
 8006752:	4b13      	ldr	r3, [pc, #76]	; (80067a0 <HAL_ADC_ConfigChannel+0x214>)
 8006754:	e000      	b.n	8006758 <HAL_ADC_ConfigChannel+0x1cc>
 8006756:	4b13      	ldr	r3, [pc, #76]	; (80067a4 <HAL_ADC_ConfigChannel+0x218>)
 8006758:	4a0d      	ldr	r2, [pc, #52]	; (8006790 <HAL_ADC_ConfigChannel+0x204>)
 800675a:	400b      	ands	r3, r1
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	e009      	b.n	8006774 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006764:	2220      	movs	r2, #32
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800676c:	230f      	movs	r3, #15
 800676e:	18fb      	adds	r3, r7, r3
 8006770:	2201      	movs	r2, #1
 8006772:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2234      	movs	r2, #52	; 0x34
 8006778:	2100      	movs	r1, #0
 800677a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800677c:	230f      	movs	r3, #15
 800677e:	18fb      	adds	r3, r7, r3
 8006780:	781b      	ldrb	r3, [r3, #0]
}
 8006782:	0018      	movs	r0, r3
 8006784:	46bd      	mov	sp, r7
 8006786:	b004      	add	sp, #16
 8006788:	bd80      	pop	{r7, pc}
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	00001001 	.word	0x00001001
 8006790:	40012708 	.word	0x40012708
 8006794:	20000014 	.word	0x20000014
 8006798:	000f4240 	.word	0x000f4240
 800679c:	ffbfffff 	.word	0xffbfffff
 80067a0:	feffffff 	.word	0xfeffffff
 80067a4:	ff7fffff 	.word	0xff7fffff

080067a8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	2203      	movs	r2, #3
 80067c0:	4013      	ands	r3, r2
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d112      	bne.n	80067ec <ADC_Enable+0x44>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2201      	movs	r2, #1
 80067ce:	4013      	ands	r3, r2
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d009      	beq.n	80067e8 <ADC_Enable+0x40>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	2380      	movs	r3, #128	; 0x80
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	401a      	ands	r2, r3
 80067e0:	2380      	movs	r3, #128	; 0x80
 80067e2:	021b      	lsls	r3, r3, #8
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d101      	bne.n	80067ec <ADC_Enable+0x44>
 80067e8:	2301      	movs	r3, #1
 80067ea:	e000      	b.n	80067ee <ADC_Enable+0x46>
 80067ec:	2300      	movs	r3, #0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d14b      	bne.n	800688a <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	4a26      	ldr	r2, [pc, #152]	; (8006894 <ADC_Enable+0xec>)
 80067fa:	4013      	ands	r3, r2
 80067fc:	d00d      	beq.n	800681a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006802:	2210      	movs	r2, #16
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680e:	2201      	movs	r2, #1
 8006810:	431a      	orrs	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e038      	b.n	800688c <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2101      	movs	r1, #1
 8006826:	430a      	orrs	r2, r1
 8006828:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800682a:	4b1b      	ldr	r3, [pc, #108]	; (8006898 <ADC_Enable+0xf0>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	491b      	ldr	r1, [pc, #108]	; (800689c <ADC_Enable+0xf4>)
 8006830:	0018      	movs	r0, r3
 8006832:	f7f9 fc69 	bl	8000108 <__udivsi3>
 8006836:	0003      	movs	r3, r0
 8006838:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800683a:	e002      	b.n	8006842 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	3b01      	subs	r3, #1
 8006840:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1f9      	bne.n	800683c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006848:	f7ff fc02 	bl	8006050 <HAL_GetTick>
 800684c:	0003      	movs	r3, r0
 800684e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006850:	e014      	b.n	800687c <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006852:	f7ff fbfd 	bl	8006050 <HAL_GetTick>
 8006856:	0002      	movs	r2, r0
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d90d      	bls.n	800687c <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006864:	2210      	movs	r2, #16
 8006866:	431a      	orrs	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006870:	2201      	movs	r2, #1
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e007      	b.n	800688c <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2201      	movs	r2, #1
 8006884:	4013      	ands	r3, r2
 8006886:	2b01      	cmp	r3, #1
 8006888:	d1e3      	bne.n	8006852 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	0018      	movs	r0, r3
 800688e:	46bd      	mov	sp, r7
 8006890:	b004      	add	sp, #16
 8006892:	bd80      	pop	{r7, pc}
 8006894:	80000017 	.word	0x80000017
 8006898:	20000014 	.word	0x20000014
 800689c:	000f4240 	.word	0x000f4240

080068a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	2203      	movs	r2, #3
 80068b4:	4013      	ands	r3, r2
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d112      	bne.n	80068e0 <ADC_Disable+0x40>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2201      	movs	r2, #1
 80068c2:	4013      	ands	r3, r2
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d009      	beq.n	80068dc <ADC_Disable+0x3c>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	2380      	movs	r3, #128	; 0x80
 80068d0:	021b      	lsls	r3, r3, #8
 80068d2:	401a      	ands	r2, r3
 80068d4:	2380      	movs	r3, #128	; 0x80
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	429a      	cmp	r2, r3
 80068da:	d101      	bne.n	80068e0 <ADC_Disable+0x40>
 80068dc:	2301      	movs	r3, #1
 80068de:	e000      	b.n	80068e2 <ADC_Disable+0x42>
 80068e0:	2300      	movs	r3, #0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d041      	beq.n	800696a <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	2205      	movs	r2, #5
 80068ee:	4013      	ands	r3, r2
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d110      	bne.n	8006916 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2102      	movs	r1, #2
 8006900:	430a      	orrs	r2, r1
 8006902:	609a      	str	r2, [r3, #8]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2203      	movs	r2, #3
 800690a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800690c:	f7ff fba0 	bl	8006050 <HAL_GetTick>
 8006910:	0003      	movs	r3, r0
 8006912:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006914:	e022      	b.n	800695c <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	2210      	movs	r2, #16
 800691c:	431a      	orrs	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006926:	2201      	movs	r2, #1
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e01c      	b.n	800696c <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006932:	f7ff fb8d 	bl	8006050 <HAL_GetTick>
 8006936:	0002      	movs	r2, r0
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d90d      	bls.n	800695c <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	2210      	movs	r2, #16
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006950:	2201      	movs	r2, #1
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e007      	b.n	800696c <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	2201      	movs	r2, #1
 8006964:	4013      	ands	r3, r2
 8006966:	2b01      	cmp	r3, #1
 8006968:	d0e3      	beq.n	8006932 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	0018      	movs	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	b004      	add	sp, #16
 8006972:	bd80      	pop	{r7, pc}

08006974 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2204      	movs	r2, #4
 8006988:	4013      	ands	r3, r2
 800698a:	d034      	beq.n	80069f6 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	2204      	movs	r2, #4
 8006994:	4013      	ands	r3, r2
 8006996:	2b04      	cmp	r3, #4
 8006998:	d10d      	bne.n	80069b6 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2202      	movs	r2, #2
 80069a2:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80069a4:	d107      	bne.n	80069b6 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2110      	movs	r1, #16
 80069b2:	430a      	orrs	r2, r1
 80069b4:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80069b6:	f7ff fb4b 	bl	8006050 <HAL_GetTick>
 80069ba:	0003      	movs	r3, r0
 80069bc:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80069be:	e014      	b.n	80069ea <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80069c0:	f7ff fb46 	bl	8006050 <HAL_GetTick>
 80069c4:	0002      	movs	r2, r0
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d90d      	bls.n	80069ea <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	2210      	movs	r2, #16
 80069d4:	431a      	orrs	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069de:	2201      	movs	r2, #1
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e006      	b.n	80069f8 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2204      	movs	r2, #4
 80069f2:	4013      	ands	r3, r2
 80069f4:	d1e4      	bne.n	80069c0 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	0018      	movs	r0, r3
 80069fa:	46bd      	mov	sp, r7
 80069fc:	b004      	add	sp, #16
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a08:	2317      	movs	r3, #23
 8006a0a:	18fb      	adds	r3, r7, r3
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2234      	movs	r2, #52	; 0x34
 8006a1c:	5c9b      	ldrb	r3, [r3, r2]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d101      	bne.n	8006a26 <HAL_ADCEx_Calibration_Start+0x26>
 8006a22:	2302      	movs	r3, #2
 8006a24:	e084      	b.n	8006b30 <HAL_ADCEx_Calibration_Start+0x130>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2234      	movs	r2, #52	; 0x34
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	2203      	movs	r2, #3
 8006a36:	4013      	ands	r3, r2
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d112      	bne.n	8006a62 <HAL_ADCEx_Calibration_Start+0x62>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2201      	movs	r2, #1
 8006a44:	4013      	ands	r3, r2
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d009      	beq.n	8006a5e <HAL_ADCEx_Calibration_Start+0x5e>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	2380      	movs	r3, #128	; 0x80
 8006a52:	021b      	lsls	r3, r3, #8
 8006a54:	401a      	ands	r2, r3
 8006a56:	2380      	movs	r3, #128	; 0x80
 8006a58:	021b      	lsls	r3, r3, #8
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d101      	bne.n	8006a62 <HAL_ADCEx_Calibration_Start+0x62>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e000      	b.n	8006a64 <HAL_ADCEx_Calibration_Start+0x64>
 8006a62:	2300      	movs	r3, #0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d152      	bne.n	8006b0e <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	4a32      	ldr	r2, [pc, #200]	; (8006b38 <HAL_ADCEx_Calibration_Start+0x138>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	2202      	movs	r2, #2
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	2203      	movs	r2, #3
 8006a80:	4013      	ands	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2103      	movs	r1, #3
 8006a90:	438a      	bics	r2, r1
 8006a92:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2180      	movs	r1, #128	; 0x80
 8006aa0:	0609      	lsls	r1, r1, #24
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8006aa6:	f7ff fad3 	bl	8006050 <HAL_GetTick>
 8006aaa:	0003      	movs	r3, r0
 8006aac:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006aae:	e014      	b.n	8006ada <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006ab0:	f7ff face 	bl	8006050 <HAL_GetTick>
 8006ab4:	0002      	movs	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d90d      	bls.n	8006ada <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	2212      	movs	r2, #18
 8006ac4:	4393      	bics	r3, r2
 8006ac6:	2210      	movs	r2, #16
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2234      	movs	r2, #52	; 0x34
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e02a      	b.n	8006b30 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	0fdb      	lsrs	r3, r3, #31
 8006ae2:	07da      	lsls	r2, r3, #31
 8006ae4:	2380      	movs	r3, #128	; 0x80
 8006ae6:	061b      	lsls	r3, r3, #24
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d0e1      	beq.n	8006ab0 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68d9      	ldr	r1, [r3, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b00:	2203      	movs	r2, #3
 8006b02:	4393      	bics	r3, r2
 8006b04:	2201      	movs	r2, #1
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	639a      	str	r2, [r3, #56]	; 0x38
 8006b0c:	e009      	b.n	8006b22 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	2220      	movs	r2, #32
 8006b14:	431a      	orrs	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8006b1a:	2317      	movs	r3, #23
 8006b1c:	18fb      	adds	r3, r7, r3
 8006b1e:	2201      	movs	r2, #1
 8006b20:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2234      	movs	r2, #52	; 0x34
 8006b26:	2100      	movs	r1, #0
 8006b28:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006b2a:	2317      	movs	r3, #23
 8006b2c:	18fb      	adds	r3, r7, r3
 8006b2e:	781b      	ldrb	r3, [r3, #0]
}
 8006b30:	0018      	movs	r0, r3
 8006b32:	46bd      	mov	sp, r7
 8006b34:	b006      	add	sp, #24
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	fffffefd 	.word	0xfffffefd

08006b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	0002      	movs	r2, r0
 8006b44:	1dfb      	adds	r3, r7, #7
 8006b46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006b48:	1dfb      	adds	r3, r7, #7
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b4e:	d809      	bhi.n	8006b64 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b50:	1dfb      	adds	r3, r7, #7
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	001a      	movs	r2, r3
 8006b56:	231f      	movs	r3, #31
 8006b58:	401a      	ands	r2, r3
 8006b5a:	4b04      	ldr	r3, [pc, #16]	; (8006b6c <__NVIC_EnableIRQ+0x30>)
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	4091      	lsls	r1, r2
 8006b60:	000a      	movs	r2, r1
 8006b62:	601a      	str	r2, [r3, #0]
  }
}
 8006b64:	46c0      	nop			; (mov r8, r8)
 8006b66:	46bd      	mov	sp, r7
 8006b68:	b002      	add	sp, #8
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	e000e100 	.word	0xe000e100

08006b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b70:	b590      	push	{r4, r7, lr}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	0002      	movs	r2, r0
 8006b78:	6039      	str	r1, [r7, #0]
 8006b7a:	1dfb      	adds	r3, r7, #7
 8006b7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006b7e:	1dfb      	adds	r3, r7, #7
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	2b7f      	cmp	r3, #127	; 0x7f
 8006b84:	d828      	bhi.n	8006bd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006b86:	4a2f      	ldr	r2, [pc, #188]	; (8006c44 <__NVIC_SetPriority+0xd4>)
 8006b88:	1dfb      	adds	r3, r7, #7
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	b25b      	sxtb	r3, r3
 8006b8e:	089b      	lsrs	r3, r3, #2
 8006b90:	33c0      	adds	r3, #192	; 0xc0
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	589b      	ldr	r3, [r3, r2]
 8006b96:	1dfa      	adds	r2, r7, #7
 8006b98:	7812      	ldrb	r2, [r2, #0]
 8006b9a:	0011      	movs	r1, r2
 8006b9c:	2203      	movs	r2, #3
 8006b9e:	400a      	ands	r2, r1
 8006ba0:	00d2      	lsls	r2, r2, #3
 8006ba2:	21ff      	movs	r1, #255	; 0xff
 8006ba4:	4091      	lsls	r1, r2
 8006ba6:	000a      	movs	r2, r1
 8006ba8:	43d2      	mvns	r2, r2
 8006baa:	401a      	ands	r2, r3
 8006bac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	019b      	lsls	r3, r3, #6
 8006bb2:	22ff      	movs	r2, #255	; 0xff
 8006bb4:	401a      	ands	r2, r3
 8006bb6:	1dfb      	adds	r3, r7, #7
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	0018      	movs	r0, r3
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	4003      	ands	r3, r0
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006bc4:	481f      	ldr	r0, [pc, #124]	; (8006c44 <__NVIC_SetPriority+0xd4>)
 8006bc6:	1dfb      	adds	r3, r7, #7
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	b25b      	sxtb	r3, r3
 8006bcc:	089b      	lsrs	r3, r3, #2
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	33c0      	adds	r3, #192	; 0xc0
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006bd6:	e031      	b.n	8006c3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006bd8:	4a1b      	ldr	r2, [pc, #108]	; (8006c48 <__NVIC_SetPriority+0xd8>)
 8006bda:	1dfb      	adds	r3, r7, #7
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	0019      	movs	r1, r3
 8006be0:	230f      	movs	r3, #15
 8006be2:	400b      	ands	r3, r1
 8006be4:	3b08      	subs	r3, #8
 8006be6:	089b      	lsrs	r3, r3, #2
 8006be8:	3306      	adds	r3, #6
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	18d3      	adds	r3, r2, r3
 8006bee:	3304      	adds	r3, #4
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	1dfa      	adds	r2, r7, #7
 8006bf4:	7812      	ldrb	r2, [r2, #0]
 8006bf6:	0011      	movs	r1, r2
 8006bf8:	2203      	movs	r2, #3
 8006bfa:	400a      	ands	r2, r1
 8006bfc:	00d2      	lsls	r2, r2, #3
 8006bfe:	21ff      	movs	r1, #255	; 0xff
 8006c00:	4091      	lsls	r1, r2
 8006c02:	000a      	movs	r2, r1
 8006c04:	43d2      	mvns	r2, r2
 8006c06:	401a      	ands	r2, r3
 8006c08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	019b      	lsls	r3, r3, #6
 8006c0e:	22ff      	movs	r2, #255	; 0xff
 8006c10:	401a      	ands	r2, r3
 8006c12:	1dfb      	adds	r3, r7, #7
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	0018      	movs	r0, r3
 8006c18:	2303      	movs	r3, #3
 8006c1a:	4003      	ands	r3, r0
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006c20:	4809      	ldr	r0, [pc, #36]	; (8006c48 <__NVIC_SetPriority+0xd8>)
 8006c22:	1dfb      	adds	r3, r7, #7
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	001c      	movs	r4, r3
 8006c28:	230f      	movs	r3, #15
 8006c2a:	4023      	ands	r3, r4
 8006c2c:	3b08      	subs	r3, #8
 8006c2e:	089b      	lsrs	r3, r3, #2
 8006c30:	430a      	orrs	r2, r1
 8006c32:	3306      	adds	r3, #6
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	18c3      	adds	r3, r0, r3
 8006c38:	3304      	adds	r3, #4
 8006c3a:	601a      	str	r2, [r3, #0]
}
 8006c3c:	46c0      	nop			; (mov r8, r8)
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	b003      	add	sp, #12
 8006c42:	bd90      	pop	{r4, r7, pc}
 8006c44:	e000e100 	.word	0xe000e100
 8006c48:	e000ed00 	.word	0xe000ed00

08006c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	4a0c      	ldr	r2, [pc, #48]	; (8006c8c <SysTick_Config+0x40>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d901      	bls.n	8006c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e010      	b.n	8006c84 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c62:	4b0b      	ldr	r3, [pc, #44]	; (8006c90 <SysTick_Config+0x44>)
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	3a01      	subs	r2, #1
 8006c68:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	425b      	negs	r3, r3
 8006c6e:	2103      	movs	r1, #3
 8006c70:	0018      	movs	r0, r3
 8006c72:	f7ff ff7d 	bl	8006b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c76:	4b06      	ldr	r3, [pc, #24]	; (8006c90 <SysTick_Config+0x44>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c7c:	4b04      	ldr	r3, [pc, #16]	; (8006c90 <SysTick_Config+0x44>)
 8006c7e:	2207      	movs	r2, #7
 8006c80:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	0018      	movs	r0, r3
 8006c86:	46bd      	mov	sp, r7
 8006c88:	b002      	add	sp, #8
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	00ffffff 	.word	0x00ffffff
 8006c90:	e000e010 	.word	0xe000e010

08006c94 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	607a      	str	r2, [r7, #4]
 8006c9e:	210f      	movs	r1, #15
 8006ca0:	187b      	adds	r3, r7, r1
 8006ca2:	1c02      	adds	r2, r0, #0
 8006ca4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	187b      	adds	r3, r7, r1
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	b25b      	sxtb	r3, r3
 8006cae:	0011      	movs	r1, r2
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f7ff ff5d 	bl	8006b70 <__NVIC_SetPriority>
}
 8006cb6:	46c0      	nop			; (mov r8, r8)
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	b004      	add	sp, #16
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b082      	sub	sp, #8
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	0002      	movs	r2, r0
 8006cc6:	1dfb      	adds	r3, r7, #7
 8006cc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006cca:	1dfb      	adds	r3, r7, #7
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	b25b      	sxtb	r3, r3
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	f7ff ff33 	bl	8006b3c <__NVIC_EnableIRQ>
}
 8006cd6:	46c0      	nop			; (mov r8, r8)
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	b002      	add	sp, #8
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b082      	sub	sp, #8
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f7ff ffaf 	bl	8006c4c <SysTick_Config>
 8006cee:	0003      	movs	r3, r0
}
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	b002      	add	sp, #8
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	603a      	str	r2, [r7, #0]
 8006d04:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006d06:	2317      	movs	r3, #23
 8006d08:	18fb      	adds	r3, r7, r3
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8006d0e:	2316      	movs	r3, #22
 8006d10:	18fb      	adds	r3, r7, r3
 8006d12:	2200      	movs	r2, #0
 8006d14:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8006d16:	2315      	movs	r3, #21
 8006d18:	18fb      	adds	r3, r7, r3
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006d1e:	4b3e      	ldr	r3, [pc, #248]	; (8006e18 <HAL_FLASH_Program+0x120>)
 8006d20:	7e1b      	ldrb	r3, [r3, #24]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d101      	bne.n	8006d2a <HAL_FLASH_Program+0x32>
 8006d26:	2302      	movs	r3, #2
 8006d28:	e072      	b.n	8006e10 <HAL_FLASH_Program+0x118>
 8006d2a:	4b3b      	ldr	r3, [pc, #236]	; (8006e18 <HAL_FLASH_Program+0x120>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006d30:	2317      	movs	r3, #23
 8006d32:	18fe      	adds	r6, r7, r3
 8006d34:	4b39      	ldr	r3, [pc, #228]	; (8006e1c <HAL_FLASH_Program+0x124>)
 8006d36:	0018      	movs	r0, r3
 8006d38:	f000 f8c4 	bl	8006ec4 <FLASH_WaitForLastOperation>
 8006d3c:	0003      	movs	r3, r0
 8006d3e:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8006d40:	2317      	movs	r3, #23
 8006d42:	18fb      	adds	r3, r7, r3
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d15c      	bne.n	8006e04 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d104      	bne.n	8006d5a <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8006d50:	2315      	movs	r3, #21
 8006d52:	18fb      	adds	r3, r7, r3
 8006d54:	2201      	movs	r2, #1
 8006d56:	701a      	strb	r2, [r3, #0]
 8006d58:	e00b      	b.n	8006d72 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d104      	bne.n	8006d6a <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8006d60:	2315      	movs	r3, #21
 8006d62:	18fb      	adds	r3, r7, r3
 8006d64:	2202      	movs	r2, #2
 8006d66:	701a      	strb	r2, [r3, #0]
 8006d68:	e003      	b.n	8006d72 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8006d6a:	2315      	movs	r3, #21
 8006d6c:	18fb      	adds	r3, r7, r3
 8006d6e:	2204      	movs	r2, #4
 8006d70:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8006d72:	2316      	movs	r3, #22
 8006d74:	18fb      	adds	r3, r7, r3
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	e039      	b.n	8006df0 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006d7c:	2116      	movs	r1, #22
 8006d7e:	187b      	adds	r3, r7, r1
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	005a      	lsls	r2, r3, #1
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	18d0      	adds	r0, r2, r3
 8006d88:	187b      	adds	r3, r7, r1
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	001a      	movs	r2, r3
 8006d90:	3a20      	subs	r2, #32
 8006d92:	2a00      	cmp	r2, #0
 8006d94:	db03      	blt.n	8006d9e <HAL_FLASH_Program+0xa6>
 8006d96:	6879      	ldr	r1, [r7, #4]
 8006d98:	40d1      	lsrs	r1, r2
 8006d9a:	000c      	movs	r4, r1
 8006d9c:	e008      	b.n	8006db0 <HAL_FLASH_Program+0xb8>
 8006d9e:	2220      	movs	r2, #32
 8006da0:	1ad2      	subs	r2, r2, r3
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	4091      	lsls	r1, r2
 8006da6:	000a      	movs	r2, r1
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	40d9      	lsrs	r1, r3
 8006dac:	000c      	movs	r4, r1
 8006dae:	4314      	orrs	r4, r2
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	40da      	lsrs	r2, r3
 8006db4:	0015      	movs	r5, r2
 8006db6:	b2a3      	uxth	r3, r4
 8006db8:	0019      	movs	r1, r3
 8006dba:	f000 f867 	bl	8006e8c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006dbe:	2317      	movs	r3, #23
 8006dc0:	18fe      	adds	r6, r7, r3
 8006dc2:	4b16      	ldr	r3, [pc, #88]	; (8006e1c <HAL_FLASH_Program+0x124>)
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	f000 f87d 	bl	8006ec4 <FLASH_WaitForLastOperation>
 8006dca:	0003      	movs	r3, r0
 8006dcc:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006dce:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <HAL_FLASH_Program+0x128>)
 8006dd0:	691a      	ldr	r2, [r3, #16]
 8006dd2:	4b13      	ldr	r3, [pc, #76]	; (8006e20 <HAL_FLASH_Program+0x128>)
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	438a      	bics	r2, r1
 8006dd8:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8006dda:	2317      	movs	r3, #23
 8006ddc:	18fb      	adds	r3, r7, r3
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10e      	bne.n	8006e02 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8006de4:	2116      	movs	r1, #22
 8006de6:	187b      	adds	r3, r7, r1
 8006de8:	781a      	ldrb	r2, [r3, #0]
 8006dea:	187b      	adds	r3, r7, r1
 8006dec:	3201      	adds	r2, #1
 8006dee:	701a      	strb	r2, [r3, #0]
 8006df0:	2316      	movs	r3, #22
 8006df2:	18fa      	adds	r2, r7, r3
 8006df4:	2315      	movs	r3, #21
 8006df6:	18fb      	adds	r3, r7, r3
 8006df8:	7812      	ldrb	r2, [r2, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d3bd      	bcc.n	8006d7c <HAL_FLASH_Program+0x84>
 8006e00:	e000      	b.n	8006e04 <HAL_FLASH_Program+0x10c>
      {
        break;
 8006e02:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006e04:	4b04      	ldr	r3, [pc, #16]	; (8006e18 <HAL_FLASH_Program+0x120>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	761a      	strb	r2, [r3, #24]

  return status;
 8006e0a:	2317      	movs	r3, #23
 8006e0c:	18fb      	adds	r3, r7, r3
 8006e0e:	781b      	ldrb	r3, [r3, #0]
}
 8006e10:	0018      	movs	r0, r3
 8006e12:	46bd      	mov	sp, r7
 8006e14:	b007      	add	sp, #28
 8006e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e18:	20000ae0 	.word	0x20000ae0
 8006e1c:	0000c350 	.word	0x0000c350
 8006e20:	40022000 	.word	0x40022000

08006e24 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006e2a:	1dfb      	adds	r3, r7, #7
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006e30:	4b0c      	ldr	r3, [pc, #48]	; (8006e64 <HAL_FLASH_Unlock+0x40>)
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	2280      	movs	r2, #128	; 0x80
 8006e36:	4013      	ands	r3, r2
 8006e38:	d00d      	beq.n	8006e56 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006e3a:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <HAL_FLASH_Unlock+0x40>)
 8006e3c:	4a0a      	ldr	r2, [pc, #40]	; (8006e68 <HAL_FLASH_Unlock+0x44>)
 8006e3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006e40:	4b08      	ldr	r3, [pc, #32]	; (8006e64 <HAL_FLASH_Unlock+0x40>)
 8006e42:	4a0a      	ldr	r2, [pc, #40]	; (8006e6c <HAL_FLASH_Unlock+0x48>)
 8006e44:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006e46:	4b07      	ldr	r3, [pc, #28]	; (8006e64 <HAL_FLASH_Unlock+0x40>)
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	2280      	movs	r2, #128	; 0x80
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	d002      	beq.n	8006e56 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8006e50:	1dfb      	adds	r3, r7, #7
 8006e52:	2201      	movs	r2, #1
 8006e54:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8006e56:	1dfb      	adds	r3, r7, #7
 8006e58:	781b      	ldrb	r3, [r3, #0]
}
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b002      	add	sp, #8
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	46c0      	nop			; (mov r8, r8)
 8006e64:	40022000 	.word	0x40022000
 8006e68:	45670123 	.word	0x45670123
 8006e6c:	cdef89ab 	.word	0xcdef89ab

08006e70 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006e74:	4b04      	ldr	r3, [pc, #16]	; (8006e88 <HAL_FLASH_Lock+0x18>)
 8006e76:	691a      	ldr	r2, [r3, #16]
 8006e78:	4b03      	ldr	r3, [pc, #12]	; (8006e88 <HAL_FLASH_Lock+0x18>)
 8006e7a:	2180      	movs	r1, #128	; 0x80
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	0018      	movs	r0, r3
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	40022000 	.word	0x40022000

08006e8c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	000a      	movs	r2, r1
 8006e96:	1cbb      	adds	r3, r7, #2
 8006e98:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006e9a:	4b08      	ldr	r3, [pc, #32]	; (8006ebc <FLASH_Program_HalfWord+0x30>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006ea0:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <FLASH_Program_HalfWord+0x34>)
 8006ea2:	691a      	ldr	r2, [r3, #16]
 8006ea4:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <FLASH_Program_HalfWord+0x34>)
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	1cba      	adds	r2, r7, #2
 8006eb0:	8812      	ldrh	r2, [r2, #0]
 8006eb2:	801a      	strh	r2, [r3, #0]
}
 8006eb4:	46c0      	nop			; (mov r8, r8)
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b002      	add	sp, #8
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	20000ae0 	.word	0x20000ae0
 8006ec0:	40022000 	.word	0x40022000

08006ec4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006ecc:	f7ff f8c0 	bl	8006050 <HAL_GetTick>
 8006ed0:	0003      	movs	r3, r0
 8006ed2:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006ed4:	e00f      	b.n	8006ef6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	d00c      	beq.n	8006ef6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d007      	beq.n	8006ef2 <FLASH_WaitForLastOperation+0x2e>
 8006ee2:	f7ff f8b5 	bl	8006050 <HAL_GetTick>
 8006ee6:	0002      	movs	r2, r0
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d201      	bcs.n	8006ef6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e01d      	b.n	8006f32 <FLASH_WaitForLastOperation+0x6e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006ef6:	4b11      	ldr	r3, [pc, #68]	; (8006f3c <FLASH_WaitForLastOperation+0x78>)
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	2201      	movs	r2, #1
 8006efc:	4013      	ands	r3, r2
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d0e9      	beq.n	8006ed6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006f02:	4b0e      	ldr	r3, [pc, #56]	; (8006f3c <FLASH_WaitForLastOperation+0x78>)
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	2220      	movs	r2, #32
 8006f08:	4013      	ands	r3, r2
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	d102      	bne.n	8006f14 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006f0e:	4b0b      	ldr	r3, [pc, #44]	; (8006f3c <FLASH_WaitForLastOperation+0x78>)
 8006f10:	2220      	movs	r2, #32
 8006f12:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006f14:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <FLASH_WaitForLastOperation+0x78>)
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	2210      	movs	r2, #16
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b10      	cmp	r3, #16
 8006f1e:	d005      	beq.n	8006f2c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006f20:	4b06      	ldr	r3, [pc, #24]	; (8006f3c <FLASH_WaitForLastOperation+0x78>)
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	2204      	movs	r2, #4
 8006f26:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	d101      	bne.n	8006f30 <FLASH_WaitForLastOperation+0x6c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006f2c:	f000 f808 	bl	8006f40 <FLASH_SetErrorCode>
//    return HAL_ERROR;
  }

  /* There is no error flag set */
  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	0018      	movs	r0, r3
 8006f34:	46bd      	mov	sp, r7
 8006f36:	b004      	add	sp, #16
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	40022000 	.word	0x40022000

08006f40 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006f4a:	4b13      	ldr	r3, [pc, #76]	; (8006f98 <FLASH_SetErrorCode+0x58>)
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	2210      	movs	r2, #16
 8006f50:	4013      	ands	r3, r2
 8006f52:	2b10      	cmp	r3, #16
 8006f54:	d109      	bne.n	8006f6a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006f56:	4b11      	ldr	r3, [pc, #68]	; (8006f9c <FLASH_SetErrorCode+0x5c>)
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	4b0f      	ldr	r3, [pc, #60]	; (8006f9c <FLASH_SetErrorCode+0x5c>)
 8006f60:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2210      	movs	r2, #16
 8006f66:	4313      	orrs	r3, r2
 8006f68:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006f6a:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <FLASH_SetErrorCode+0x58>)
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	2204      	movs	r2, #4
 8006f70:	4013      	ands	r3, r2
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d109      	bne.n	8006f8a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006f76:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <FLASH_SetErrorCode+0x5c>)
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <FLASH_SetErrorCode+0x5c>)
 8006f80:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2204      	movs	r2, #4
 8006f86:	4313      	orrs	r3, r2
 8006f88:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006f8a:	4b03      	ldr	r3, [pc, #12]	; (8006f98 <FLASH_SetErrorCode+0x58>)
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	60da      	str	r2, [r3, #12]
}  
 8006f90:	46c0      	nop			; (mov r8, r8)
 8006f92:	46bd      	mov	sp, r7
 8006f94:	b002      	add	sp, #8
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40022000 	.word	0x40022000
 8006f9c:	20000ae0 	.word	0x20000ae0

08006fa0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006fa0:	b5b0      	push	{r4, r5, r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006faa:	230f      	movs	r3, #15
 8006fac:	18fb      	adds	r3, r7, r3
 8006fae:	2201      	movs	r2, #1
 8006fb0:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006fb6:	4b32      	ldr	r3, [pc, #200]	; (8007080 <HAL_FLASHEx_Erase+0xe0>)
 8006fb8:	7e1b      	ldrb	r3, [r3, #24]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d101      	bne.n	8006fc2 <HAL_FLASHEx_Erase+0x22>
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e05a      	b.n	8007078 <HAL_FLASHEx_Erase+0xd8>
 8006fc2:	4b2f      	ldr	r3, [pc, #188]	; (8007080 <HAL_FLASHEx_Erase+0xe0>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d116      	bne.n	8006ffe <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006fd0:	4b2c      	ldr	r3, [pc, #176]	; (8007084 <HAL_FLASHEx_Erase+0xe4>)
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f7ff ff76 	bl	8006ec4 <FLASH_WaitForLastOperation>
 8006fd8:	1e03      	subs	r3, r0, #0
 8006fda:	d147      	bne.n	800706c <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8006fdc:	f000 f856 	bl	800708c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006fe0:	230f      	movs	r3, #15
 8006fe2:	18fc      	adds	r4, r7, r3
 8006fe4:	4b27      	ldr	r3, [pc, #156]	; (8007084 <HAL_FLASHEx_Erase+0xe4>)
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f7ff ff6c 	bl	8006ec4 <FLASH_WaitForLastOperation>
 8006fec:	0003      	movs	r3, r0
 8006fee:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006ff0:	4b25      	ldr	r3, [pc, #148]	; (8007088 <HAL_FLASHEx_Erase+0xe8>)
 8006ff2:	691a      	ldr	r2, [r3, #16]
 8006ff4:	4b24      	ldr	r3, [pc, #144]	; (8007088 <HAL_FLASHEx_Erase+0xe8>)
 8006ff6:	2104      	movs	r1, #4
 8006ff8:	438a      	bics	r2, r1
 8006ffa:	611a      	str	r2, [r3, #16]
 8006ffc:	e036      	b.n	800706c <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006ffe:	4b21      	ldr	r3, [pc, #132]	; (8007084 <HAL_FLASHEx_Erase+0xe4>)
 8007000:	0018      	movs	r0, r3
 8007002:	f7ff ff5f 	bl	8006ec4 <FLASH_WaitForLastOperation>
 8007006:	1e03      	subs	r3, r0, #0
 8007008:	d130      	bne.n	800706c <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2201      	movs	r2, #1
 800700e:	4252      	negs	r2, r2
 8007010:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	60bb      	str	r3, [r7, #8]
 8007018:	e01f      	b.n	800705a <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	0018      	movs	r0, r3
 800701e:	f000 f84d 	bl	80070bc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007022:	250f      	movs	r5, #15
 8007024:	197c      	adds	r4, r7, r5
 8007026:	4b17      	ldr	r3, [pc, #92]	; (8007084 <HAL_FLASHEx_Erase+0xe4>)
 8007028:	0018      	movs	r0, r3
 800702a:	f7ff ff4b 	bl	8006ec4 <FLASH_WaitForLastOperation>
 800702e:	0003      	movs	r3, r0
 8007030:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007032:	4b15      	ldr	r3, [pc, #84]	; (8007088 <HAL_FLASHEx_Erase+0xe8>)
 8007034:	691a      	ldr	r2, [r3, #16]
 8007036:	4b14      	ldr	r3, [pc, #80]	; (8007088 <HAL_FLASHEx_Erase+0xe8>)
 8007038:	2102      	movs	r1, #2
 800703a:	438a      	bics	r2, r1
 800703c:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 800703e:	197b      	adds	r3, r7, r5
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	601a      	str	r2, [r3, #0]
            break;
 800704c:	e00e      	b.n	800706c <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2280      	movs	r2, #128	; 0x80
 8007052:	00d2      	lsls	r2, r2, #3
 8007054:	4694      	mov	ip, r2
 8007056:	4463      	add	r3, ip
 8007058:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	029a      	lsls	r2, r3, #10
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	429a      	cmp	r2, r3
 800706a:	d3d6      	bcc.n	800701a <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800706c:	4b04      	ldr	r3, [pc, #16]	; (8007080 <HAL_FLASHEx_Erase+0xe0>)
 800706e:	2200      	movs	r2, #0
 8007070:	761a      	strb	r2, [r3, #24]

  return status;
 8007072:	230f      	movs	r3, #15
 8007074:	18fb      	adds	r3, r7, r3
 8007076:	781b      	ldrb	r3, [r3, #0]
}
 8007078:	0018      	movs	r0, r3
 800707a:	46bd      	mov	sp, r7
 800707c:	b004      	add	sp, #16
 800707e:	bdb0      	pop	{r4, r5, r7, pc}
 8007080:	20000ae0 	.word	0x20000ae0
 8007084:	0000c350 	.word	0x0000c350
 8007088:	40022000 	.word	0x40022000

0800708c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007090:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <FLASH_MassErase+0x28>)
 8007092:	2200      	movs	r2, #0
 8007094:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8007096:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <FLASH_MassErase+0x2c>)
 8007098:	691a      	ldr	r2, [r3, #16]
 800709a:	4b07      	ldr	r3, [pc, #28]	; (80070b8 <FLASH_MassErase+0x2c>)
 800709c:	2104      	movs	r1, #4
 800709e:	430a      	orrs	r2, r1
 80070a0:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80070a2:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <FLASH_MassErase+0x2c>)
 80070a4:	691a      	ldr	r2, [r3, #16]
 80070a6:	4b04      	ldr	r3, [pc, #16]	; (80070b8 <FLASH_MassErase+0x2c>)
 80070a8:	2140      	movs	r1, #64	; 0x40
 80070aa:	430a      	orrs	r2, r1
 80070ac:	611a      	str	r2, [r3, #16]
}
 80070ae:	46c0      	nop			; (mov r8, r8)
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20000ae0 	.word	0x20000ae0
 80070b8:	40022000 	.word	0x40022000

080070bc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80070c4:	4b0a      	ldr	r3, [pc, #40]	; (80070f0 <FLASH_PageErase+0x34>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80070ca:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <FLASH_PageErase+0x38>)
 80070cc:	691a      	ldr	r2, [r3, #16]
 80070ce:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <FLASH_PageErase+0x38>)
 80070d0:	2102      	movs	r1, #2
 80070d2:	430a      	orrs	r2, r1
 80070d4:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80070d6:	4b07      	ldr	r3, [pc, #28]	; (80070f4 <FLASH_PageErase+0x38>)
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80070dc:	4b05      	ldr	r3, [pc, #20]	; (80070f4 <FLASH_PageErase+0x38>)
 80070de:	691a      	ldr	r2, [r3, #16]
 80070e0:	4b04      	ldr	r3, [pc, #16]	; (80070f4 <FLASH_PageErase+0x38>)
 80070e2:	2140      	movs	r1, #64	; 0x40
 80070e4:	430a      	orrs	r2, r1
 80070e6:	611a      	str	r2, [r3, #16]
}
 80070e8:	46c0      	nop			; (mov r8, r8)
 80070ea:	46bd      	mov	sp, r7
 80070ec:	b002      	add	sp, #8
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000ae0 	.word	0x20000ae0
 80070f4:	40022000 	.word	0x40022000

080070f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007102:	2300      	movs	r3, #0
 8007104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007106:	e14f      	b.n	80073a8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2101      	movs	r1, #1
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	4091      	lsls	r1, r2
 8007112:	000a      	movs	r2, r1
 8007114:	4013      	ands	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d100      	bne.n	8007120 <HAL_GPIO_Init+0x28>
 800711e:	e140      	b.n	80073a2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d003      	beq.n	8007130 <HAL_GPIO_Init+0x38>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	2b12      	cmp	r3, #18
 800712e:	d123      	bne.n	8007178 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	08da      	lsrs	r2, r3, #3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3208      	adds	r2, #8
 8007138:	0092      	lsls	r2, r2, #2
 800713a:	58d3      	ldr	r3, [r2, r3]
 800713c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2207      	movs	r2, #7
 8007142:	4013      	ands	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	220f      	movs	r2, #15
 8007148:	409a      	lsls	r2, r3
 800714a:	0013      	movs	r3, r2
 800714c:	43da      	mvns	r2, r3
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	4013      	ands	r3, r2
 8007152:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	691a      	ldr	r2, [r3, #16]
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2107      	movs	r1, #7
 800715c:	400b      	ands	r3, r1
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	409a      	lsls	r2, r3
 8007162:	0013      	movs	r3, r2
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	4313      	orrs	r3, r2
 8007168:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	08da      	lsrs	r2, r3, #3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3208      	adds	r2, #8
 8007172:	0092      	lsls	r2, r2, #2
 8007174:	6939      	ldr	r1, [r7, #16]
 8007176:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	2203      	movs	r2, #3
 8007184:	409a      	lsls	r2, r3
 8007186:	0013      	movs	r3, r2
 8007188:	43da      	mvns	r2, r3
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	4013      	ands	r3, r2
 800718e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	2203      	movs	r2, #3
 8007196:	401a      	ands	r2, r3
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	005b      	lsls	r3, r3, #1
 800719c:	409a      	lsls	r2, r3
 800719e:	0013      	movs	r3, r2
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d00b      	beq.n	80071cc <HAL_GPIO_Init+0xd4>
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d007      	beq.n	80071cc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80071c0:	2b11      	cmp	r3, #17
 80071c2:	d003      	beq.n	80071cc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	2b12      	cmp	r3, #18
 80071ca:	d130      	bne.n	800722e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	2203      	movs	r2, #3
 80071d8:	409a      	lsls	r2, r3
 80071da:	0013      	movs	r3, r2
 80071dc:	43da      	mvns	r2, r3
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	4013      	ands	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	68da      	ldr	r2, [r3, #12]
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	409a      	lsls	r2, r3
 80071ee:	0013      	movs	r3, r2
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007202:	2201      	movs	r2, #1
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	409a      	lsls	r2, r3
 8007208:	0013      	movs	r3, r2
 800720a:	43da      	mvns	r2, r3
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	4013      	ands	r3, r2
 8007210:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	091b      	lsrs	r3, r3, #4
 8007218:	2201      	movs	r2, #1
 800721a:	401a      	ands	r2, r3
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	409a      	lsls	r2, r3
 8007220:	0013      	movs	r3, r2
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	2203      	movs	r2, #3
 800723a:	409a      	lsls	r2, r3
 800723c:	0013      	movs	r3, r2
 800723e:	43da      	mvns	r2, r3
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	4013      	ands	r3, r2
 8007244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	689a      	ldr	r2, [r3, #8]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	409a      	lsls	r2, r3
 8007250:	0013      	movs	r3, r2
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	4313      	orrs	r3, r2
 8007256:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	2380      	movs	r3, #128	; 0x80
 8007264:	055b      	lsls	r3, r3, #21
 8007266:	4013      	ands	r3, r2
 8007268:	d100      	bne.n	800726c <HAL_GPIO_Init+0x174>
 800726a:	e09a      	b.n	80073a2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800726c:	4b54      	ldr	r3, [pc, #336]	; (80073c0 <HAL_GPIO_Init+0x2c8>)
 800726e:	699a      	ldr	r2, [r3, #24]
 8007270:	4b53      	ldr	r3, [pc, #332]	; (80073c0 <HAL_GPIO_Init+0x2c8>)
 8007272:	2101      	movs	r1, #1
 8007274:	430a      	orrs	r2, r1
 8007276:	619a      	str	r2, [r3, #24]
 8007278:	4b51      	ldr	r3, [pc, #324]	; (80073c0 <HAL_GPIO_Init+0x2c8>)
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	2201      	movs	r2, #1
 800727e:	4013      	ands	r3, r2
 8007280:	60bb      	str	r3, [r7, #8]
 8007282:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007284:	4a4f      	ldr	r2, [pc, #316]	; (80073c4 <HAL_GPIO_Init+0x2cc>)
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	089b      	lsrs	r3, r3, #2
 800728a:	3302      	adds	r3, #2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	589b      	ldr	r3, [r3, r2]
 8007290:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2203      	movs	r2, #3
 8007296:	4013      	ands	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	220f      	movs	r2, #15
 800729c:	409a      	lsls	r2, r3
 800729e:	0013      	movs	r3, r2
 80072a0:	43da      	mvns	r2, r3
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	4013      	ands	r3, r2
 80072a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	2390      	movs	r3, #144	; 0x90
 80072ac:	05db      	lsls	r3, r3, #23
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d013      	beq.n	80072da <HAL_GPIO_Init+0x1e2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a44      	ldr	r2, [pc, #272]	; (80073c8 <HAL_GPIO_Init+0x2d0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00d      	beq.n	80072d6 <HAL_GPIO_Init+0x1de>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a43      	ldr	r2, [pc, #268]	; (80073cc <HAL_GPIO_Init+0x2d4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d007      	beq.n	80072d2 <HAL_GPIO_Init+0x1da>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a42      	ldr	r2, [pc, #264]	; (80073d0 <HAL_GPIO_Init+0x2d8>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d101      	bne.n	80072ce <HAL_GPIO_Init+0x1d6>
 80072ca:	2303      	movs	r3, #3
 80072cc:	e006      	b.n	80072dc <HAL_GPIO_Init+0x1e4>
 80072ce:	2305      	movs	r3, #5
 80072d0:	e004      	b.n	80072dc <HAL_GPIO_Init+0x1e4>
 80072d2:	2302      	movs	r3, #2
 80072d4:	e002      	b.n	80072dc <HAL_GPIO_Init+0x1e4>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e000      	b.n	80072dc <HAL_GPIO_Init+0x1e4>
 80072da:	2300      	movs	r3, #0
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	2103      	movs	r1, #3
 80072e0:	400a      	ands	r2, r1
 80072e2:	0092      	lsls	r2, r2, #2
 80072e4:	4093      	lsls	r3, r2
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80072ec:	4935      	ldr	r1, [pc, #212]	; (80073c4 <HAL_GPIO_Init+0x2cc>)
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	089b      	lsrs	r3, r3, #2
 80072f2:	3302      	adds	r3, #2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80072fa:	4b36      	ldr	r3, [pc, #216]	; (80073d4 <HAL_GPIO_Init+0x2dc>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	43da      	mvns	r2, r3
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	4013      	ands	r3, r2
 8007308:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	2380      	movs	r3, #128	; 0x80
 8007310:	025b      	lsls	r3, r3, #9
 8007312:	4013      	ands	r3, r2
 8007314:	d003      	beq.n	800731e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4313      	orrs	r3, r2
 800731c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800731e:	4b2d      	ldr	r3, [pc, #180]	; (80073d4 <HAL_GPIO_Init+0x2dc>)
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007324:	4b2b      	ldr	r3, [pc, #172]	; (80073d4 <HAL_GPIO_Init+0x2dc>)
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	43da      	mvns	r2, r3
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	4013      	ands	r3, r2
 8007332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	2380      	movs	r3, #128	; 0x80
 800733a:	029b      	lsls	r3, r3, #10
 800733c:	4013      	ands	r3, r2
 800733e:	d003      	beq.n	8007348 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007348:	4b22      	ldr	r3, [pc, #136]	; (80073d4 <HAL_GPIO_Init+0x2dc>)
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800734e:	4b21      	ldr	r3, [pc, #132]	; (80073d4 <HAL_GPIO_Init+0x2dc>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	43da      	mvns	r2, r3
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	4013      	ands	r3, r2
 800735c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	2380      	movs	r3, #128	; 0x80
 8007364:	035b      	lsls	r3, r3, #13
 8007366:	4013      	ands	r3, r2
 8007368:	d003      	beq.n	8007372 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007372:	4b18      	ldr	r3, [pc, #96]	; (80073d4 <HAL_GPIO_Init+0x2dc>)
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007378:	4b16      	ldr	r3, [pc, #88]	; (80073d4 <HAL_GPIO_Init+0x2dc>)
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	43da      	mvns	r2, r3
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	4013      	ands	r3, r2
 8007386:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	2380      	movs	r3, #128	; 0x80
 800738e:	039b      	lsls	r3, r3, #14
 8007390:	4013      	ands	r3, r2
 8007392:	d003      	beq.n	800739c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4313      	orrs	r3, r2
 800739a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800739c:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <HAL_GPIO_Init+0x2dc>)
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	3301      	adds	r3, #1
 80073a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	40da      	lsrs	r2, r3
 80073b0:	1e13      	subs	r3, r2, #0
 80073b2:	d000      	beq.n	80073b6 <HAL_GPIO_Init+0x2be>
 80073b4:	e6a8      	b.n	8007108 <HAL_GPIO_Init+0x10>
  } 
}
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b006      	add	sp, #24
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	40021000 	.word	0x40021000
 80073c4:	40010000 	.word	0x40010000
 80073c8:	48000400 	.word	0x48000400
 80073cc:	48000800 	.word	0x48000800
 80073d0:	48000c00 	.word	0x48000c00
 80073d4:	40010400 	.word	0x40010400

080073d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	000a      	movs	r2, r1
 80073e2:	1cbb      	adds	r3, r7, #2
 80073e4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	1cba      	adds	r2, r7, #2
 80073ec:	8812      	ldrh	r2, [r2, #0]
 80073ee:	4013      	ands	r3, r2
 80073f0:	d004      	beq.n	80073fc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80073f2:	230f      	movs	r3, #15
 80073f4:	18fb      	adds	r3, r7, r3
 80073f6:	2201      	movs	r2, #1
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	e003      	b.n	8007404 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073fc:	230f      	movs	r3, #15
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	2200      	movs	r2, #0
 8007402:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007404:	230f      	movs	r3, #15
 8007406:	18fb      	adds	r3, r7, r3
 8007408:	781b      	ldrb	r3, [r3, #0]
  }
 800740a:	0018      	movs	r0, r3
 800740c:	46bd      	mov	sp, r7
 800740e:	b004      	add	sp, #16
 8007410:	bd80      	pop	{r7, pc}

08007412 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	0008      	movs	r0, r1
 800741c:	0011      	movs	r1, r2
 800741e:	1cbb      	adds	r3, r7, #2
 8007420:	1c02      	adds	r2, r0, #0
 8007422:	801a      	strh	r2, [r3, #0]
 8007424:	1c7b      	adds	r3, r7, #1
 8007426:	1c0a      	adds	r2, r1, #0
 8007428:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800742a:	1c7b      	adds	r3, r7, #1
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d004      	beq.n	800743c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007432:	1cbb      	adds	r3, r7, #2
 8007434:	881a      	ldrh	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800743a:	e003      	b.n	8007444 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800743c:	1cbb      	adds	r3, r7, #2
 800743e:	881a      	ldrh	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007444:	46c0      	nop			; (mov r8, r8)
 8007446:	46bd      	mov	sp, r7
 8007448:	b002      	add	sp, #8
 800744a:	bd80      	pop	{r7, pc}

0800744c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e036      	b.n	80074cc <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a1c      	ldr	r2, [pc, #112]	; (80074d4 <HAL_IWDG_Init+0x88>)
 8007464:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a1b      	ldr	r2, [pc, #108]	; (80074d8 <HAL_IWDG_Init+0x8c>)
 800746c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6852      	ldr	r2, [r2, #4]
 8007476:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6892      	ldr	r2, [r2, #8]
 8007480:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007482:	f7fe fde5 	bl	8006050 <HAL_GetTick>
 8007486:	0003      	movs	r3, r0
 8007488:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800748a:	e008      	b.n	800749e <HAL_IWDG_Init+0x52>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800748c:	f7fe fde0 	bl	8006050 <HAL_GetTick>
 8007490:	0002      	movs	r2, r0
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	2b30      	cmp	r3, #48	; 0x30
 8007498:	d901      	bls.n	800749e <HAL_IWDG_Init+0x52>
    {
      return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e016      	b.n	80074cc <HAL_IWDG_Init+0x80>
  while (hiwdg->Instance->SR != 0x00u)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1f1      	bne.n	800748c <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	691a      	ldr	r2, [r3, #16]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d005      	beq.n	80074c2 <HAL_IWDG_Init+0x76>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	68d2      	ldr	r2, [r2, #12]
 80074be:	611a      	str	r2, [r3, #16]
 80074c0:	e003      	b.n	80074ca <HAL_IWDG_Init+0x7e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a05      	ldr	r2, [pc, #20]	; (80074dc <HAL_IWDG_Init+0x90>)
 80074c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	0018      	movs	r0, r3
 80074ce:	46bd      	mov	sp, r7
 80074d0:	b004      	add	sp, #16
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	0000cccc 	.word	0x0000cccc
 80074d8:	00005555 	.word	0x00005555
 80074dc:	0000aaaa 	.word	0x0000aaaa

080074e0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a03      	ldr	r2, [pc, #12]	; (80074fc <HAL_IWDG_Refresh+0x1c>)
 80074ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	0018      	movs	r0, r3
 80074f4:	46bd      	mov	sp, r7
 80074f6:	b002      	add	sp, #8
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	46c0      	nop			; (mov r8, r8)
 80074fc:	0000aaaa 	.word	0x0000aaaa

08007500 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	000a      	movs	r2, r1
 800750a:	1cfb      	adds	r3, r7, #3
 800750c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 800750e:	4b09      	ldr	r3, [pc, #36]	; (8007534 <HAL_PWR_EnterSLEEPMode+0x34>)
 8007510:	691a      	ldr	r2, [r3, #16]
 8007512:	4b08      	ldr	r3, [pc, #32]	; (8007534 <HAL_PWR_EnterSLEEPMode+0x34>)
 8007514:	2104      	movs	r1, #4
 8007516:	438a      	bics	r2, r1
 8007518:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800751a:	1cfb      	adds	r3, r7, #3
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d101      	bne.n	8007526 <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007522:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8007524:	e002      	b.n	800752c <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 8007526:	bf40      	sev
    __WFE();
 8007528:	bf20      	wfe
    __WFE();
 800752a:	bf20      	wfe
}
 800752c:	46c0      	nop			; (mov r8, r8)
 800752e:	46bd      	mov	sp, r7
 8007530:	b002      	add	sp, #8
 8007532:	bd80      	pop	{r7, pc}
 8007534:	e000ed00 	.word	0xe000ed00

08007538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b088      	sub	sp, #32
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e303      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2201      	movs	r2, #1
 8007550:	4013      	ands	r3, r2
 8007552:	d100      	bne.n	8007556 <HAL_RCC_OscConfig+0x1e>
 8007554:	e08d      	b.n	8007672 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007556:	4bc4      	ldr	r3, [pc, #784]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	220c      	movs	r2, #12
 800755c:	4013      	ands	r3, r2
 800755e:	2b04      	cmp	r3, #4
 8007560:	d00e      	beq.n	8007580 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007562:	4bc1      	ldr	r3, [pc, #772]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	220c      	movs	r2, #12
 8007568:	4013      	ands	r3, r2
 800756a:	2b08      	cmp	r3, #8
 800756c:	d116      	bne.n	800759c <HAL_RCC_OscConfig+0x64>
 800756e:	4bbe      	ldr	r3, [pc, #760]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	2380      	movs	r3, #128	; 0x80
 8007574:	025b      	lsls	r3, r3, #9
 8007576:	401a      	ands	r2, r3
 8007578:	2380      	movs	r3, #128	; 0x80
 800757a:	025b      	lsls	r3, r3, #9
 800757c:	429a      	cmp	r2, r3
 800757e:	d10d      	bne.n	800759c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007580:	4bb9      	ldr	r3, [pc, #740]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	2380      	movs	r3, #128	; 0x80
 8007586:	029b      	lsls	r3, r3, #10
 8007588:	4013      	ands	r3, r2
 800758a:	d100      	bne.n	800758e <HAL_RCC_OscConfig+0x56>
 800758c:	e070      	b.n	8007670 <HAL_RCC_OscConfig+0x138>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d000      	beq.n	8007598 <HAL_RCC_OscConfig+0x60>
 8007596:	e06b      	b.n	8007670 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e2da      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d107      	bne.n	80075b4 <HAL_RCC_OscConfig+0x7c>
 80075a4:	4bb0      	ldr	r3, [pc, #704]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	4baf      	ldr	r3, [pc, #700]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80075aa:	2180      	movs	r1, #128	; 0x80
 80075ac:	0249      	lsls	r1, r1, #9
 80075ae:	430a      	orrs	r2, r1
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	e02f      	b.n	8007614 <HAL_RCC_OscConfig+0xdc>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10c      	bne.n	80075d6 <HAL_RCC_OscConfig+0x9e>
 80075bc:	4baa      	ldr	r3, [pc, #680]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	4ba9      	ldr	r3, [pc, #676]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80075c2:	49aa      	ldr	r1, [pc, #680]	; (800786c <HAL_RCC_OscConfig+0x334>)
 80075c4:	400a      	ands	r2, r1
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	4ba7      	ldr	r3, [pc, #668]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	4ba6      	ldr	r3, [pc, #664]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80075ce:	49a8      	ldr	r1, [pc, #672]	; (8007870 <HAL_RCC_OscConfig+0x338>)
 80075d0:	400a      	ands	r2, r1
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	e01e      	b.n	8007614 <HAL_RCC_OscConfig+0xdc>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	2b05      	cmp	r3, #5
 80075dc:	d10e      	bne.n	80075fc <HAL_RCC_OscConfig+0xc4>
 80075de:	4ba2      	ldr	r3, [pc, #648]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	4ba1      	ldr	r3, [pc, #644]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80075e4:	2180      	movs	r1, #128	; 0x80
 80075e6:	02c9      	lsls	r1, r1, #11
 80075e8:	430a      	orrs	r2, r1
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	4b9e      	ldr	r3, [pc, #632]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	4b9d      	ldr	r3, [pc, #628]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80075f2:	2180      	movs	r1, #128	; 0x80
 80075f4:	0249      	lsls	r1, r1, #9
 80075f6:	430a      	orrs	r2, r1
 80075f8:	601a      	str	r2, [r3, #0]
 80075fa:	e00b      	b.n	8007614 <HAL_RCC_OscConfig+0xdc>
 80075fc:	4b9a      	ldr	r3, [pc, #616]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	4b99      	ldr	r3, [pc, #612]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 8007602:	499a      	ldr	r1, [pc, #616]	; (800786c <HAL_RCC_OscConfig+0x334>)
 8007604:	400a      	ands	r2, r1
 8007606:	601a      	str	r2, [r3, #0]
 8007608:	4b97      	ldr	r3, [pc, #604]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	4b96      	ldr	r3, [pc, #600]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 800760e:	4998      	ldr	r1, [pc, #608]	; (8007870 <HAL_RCC_OscConfig+0x338>)
 8007610:	400a      	ands	r2, r1
 8007612:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d014      	beq.n	8007646 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800761c:	f7fe fd18 	bl	8006050 <HAL_GetTick>
 8007620:	0003      	movs	r3, r0
 8007622:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007624:	e008      	b.n	8007638 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007626:	f7fe fd13 	bl	8006050 <HAL_GetTick>
 800762a:	0002      	movs	r2, r0
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	2b64      	cmp	r3, #100	; 0x64
 8007632:	d901      	bls.n	8007638 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e28c      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007638:	4b8b      	ldr	r3, [pc, #556]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	2380      	movs	r3, #128	; 0x80
 800763e:	029b      	lsls	r3, r3, #10
 8007640:	4013      	ands	r3, r2
 8007642:	d0f0      	beq.n	8007626 <HAL_RCC_OscConfig+0xee>
 8007644:	e015      	b.n	8007672 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007646:	f7fe fd03 	bl	8006050 <HAL_GetTick>
 800764a:	0003      	movs	r3, r0
 800764c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800764e:	e008      	b.n	8007662 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007650:	f7fe fcfe 	bl	8006050 <HAL_GetTick>
 8007654:	0002      	movs	r2, r0
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b64      	cmp	r3, #100	; 0x64
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e277      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007662:	4b81      	ldr	r3, [pc, #516]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	2380      	movs	r3, #128	; 0x80
 8007668:	029b      	lsls	r3, r3, #10
 800766a:	4013      	ands	r3, r2
 800766c:	d1f0      	bne.n	8007650 <HAL_RCC_OscConfig+0x118>
 800766e:	e000      	b.n	8007672 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007670:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2202      	movs	r2, #2
 8007678:	4013      	ands	r3, r2
 800767a:	d100      	bne.n	800767e <HAL_RCC_OscConfig+0x146>
 800767c:	e069      	b.n	8007752 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800767e:	4b7a      	ldr	r3, [pc, #488]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	220c      	movs	r2, #12
 8007684:	4013      	ands	r3, r2
 8007686:	d00b      	beq.n	80076a0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007688:	4b77      	ldr	r3, [pc, #476]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	220c      	movs	r2, #12
 800768e:	4013      	ands	r3, r2
 8007690:	2b08      	cmp	r3, #8
 8007692:	d11c      	bne.n	80076ce <HAL_RCC_OscConfig+0x196>
 8007694:	4b74      	ldr	r3, [pc, #464]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	2380      	movs	r3, #128	; 0x80
 800769a:	025b      	lsls	r3, r3, #9
 800769c:	4013      	ands	r3, r2
 800769e:	d116      	bne.n	80076ce <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076a0:	4b71      	ldr	r3, [pc, #452]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2202      	movs	r2, #2
 80076a6:	4013      	ands	r3, r2
 80076a8:	d005      	beq.n	80076b6 <HAL_RCC_OscConfig+0x17e>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d001      	beq.n	80076b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e24d      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076b6:	4b6c      	ldr	r3, [pc, #432]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	22f8      	movs	r2, #248	; 0xf8
 80076bc:	4393      	bics	r3, r2
 80076be:	0019      	movs	r1, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	00da      	lsls	r2, r3, #3
 80076c6:	4b68      	ldr	r3, [pc, #416]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80076c8:	430a      	orrs	r2, r1
 80076ca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076cc:	e041      	b.n	8007752 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d024      	beq.n	8007720 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076d6:	4b64      	ldr	r3, [pc, #400]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	4b63      	ldr	r3, [pc, #396]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80076dc:	2101      	movs	r1, #1
 80076de:	430a      	orrs	r2, r1
 80076e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e2:	f7fe fcb5 	bl	8006050 <HAL_GetTick>
 80076e6:	0003      	movs	r3, r0
 80076e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ea:	e008      	b.n	80076fe <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076ec:	f7fe fcb0 	bl	8006050 <HAL_GetTick>
 80076f0:	0002      	movs	r2, r0
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e229      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076fe:	4b5a      	ldr	r3, [pc, #360]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2202      	movs	r2, #2
 8007704:	4013      	ands	r3, r2
 8007706:	d0f1      	beq.n	80076ec <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007708:	4b57      	ldr	r3, [pc, #348]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	22f8      	movs	r2, #248	; 0xf8
 800770e:	4393      	bics	r3, r2
 8007710:	0019      	movs	r1, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	00da      	lsls	r2, r3, #3
 8007718:	4b53      	ldr	r3, [pc, #332]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 800771a:	430a      	orrs	r2, r1
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	e018      	b.n	8007752 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007720:	4b51      	ldr	r3, [pc, #324]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	4b50      	ldr	r3, [pc, #320]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 8007726:	2101      	movs	r1, #1
 8007728:	438a      	bics	r2, r1
 800772a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800772c:	f7fe fc90 	bl	8006050 <HAL_GetTick>
 8007730:	0003      	movs	r3, r0
 8007732:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007734:	e008      	b.n	8007748 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007736:	f7fe fc8b 	bl	8006050 <HAL_GetTick>
 800773a:	0002      	movs	r2, r0
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	2b02      	cmp	r3, #2
 8007742:	d901      	bls.n	8007748 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e204      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007748:	4b47      	ldr	r3, [pc, #284]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2202      	movs	r2, #2
 800774e:	4013      	ands	r3, r2
 8007750:	d1f1      	bne.n	8007736 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2208      	movs	r2, #8
 8007758:	4013      	ands	r3, r2
 800775a:	d036      	beq.n	80077ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	69db      	ldr	r3, [r3, #28]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d019      	beq.n	8007798 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007764:	4b40      	ldr	r3, [pc, #256]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 8007766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007768:	4b3f      	ldr	r3, [pc, #252]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 800776a:	2101      	movs	r1, #1
 800776c:	430a      	orrs	r2, r1
 800776e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007770:	f7fe fc6e 	bl	8006050 <HAL_GetTick>
 8007774:	0003      	movs	r3, r0
 8007776:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007778:	e008      	b.n	800778c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800777a:	f7fe fc69 	bl	8006050 <HAL_GetTick>
 800777e:	0002      	movs	r2, r0
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e1e2      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800778c:	4b36      	ldr	r3, [pc, #216]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	2202      	movs	r2, #2
 8007792:	4013      	ands	r3, r2
 8007794:	d0f1      	beq.n	800777a <HAL_RCC_OscConfig+0x242>
 8007796:	e018      	b.n	80077ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007798:	4b33      	ldr	r3, [pc, #204]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 800779a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800779c:	4b32      	ldr	r3, [pc, #200]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 800779e:	2101      	movs	r1, #1
 80077a0:	438a      	bics	r2, r1
 80077a2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077a4:	f7fe fc54 	bl	8006050 <HAL_GetTick>
 80077a8:	0003      	movs	r3, r0
 80077aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077ac:	e008      	b.n	80077c0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077ae:	f7fe fc4f 	bl	8006050 <HAL_GetTick>
 80077b2:	0002      	movs	r2, r0
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d901      	bls.n	80077c0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e1c8      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077c0:	4b29      	ldr	r3, [pc, #164]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80077c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c4:	2202      	movs	r2, #2
 80077c6:	4013      	ands	r3, r2
 80077c8:	d1f1      	bne.n	80077ae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2204      	movs	r2, #4
 80077d0:	4013      	ands	r3, r2
 80077d2:	d100      	bne.n	80077d6 <HAL_RCC_OscConfig+0x29e>
 80077d4:	e0b6      	b.n	8007944 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077d6:	231f      	movs	r3, #31
 80077d8:	18fb      	adds	r3, r7, r3
 80077da:	2200      	movs	r2, #0
 80077dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077de:	4b22      	ldr	r3, [pc, #136]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80077e0:	69da      	ldr	r2, [r3, #28]
 80077e2:	2380      	movs	r3, #128	; 0x80
 80077e4:	055b      	lsls	r3, r3, #21
 80077e6:	4013      	ands	r3, r2
 80077e8:	d111      	bne.n	800780e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077ea:	4b1f      	ldr	r3, [pc, #124]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80077ec:	69da      	ldr	r2, [r3, #28]
 80077ee:	4b1e      	ldr	r3, [pc, #120]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80077f0:	2180      	movs	r1, #128	; 0x80
 80077f2:	0549      	lsls	r1, r1, #21
 80077f4:	430a      	orrs	r2, r1
 80077f6:	61da      	str	r2, [r3, #28]
 80077f8:	4b1b      	ldr	r3, [pc, #108]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 80077fa:	69da      	ldr	r2, [r3, #28]
 80077fc:	2380      	movs	r3, #128	; 0x80
 80077fe:	055b      	lsls	r3, r3, #21
 8007800:	4013      	ands	r3, r2
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007806:	231f      	movs	r3, #31
 8007808:	18fb      	adds	r3, r7, r3
 800780a:	2201      	movs	r2, #1
 800780c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800780e:	4b19      	ldr	r3, [pc, #100]	; (8007874 <HAL_RCC_OscConfig+0x33c>)
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	2380      	movs	r3, #128	; 0x80
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	4013      	ands	r3, r2
 8007818:	d11a      	bne.n	8007850 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800781a:	4b16      	ldr	r3, [pc, #88]	; (8007874 <HAL_RCC_OscConfig+0x33c>)
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	4b15      	ldr	r3, [pc, #84]	; (8007874 <HAL_RCC_OscConfig+0x33c>)
 8007820:	2180      	movs	r1, #128	; 0x80
 8007822:	0049      	lsls	r1, r1, #1
 8007824:	430a      	orrs	r2, r1
 8007826:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007828:	f7fe fc12 	bl	8006050 <HAL_GetTick>
 800782c:	0003      	movs	r3, r0
 800782e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007830:	e008      	b.n	8007844 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007832:	f7fe fc0d 	bl	8006050 <HAL_GetTick>
 8007836:	0002      	movs	r2, r0
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	2b64      	cmp	r3, #100	; 0x64
 800783e:	d901      	bls.n	8007844 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e186      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007844:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <HAL_RCC_OscConfig+0x33c>)
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	2380      	movs	r3, #128	; 0x80
 800784a:	005b      	lsls	r3, r3, #1
 800784c:	4013      	ands	r3, r2
 800784e:	d0f0      	beq.n	8007832 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d10f      	bne.n	8007878 <HAL_RCC_OscConfig+0x340>
 8007858:	4b03      	ldr	r3, [pc, #12]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 800785a:	6a1a      	ldr	r2, [r3, #32]
 800785c:	4b02      	ldr	r3, [pc, #8]	; (8007868 <HAL_RCC_OscConfig+0x330>)
 800785e:	2101      	movs	r1, #1
 8007860:	430a      	orrs	r2, r1
 8007862:	621a      	str	r2, [r3, #32]
 8007864:	e036      	b.n	80078d4 <HAL_RCC_OscConfig+0x39c>
 8007866:	46c0      	nop			; (mov r8, r8)
 8007868:	40021000 	.word	0x40021000
 800786c:	fffeffff 	.word	0xfffeffff
 8007870:	fffbffff 	.word	0xfffbffff
 8007874:	40007000 	.word	0x40007000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10c      	bne.n	800789a <HAL_RCC_OscConfig+0x362>
 8007880:	4bb6      	ldr	r3, [pc, #728]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007882:	6a1a      	ldr	r2, [r3, #32]
 8007884:	4bb5      	ldr	r3, [pc, #724]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007886:	2101      	movs	r1, #1
 8007888:	438a      	bics	r2, r1
 800788a:	621a      	str	r2, [r3, #32]
 800788c:	4bb3      	ldr	r3, [pc, #716]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 800788e:	6a1a      	ldr	r2, [r3, #32]
 8007890:	4bb2      	ldr	r3, [pc, #712]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007892:	2104      	movs	r1, #4
 8007894:	438a      	bics	r2, r1
 8007896:	621a      	str	r2, [r3, #32]
 8007898:	e01c      	b.n	80078d4 <HAL_RCC_OscConfig+0x39c>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	2b05      	cmp	r3, #5
 80078a0:	d10c      	bne.n	80078bc <HAL_RCC_OscConfig+0x384>
 80078a2:	4bae      	ldr	r3, [pc, #696]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80078a4:	6a1a      	ldr	r2, [r3, #32]
 80078a6:	4bad      	ldr	r3, [pc, #692]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80078a8:	2104      	movs	r1, #4
 80078aa:	430a      	orrs	r2, r1
 80078ac:	621a      	str	r2, [r3, #32]
 80078ae:	4bab      	ldr	r3, [pc, #684]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80078b0:	6a1a      	ldr	r2, [r3, #32]
 80078b2:	4baa      	ldr	r3, [pc, #680]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80078b4:	2101      	movs	r1, #1
 80078b6:	430a      	orrs	r2, r1
 80078b8:	621a      	str	r2, [r3, #32]
 80078ba:	e00b      	b.n	80078d4 <HAL_RCC_OscConfig+0x39c>
 80078bc:	4ba7      	ldr	r3, [pc, #668]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80078be:	6a1a      	ldr	r2, [r3, #32]
 80078c0:	4ba6      	ldr	r3, [pc, #664]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80078c2:	2101      	movs	r1, #1
 80078c4:	438a      	bics	r2, r1
 80078c6:	621a      	str	r2, [r3, #32]
 80078c8:	4ba4      	ldr	r3, [pc, #656]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80078ca:	6a1a      	ldr	r2, [r3, #32]
 80078cc:	4ba3      	ldr	r3, [pc, #652]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80078ce:	2104      	movs	r1, #4
 80078d0:	438a      	bics	r2, r1
 80078d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d014      	beq.n	8007906 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078dc:	f7fe fbb8 	bl	8006050 <HAL_GetTick>
 80078e0:	0003      	movs	r3, r0
 80078e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078e4:	e009      	b.n	80078fa <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078e6:	f7fe fbb3 	bl	8006050 <HAL_GetTick>
 80078ea:	0002      	movs	r2, r0
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	4a9b      	ldr	r2, [pc, #620]	; (8007b60 <HAL_RCC_OscConfig+0x628>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e12b      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078fa:	4b98      	ldr	r3, [pc, #608]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	2202      	movs	r2, #2
 8007900:	4013      	ands	r3, r2
 8007902:	d0f0      	beq.n	80078e6 <HAL_RCC_OscConfig+0x3ae>
 8007904:	e013      	b.n	800792e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007906:	f7fe fba3 	bl	8006050 <HAL_GetTick>
 800790a:	0003      	movs	r3, r0
 800790c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800790e:	e009      	b.n	8007924 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007910:	f7fe fb9e 	bl	8006050 <HAL_GetTick>
 8007914:	0002      	movs	r2, r0
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	4a91      	ldr	r2, [pc, #580]	; (8007b60 <HAL_RCC_OscConfig+0x628>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d901      	bls.n	8007924 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e116      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007924:	4b8d      	ldr	r3, [pc, #564]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	2202      	movs	r2, #2
 800792a:	4013      	ands	r3, r2
 800792c:	d1f0      	bne.n	8007910 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800792e:	231f      	movs	r3, #31
 8007930:	18fb      	adds	r3, r7, r3
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d105      	bne.n	8007944 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007938:	4b88      	ldr	r3, [pc, #544]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 800793a:	69da      	ldr	r2, [r3, #28]
 800793c:	4b87      	ldr	r3, [pc, #540]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 800793e:	4989      	ldr	r1, [pc, #548]	; (8007b64 <HAL_RCC_OscConfig+0x62c>)
 8007940:	400a      	ands	r2, r1
 8007942:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2210      	movs	r2, #16
 800794a:	4013      	ands	r3, r2
 800794c:	d063      	beq.n	8007a16 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d12a      	bne.n	80079ac <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007956:	4b81      	ldr	r3, [pc, #516]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800795a:	4b80      	ldr	r3, [pc, #512]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 800795c:	2104      	movs	r1, #4
 800795e:	430a      	orrs	r2, r1
 8007960:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8007962:	4b7e      	ldr	r3, [pc, #504]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007966:	4b7d      	ldr	r3, [pc, #500]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007968:	2101      	movs	r1, #1
 800796a:	430a      	orrs	r2, r1
 800796c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800796e:	f7fe fb6f 	bl	8006050 <HAL_GetTick>
 8007972:	0003      	movs	r3, r0
 8007974:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007976:	e008      	b.n	800798a <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007978:	f7fe fb6a 	bl	8006050 <HAL_GetTick>
 800797c:	0002      	movs	r2, r0
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	2b02      	cmp	r3, #2
 8007984:	d901      	bls.n	800798a <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e0e3      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800798a:	4b74      	ldr	r3, [pc, #464]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 800798c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798e:	2202      	movs	r2, #2
 8007990:	4013      	ands	r3, r2
 8007992:	d0f1      	beq.n	8007978 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007994:	4b71      	ldr	r3, [pc, #452]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007998:	22f8      	movs	r2, #248	; 0xf8
 800799a:	4393      	bics	r3, r2
 800799c:	0019      	movs	r1, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	00da      	lsls	r2, r3, #3
 80079a4:	4b6d      	ldr	r3, [pc, #436]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80079a6:	430a      	orrs	r2, r1
 80079a8:	635a      	str	r2, [r3, #52]	; 0x34
 80079aa:	e034      	b.n	8007a16 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	3305      	adds	r3, #5
 80079b2:	d111      	bne.n	80079d8 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80079b4:	4b69      	ldr	r3, [pc, #420]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80079b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079b8:	4b68      	ldr	r3, [pc, #416]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80079ba:	2104      	movs	r1, #4
 80079bc:	438a      	bics	r2, r1
 80079be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80079c0:	4b66      	ldr	r3, [pc, #408]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80079c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c4:	22f8      	movs	r2, #248	; 0xf8
 80079c6:	4393      	bics	r3, r2
 80079c8:	0019      	movs	r1, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	00da      	lsls	r2, r3, #3
 80079d0:	4b62      	ldr	r3, [pc, #392]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80079d2:	430a      	orrs	r2, r1
 80079d4:	635a      	str	r2, [r3, #52]	; 0x34
 80079d6:	e01e      	b.n	8007a16 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80079d8:	4b60      	ldr	r3, [pc, #384]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80079da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079dc:	4b5f      	ldr	r3, [pc, #380]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80079de:	2104      	movs	r1, #4
 80079e0:	430a      	orrs	r2, r1
 80079e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80079e4:	4b5d      	ldr	r3, [pc, #372]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80079e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079e8:	4b5c      	ldr	r3, [pc, #368]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 80079ea:	2101      	movs	r1, #1
 80079ec:	438a      	bics	r2, r1
 80079ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079f0:	f7fe fb2e 	bl	8006050 <HAL_GetTick>
 80079f4:	0003      	movs	r3, r0
 80079f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80079f8:	e008      	b.n	8007a0c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80079fa:	f7fe fb29 	bl	8006050 <HAL_GetTick>
 80079fe:	0002      	movs	r2, r0
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e0a2      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007a0c:	4b53      	ldr	r3, [pc, #332]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a10:	2202      	movs	r2, #2
 8007a12:	4013      	ands	r3, r2
 8007a14:	d1f1      	bne.n	80079fa <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d100      	bne.n	8007a20 <HAL_RCC_OscConfig+0x4e8>
 8007a1e:	e097      	b.n	8007b50 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a20:	4b4e      	ldr	r3, [pc, #312]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	220c      	movs	r2, #12
 8007a26:	4013      	ands	r3, r2
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d100      	bne.n	8007a2e <HAL_RCC_OscConfig+0x4f6>
 8007a2c:	e06b      	b.n	8007b06 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d14c      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a36:	4b49      	ldr	r3, [pc, #292]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	4b48      	ldr	r3, [pc, #288]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007a3c:	494a      	ldr	r1, [pc, #296]	; (8007b68 <HAL_RCC_OscConfig+0x630>)
 8007a3e:	400a      	ands	r2, r1
 8007a40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a42:	f7fe fb05 	bl	8006050 <HAL_GetTick>
 8007a46:	0003      	movs	r3, r0
 8007a48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a4a:	e008      	b.n	8007a5e <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a4c:	f7fe fb00 	bl	8006050 <HAL_GetTick>
 8007a50:	0002      	movs	r2, r0
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d901      	bls.n	8007a5e <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e079      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a5e:	4b3f      	ldr	r3, [pc, #252]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	2380      	movs	r3, #128	; 0x80
 8007a64:	049b      	lsls	r3, r3, #18
 8007a66:	4013      	ands	r3, r2
 8007a68:	d1f0      	bne.n	8007a4c <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a6a:	4b3c      	ldr	r3, [pc, #240]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6e:	220f      	movs	r2, #15
 8007a70:	4393      	bics	r3, r2
 8007a72:	0019      	movs	r1, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a78:	4b38      	ldr	r3, [pc, #224]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a7e:	4b37      	ldr	r3, [pc, #220]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	4a3a      	ldr	r2, [pc, #232]	; (8007b6c <HAL_RCC_OscConfig+0x634>)
 8007a84:	4013      	ands	r3, r2
 8007a86:	0019      	movs	r1, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	431a      	orrs	r2, r3
 8007a92:	4b32      	ldr	r3, [pc, #200]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007a94:	430a      	orrs	r2, r1
 8007a96:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a98:	4b30      	ldr	r3, [pc, #192]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	4b2f      	ldr	r3, [pc, #188]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007a9e:	2180      	movs	r1, #128	; 0x80
 8007aa0:	0449      	lsls	r1, r1, #17
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa6:	f7fe fad3 	bl	8006050 <HAL_GetTick>
 8007aaa:	0003      	movs	r3, r0
 8007aac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007aae:	e008      	b.n	8007ac2 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ab0:	f7fe face 	bl	8006050 <HAL_GetTick>
 8007ab4:	0002      	movs	r2, r0
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d901      	bls.n	8007ac2 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e047      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007ac2:	4b26      	ldr	r3, [pc, #152]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	2380      	movs	r3, #128	; 0x80
 8007ac8:	049b      	lsls	r3, r3, #18
 8007aca:	4013      	ands	r3, r2
 8007acc:	d0f0      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x578>
 8007ace:	e03f      	b.n	8007b50 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ad0:	4b22      	ldr	r3, [pc, #136]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	4b21      	ldr	r3, [pc, #132]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007ad6:	4924      	ldr	r1, [pc, #144]	; (8007b68 <HAL_RCC_OscConfig+0x630>)
 8007ad8:	400a      	ands	r2, r1
 8007ada:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007adc:	f7fe fab8 	bl	8006050 <HAL_GetTick>
 8007ae0:	0003      	movs	r3, r0
 8007ae2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ae4:	e008      	b.n	8007af8 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ae6:	f7fe fab3 	bl	8006050 <HAL_GetTick>
 8007aea:	0002      	movs	r2, r0
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d901      	bls.n	8007af8 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e02c      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007af8:	4b18      	ldr	r3, [pc, #96]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	2380      	movs	r3, #128	; 0x80
 8007afe:	049b      	lsls	r3, r3, #18
 8007b00:	4013      	ands	r3, r2
 8007b02:	d1f0      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x5ae>
 8007b04:	e024      	b.n	8007b50 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d101      	bne.n	8007b12 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e01f      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8007b12:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8007b18:	4b10      	ldr	r3, [pc, #64]	; (8007b5c <HAL_RCC_OscConfig+0x624>)
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	2380      	movs	r3, #128	; 0x80
 8007b22:	025b      	lsls	r3, r3, #9
 8007b24:	401a      	ands	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d10e      	bne.n	8007b4c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	220f      	movs	r2, #15
 8007b32:	401a      	ands	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d107      	bne.n	8007b4c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	23f0      	movs	r3, #240	; 0xf0
 8007b40:	039b      	lsls	r3, r3, #14
 8007b42:	401a      	ands	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d001      	beq.n	8007b50 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e000      	b.n	8007b52 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	0018      	movs	r0, r3
 8007b54:	46bd      	mov	sp, r7
 8007b56:	b008      	add	sp, #32
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	46c0      	nop			; (mov r8, r8)
 8007b5c:	40021000 	.word	0x40021000
 8007b60:	00001388 	.word	0x00001388
 8007b64:	efffffff 	.word	0xefffffff
 8007b68:	feffffff 	.word	0xfeffffff
 8007b6c:	ffc2ffff 	.word	0xffc2ffff

08007b70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e0b3      	b.n	8007cec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b84:	4b5b      	ldr	r3, [pc, #364]	; (8007cf4 <HAL_RCC_ClockConfig+0x184>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d911      	bls.n	8007bb6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b92:	4b58      	ldr	r3, [pc, #352]	; (8007cf4 <HAL_RCC_ClockConfig+0x184>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2201      	movs	r2, #1
 8007b98:	4393      	bics	r3, r2
 8007b9a:	0019      	movs	r1, r3
 8007b9c:	4b55      	ldr	r3, [pc, #340]	; (8007cf4 <HAL_RCC_ClockConfig+0x184>)
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ba4:	4b53      	ldr	r3, [pc, #332]	; (8007cf4 <HAL_RCC_ClockConfig+0x184>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	4013      	ands	r3, r2
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d001      	beq.n	8007bb6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e09a      	b.n	8007cec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	d015      	beq.n	8007bec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2204      	movs	r2, #4
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	d006      	beq.n	8007bd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007bca:	4b4b      	ldr	r3, [pc, #300]	; (8007cf8 <HAL_RCC_ClockConfig+0x188>)
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	4b4a      	ldr	r3, [pc, #296]	; (8007cf8 <HAL_RCC_ClockConfig+0x188>)
 8007bd0:	21e0      	movs	r1, #224	; 0xe0
 8007bd2:	00c9      	lsls	r1, r1, #3
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bd8:	4b47      	ldr	r3, [pc, #284]	; (8007cf8 <HAL_RCC_ClockConfig+0x188>)
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	22f0      	movs	r2, #240	; 0xf0
 8007bde:	4393      	bics	r3, r2
 8007be0:	0019      	movs	r1, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	689a      	ldr	r2, [r3, #8]
 8007be6:	4b44      	ldr	r3, [pc, #272]	; (8007cf8 <HAL_RCC_ClockConfig+0x188>)
 8007be8:	430a      	orrs	r2, r1
 8007bea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	d040      	beq.n	8007c78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d107      	bne.n	8007c0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bfe:	4b3e      	ldr	r3, [pc, #248]	; (8007cf8 <HAL_RCC_ClockConfig+0x188>)
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	2380      	movs	r3, #128	; 0x80
 8007c04:	029b      	lsls	r3, r3, #10
 8007c06:	4013      	ands	r3, r2
 8007c08:	d114      	bne.n	8007c34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e06e      	b.n	8007cec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d107      	bne.n	8007c26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c16:	4b38      	ldr	r3, [pc, #224]	; (8007cf8 <HAL_RCC_ClockConfig+0x188>)
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	2380      	movs	r3, #128	; 0x80
 8007c1c:	049b      	lsls	r3, r3, #18
 8007c1e:	4013      	ands	r3, r2
 8007c20:	d108      	bne.n	8007c34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e062      	b.n	8007cec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c26:	4b34      	ldr	r3, [pc, #208]	; (8007cf8 <HAL_RCC_ClockConfig+0x188>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	d101      	bne.n	8007c34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e05b      	b.n	8007cec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c34:	4b30      	ldr	r3, [pc, #192]	; (8007cf8 <HAL_RCC_ClockConfig+0x188>)
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	2203      	movs	r2, #3
 8007c3a:	4393      	bics	r3, r2
 8007c3c:	0019      	movs	r1, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	4b2d      	ldr	r3, [pc, #180]	; (8007cf8 <HAL_RCC_ClockConfig+0x188>)
 8007c44:	430a      	orrs	r2, r1
 8007c46:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c48:	f7fe fa02 	bl	8006050 <HAL_GetTick>
 8007c4c:	0003      	movs	r3, r0
 8007c4e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c50:	e009      	b.n	8007c66 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c52:	f7fe f9fd 	bl	8006050 <HAL_GetTick>
 8007c56:	0002      	movs	r2, r0
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	4a27      	ldr	r2, [pc, #156]	; (8007cfc <HAL_RCC_ClockConfig+0x18c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d901      	bls.n	8007c66 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e042      	b.n	8007cec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c66:	4b24      	ldr	r3, [pc, #144]	; (8007cf8 <HAL_RCC_ClockConfig+0x188>)
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	220c      	movs	r2, #12
 8007c6c:	401a      	ands	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d1ec      	bne.n	8007c52 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c78:	4b1e      	ldr	r3, [pc, #120]	; (8007cf4 <HAL_RCC_ClockConfig+0x184>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	4013      	ands	r3, r2
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d211      	bcs.n	8007caa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c86:	4b1b      	ldr	r3, [pc, #108]	; (8007cf4 <HAL_RCC_ClockConfig+0x184>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	4393      	bics	r3, r2
 8007c8e:	0019      	movs	r1, r3
 8007c90:	4b18      	ldr	r3, [pc, #96]	; (8007cf4 <HAL_RCC_ClockConfig+0x184>)
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c98:	4b16      	ldr	r3, [pc, #88]	; (8007cf4 <HAL_RCC_ClockConfig+0x184>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d001      	beq.n	8007caa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e020      	b.n	8007cec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2204      	movs	r2, #4
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	d009      	beq.n	8007cc8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007cb4:	4b10      	ldr	r3, [pc, #64]	; (8007cf8 <HAL_RCC_ClockConfig+0x188>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	4a11      	ldr	r2, [pc, #68]	; (8007d00 <HAL_RCC_ClockConfig+0x190>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	0019      	movs	r1, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68da      	ldr	r2, [r3, #12]
 8007cc2:	4b0d      	ldr	r3, [pc, #52]	; (8007cf8 <HAL_RCC_ClockConfig+0x188>)
 8007cc4:	430a      	orrs	r2, r1
 8007cc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007cc8:	f000 f820 	bl	8007d0c <HAL_RCC_GetSysClockFreq>
 8007ccc:	0001      	movs	r1, r0
 8007cce:	4b0a      	ldr	r3, [pc, #40]	; (8007cf8 <HAL_RCC_ClockConfig+0x188>)
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	091b      	lsrs	r3, r3, #4
 8007cd4:	220f      	movs	r2, #15
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	4a0a      	ldr	r2, [pc, #40]	; (8007d04 <HAL_RCC_ClockConfig+0x194>)
 8007cda:	5cd3      	ldrb	r3, [r2, r3]
 8007cdc:	000a      	movs	r2, r1
 8007cde:	40da      	lsrs	r2, r3
 8007ce0:	4b09      	ldr	r3, [pc, #36]	; (8007d08 <HAL_RCC_ClockConfig+0x198>)
 8007ce2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	f7fe f96d 	bl	8005fc4 <HAL_InitTick>
  
  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	0018      	movs	r0, r3
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	b004      	add	sp, #16
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	40022000 	.word	0x40022000
 8007cf8:	40021000 	.word	0x40021000
 8007cfc:	00001388 	.word	0x00001388
 8007d00:	fffff8ff 	.word	0xfffff8ff
 8007d04:	08008ea0 	.word	0x08008ea0
 8007d08:	20000014 	.word	0x20000014

08007d0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d0c:	b590      	push	{r4, r7, lr}
 8007d0e:	b08f      	sub	sp, #60	; 0x3c
 8007d10:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8007d12:	2314      	movs	r3, #20
 8007d14:	18fb      	adds	r3, r7, r3
 8007d16:	4a2b      	ldr	r2, [pc, #172]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007d1a:	c313      	stmia	r3!, {r0, r1, r4}
 8007d1c:	6812      	ldr	r2, [r2, #0]
 8007d1e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8007d20:	1d3b      	adds	r3, r7, #4
 8007d22:	4a29      	ldr	r2, [pc, #164]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d24:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007d26:	c313      	stmia	r3!, {r0, r1, r4}
 8007d28:	6812      	ldr	r2, [r2, #0]
 8007d2a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d30:	2300      	movs	r3, #0
 8007d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d34:	2300      	movs	r3, #0
 8007d36:	637b      	str	r3, [r7, #52]	; 0x34
 8007d38:	2300      	movs	r3, #0
 8007d3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8007d40:	4b22      	ldr	r3, [pc, #136]	; (8007dcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	220c      	movs	r2, #12
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d002      	beq.n	8007d56 <HAL_RCC_GetSysClockFreq+0x4a>
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	d003      	beq.n	8007d5c <HAL_RCC_GetSysClockFreq+0x50>
 8007d54:	e02d      	b.n	8007db2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007d56:	4b1e      	ldr	r3, [pc, #120]	; (8007dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007d58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007d5a:	e02d      	b.n	8007db8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8007d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5e:	0c9b      	lsrs	r3, r3, #18
 8007d60:	220f      	movs	r2, #15
 8007d62:	4013      	ands	r3, r2
 8007d64:	2214      	movs	r2, #20
 8007d66:	18ba      	adds	r2, r7, r2
 8007d68:	5cd3      	ldrb	r3, [r2, r3]
 8007d6a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8007d6c:	4b17      	ldr	r3, [pc, #92]	; (8007dcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	220f      	movs	r2, #15
 8007d72:	4013      	ands	r3, r2
 8007d74:	1d3a      	adds	r2, r7, #4
 8007d76:	5cd3      	ldrb	r3, [r2, r3]
 8007d78:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d7c:	2380      	movs	r3, #128	; 0x80
 8007d7e:	025b      	lsls	r3, r3, #9
 8007d80:	4013      	ands	r3, r2
 8007d82:	d009      	beq.n	8007d98 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d86:	4812      	ldr	r0, [pc, #72]	; (8007dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007d88:	f7f8 f9be 	bl	8000108 <__udivsi3>
 8007d8c:	0003      	movs	r3, r0
 8007d8e:	001a      	movs	r2, r3
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	4353      	muls	r3, r2
 8007d94:	637b      	str	r3, [r7, #52]	; 0x34
 8007d96:	e009      	b.n	8007dac <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d9a:	000a      	movs	r2, r1
 8007d9c:	0152      	lsls	r2, r2, #5
 8007d9e:	1a52      	subs	r2, r2, r1
 8007da0:	0193      	lsls	r3, r2, #6
 8007da2:	1a9b      	subs	r3, r3, r2
 8007da4:	00db      	lsls	r3, r3, #3
 8007da6:	185b      	adds	r3, r3, r1
 8007da8:	021b      	lsls	r3, r3, #8
 8007daa:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8007dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007db0:	e002      	b.n	8007db8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007db2:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007db4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007db6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8007dba:	0018      	movs	r0, r3
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	b00f      	add	sp, #60	; 0x3c
 8007dc0:	bd90      	pop	{r4, r7, pc}
 8007dc2:	46c0      	nop			; (mov r8, r8)
 8007dc4:	08008854 	.word	0x08008854
 8007dc8:	08008864 	.word	0x08008864
 8007dcc:	40021000 	.word	0x40021000
 8007dd0:	007a1200 	.word	0x007a1200

08007dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e01e      	b.n	8007e24 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	223d      	movs	r2, #61	; 0x3d
 8007dea:	5c9b      	ldrb	r3, [r3, r2]
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d107      	bne.n	8007e02 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	223c      	movs	r2, #60	; 0x3c
 8007df6:	2100      	movs	r1, #0
 8007df8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	f7fd ffcb 	bl	8005d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	223d      	movs	r2, #61	; 0x3d
 8007e06:	2102      	movs	r1, #2
 8007e08:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3304      	adds	r3, #4
 8007e12:	0019      	movs	r1, r3
 8007e14:	0010      	movs	r0, r2
 8007e16:	f000 fa49 	bl	80082ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	223d      	movs	r2, #61	; 0x3d
 8007e1e:	2101      	movs	r1, #1
 8007e20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	0018      	movs	r0, r3
 8007e26:	46bd      	mov	sp, r7
 8007e28:	b002      	add	sp, #8
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	223d      	movs	r2, #61	; 0x3d
 8007e38:	2102      	movs	r1, #2
 8007e3a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	2207      	movs	r2, #7
 8007e44:	4013      	ands	r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2b06      	cmp	r3, #6
 8007e4c:	d007      	beq.n	8007e5e <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2101      	movs	r1, #1
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	223d      	movs	r2, #61	; 0x3d
 8007e62:	2101      	movs	r1, #1
 8007e64:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	0018      	movs	r0, r3
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	b004      	add	sp, #16
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2101      	movs	r1, #1
 8007e84:	430a      	orrs	r2, r1
 8007e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	2207      	movs	r2, #7
 8007e90:	4013      	ands	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b06      	cmp	r3, #6
 8007e98:	d007      	beq.n	8007eaa <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	0018      	movs	r0, r3
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	b004      	add	sp, #16
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d124      	bne.n	8007f14 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d11d      	bne.n	8007f14 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2203      	movs	r2, #3
 8007ede:	4252      	negs	r2, r2
 8007ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	2203      	movs	r2, #3
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	d004      	beq.n	8007efe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	f000 f9c0 	bl	800827c <HAL_TIM_IC_CaptureCallback>
 8007efc:	e007      	b.n	8007f0e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	0018      	movs	r0, r3
 8007f02:	f000 f9b3 	bl	800826c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	0018      	movs	r0, r3
 8007f0a:	f000 f9bf 	bl	800828c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	2204      	movs	r2, #4
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	d125      	bne.n	8007f6e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	2204      	movs	r2, #4
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d11e      	bne.n	8007f6e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2205      	movs	r2, #5
 8007f36:	4252      	negs	r2, r2
 8007f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	699a      	ldr	r2, [r3, #24]
 8007f46:	23c0      	movs	r3, #192	; 0xc0
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	d004      	beq.n	8007f58 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	0018      	movs	r0, r3
 8007f52:	f000 f993 	bl	800827c <HAL_TIM_IC_CaptureCallback>
 8007f56:	e007      	b.n	8007f68 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	f000 f986 	bl	800826c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	0018      	movs	r0, r3
 8007f64:	f000 f992 	bl	800828c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	2208      	movs	r2, #8
 8007f76:	4013      	ands	r3, r2
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	d124      	bne.n	8007fc6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	2208      	movs	r2, #8
 8007f84:	4013      	ands	r3, r2
 8007f86:	2b08      	cmp	r3, #8
 8007f88:	d11d      	bne.n	8007fc6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2209      	movs	r2, #9
 8007f90:	4252      	negs	r2, r2
 8007f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2204      	movs	r2, #4
 8007f98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	2203      	movs	r2, #3
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	d004      	beq.n	8007fb0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	0018      	movs	r0, r3
 8007faa:	f000 f967 	bl	800827c <HAL_TIM_IC_CaptureCallback>
 8007fae:	e007      	b.n	8007fc0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	f000 f95a 	bl	800826c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	0018      	movs	r0, r3
 8007fbc:	f000 f966 	bl	800828c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	2210      	movs	r2, #16
 8007fce:	4013      	ands	r3, r2
 8007fd0:	2b10      	cmp	r3, #16
 8007fd2:	d125      	bne.n	8008020 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	2210      	movs	r2, #16
 8007fdc:	4013      	ands	r3, r2
 8007fde:	2b10      	cmp	r3, #16
 8007fe0:	d11e      	bne.n	8008020 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2211      	movs	r2, #17
 8007fe8:	4252      	negs	r2, r2
 8007fea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2208      	movs	r2, #8
 8007ff0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69da      	ldr	r2, [r3, #28]
 8007ff8:	23c0      	movs	r3, #192	; 0xc0
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	d004      	beq.n	800800a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	0018      	movs	r0, r3
 8008004:	f000 f93a 	bl	800827c <HAL_TIM_IC_CaptureCallback>
 8008008:	e007      	b.n	800801a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	0018      	movs	r0, r3
 800800e:	f000 f92d 	bl	800826c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	0018      	movs	r0, r3
 8008016:	f000 f939 	bl	800828c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	2201      	movs	r2, #1
 8008028:	4013      	ands	r3, r2
 800802a:	2b01      	cmp	r3, #1
 800802c:	d10f      	bne.n	800804e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	2201      	movs	r2, #1
 8008036:	4013      	ands	r3, r2
 8008038:	2b01      	cmp	r3, #1
 800803a:	d108      	bne.n	800804e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2202      	movs	r2, #2
 8008042:	4252      	negs	r2, r2
 8008044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	0018      	movs	r0, r3
 800804a:	f000 f907 	bl	800825c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	2280      	movs	r2, #128	; 0x80
 8008056:	4013      	ands	r3, r2
 8008058:	2b80      	cmp	r3, #128	; 0x80
 800805a:	d10f      	bne.n	800807c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	2280      	movs	r2, #128	; 0x80
 8008064:	4013      	ands	r3, r2
 8008066:	2b80      	cmp	r3, #128	; 0x80
 8008068:	d108      	bne.n	800807c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2281      	movs	r2, #129	; 0x81
 8008070:	4252      	negs	r2, r2
 8008072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	0018      	movs	r0, r3
 8008078:	f000 fa98 	bl	80085ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	2240      	movs	r2, #64	; 0x40
 8008084:	4013      	ands	r3, r2
 8008086:	2b40      	cmp	r3, #64	; 0x40
 8008088:	d10f      	bne.n	80080aa <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	2240      	movs	r2, #64	; 0x40
 8008092:	4013      	ands	r3, r2
 8008094:	2b40      	cmp	r3, #64	; 0x40
 8008096:	d108      	bne.n	80080aa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2241      	movs	r2, #65	; 0x41
 800809e:	4252      	negs	r2, r2
 80080a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	0018      	movs	r0, r3
 80080a6:	f000 f8f9 	bl	800829c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	2220      	movs	r2, #32
 80080b2:	4013      	ands	r3, r2
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	d10f      	bne.n	80080d8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	2220      	movs	r2, #32
 80080c0:	4013      	ands	r3, r2
 80080c2:	2b20      	cmp	r3, #32
 80080c4:	d108      	bne.n	80080d8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2221      	movs	r2, #33	; 0x21
 80080cc:	4252      	negs	r2, r2
 80080ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	0018      	movs	r0, r3
 80080d4:	f000 fa62 	bl	800859c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080d8:	46c0      	nop			; (mov r8, r8)
 80080da:	46bd      	mov	sp, r7
 80080dc:	b002      	add	sp, #8
 80080de:	bd80      	pop	{r7, pc}

080080e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	223c      	movs	r2, #60	; 0x3c
 80080ee:	5c9b      	ldrb	r3, [r3, r2]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d101      	bne.n	80080f8 <HAL_TIM_ConfigClockSource+0x18>
 80080f4:	2302      	movs	r3, #2
 80080f6:	e0ab      	b.n	8008250 <HAL_TIM_ConfigClockSource+0x170>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	223c      	movs	r2, #60	; 0x3c
 80080fc:	2101      	movs	r1, #1
 80080fe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	223d      	movs	r2, #61	; 0x3d
 8008104:	2102      	movs	r1, #2
 8008106:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2277      	movs	r2, #119	; 0x77
 8008114:	4393      	bics	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4a4f      	ldr	r2, [pc, #316]	; (8008258 <HAL_TIM_ConfigClockSource+0x178>)
 800811c:	4013      	ands	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b40      	cmp	r3, #64	; 0x40
 800812e:	d100      	bne.n	8008132 <HAL_TIM_ConfigClockSource+0x52>
 8008130:	e06b      	b.n	800820a <HAL_TIM_ConfigClockSource+0x12a>
 8008132:	d80e      	bhi.n	8008152 <HAL_TIM_ConfigClockSource+0x72>
 8008134:	2b10      	cmp	r3, #16
 8008136:	d100      	bne.n	800813a <HAL_TIM_ConfigClockSource+0x5a>
 8008138:	e077      	b.n	800822a <HAL_TIM_ConfigClockSource+0x14a>
 800813a:	d803      	bhi.n	8008144 <HAL_TIM_ConfigClockSource+0x64>
 800813c:	2b00      	cmp	r3, #0
 800813e:	d100      	bne.n	8008142 <HAL_TIM_ConfigClockSource+0x62>
 8008140:	e073      	b.n	800822a <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008142:	e07c      	b.n	800823e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8008144:	2b20      	cmp	r3, #32
 8008146:	d100      	bne.n	800814a <HAL_TIM_ConfigClockSource+0x6a>
 8008148:	e06f      	b.n	800822a <HAL_TIM_ConfigClockSource+0x14a>
 800814a:	2b30      	cmp	r3, #48	; 0x30
 800814c:	d100      	bne.n	8008150 <HAL_TIM_ConfigClockSource+0x70>
 800814e:	e06c      	b.n	800822a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8008150:	e075      	b.n	800823e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8008152:	2b70      	cmp	r3, #112	; 0x70
 8008154:	d00e      	beq.n	8008174 <HAL_TIM_ConfigClockSource+0x94>
 8008156:	d804      	bhi.n	8008162 <HAL_TIM_ConfigClockSource+0x82>
 8008158:	2b50      	cmp	r3, #80	; 0x50
 800815a:	d036      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0xea>
 800815c:	2b60      	cmp	r3, #96	; 0x60
 800815e:	d044      	beq.n	80081ea <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8008160:	e06d      	b.n	800823e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8008162:	2280      	movs	r2, #128	; 0x80
 8008164:	0152      	lsls	r2, r2, #5
 8008166:	4293      	cmp	r3, r2
 8008168:	d068      	beq.n	800823c <HAL_TIM_ConfigClockSource+0x15c>
 800816a:	2280      	movs	r2, #128	; 0x80
 800816c:	0192      	lsls	r2, r2, #6
 800816e:	4293      	cmp	r3, r2
 8008170:	d017      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8008172:	e064      	b.n	800823e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	6899      	ldr	r1, [r3, #8]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	f000 f98c 	bl	80084a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2277      	movs	r2, #119	; 0x77
 8008194:	4313      	orrs	r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	609a      	str	r2, [r3, #8]
      break;
 80081a0:	e04d      	b.n	800823e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6818      	ldr	r0, [r3, #0]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	6899      	ldr	r1, [r3, #8]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f000 f975 	bl	80084a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689a      	ldr	r2, [r3, #8]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2180      	movs	r1, #128	; 0x80
 80081c2:	01c9      	lsls	r1, r1, #7
 80081c4:	430a      	orrs	r2, r1
 80081c6:	609a      	str	r2, [r3, #8]
      break;
 80081c8:	e039      	b.n	800823e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	6859      	ldr	r1, [r3, #4]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	001a      	movs	r2, r3
 80081d8:	f000 f8e8 	bl	80083ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2150      	movs	r1, #80	; 0x50
 80081e2:	0018      	movs	r0, r3
 80081e4:	f000 f942 	bl	800846c <TIM_ITRx_SetConfig>
      break;
 80081e8:	e029      	b.n	800823e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	6859      	ldr	r1, [r3, #4]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	001a      	movs	r2, r3
 80081f8:	f000 f906 	bl	8008408 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2160      	movs	r1, #96	; 0x60
 8008202:	0018      	movs	r0, r3
 8008204:	f000 f932 	bl	800846c <TIM_ITRx_SetConfig>
      break;
 8008208:	e019      	b.n	800823e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6818      	ldr	r0, [r3, #0]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	6859      	ldr	r1, [r3, #4]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	001a      	movs	r2, r3
 8008218:	f000 f8c8 	bl	80083ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2140      	movs	r1, #64	; 0x40
 8008222:	0018      	movs	r0, r3
 8008224:	f000 f922 	bl	800846c <TIM_ITRx_SetConfig>
      break;
 8008228:	e009      	b.n	800823e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	0019      	movs	r1, r3
 8008234:	0010      	movs	r0, r2
 8008236:	f000 f919 	bl	800846c <TIM_ITRx_SetConfig>
      break;
 800823a:	e000      	b.n	800823e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800823c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	223d      	movs	r2, #61	; 0x3d
 8008242:	2101      	movs	r1, #1
 8008244:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	223c      	movs	r2, #60	; 0x3c
 800824a:	2100      	movs	r1, #0
 800824c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	0018      	movs	r0, r3
 8008252:	46bd      	mov	sp, r7
 8008254:	b004      	add	sp, #16
 8008256:	bd80      	pop	{r7, pc}
 8008258:	ffff00ff 	.word	0xffff00ff

0800825c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008264:	46c0      	nop			; (mov r8, r8)
 8008266:	46bd      	mov	sp, r7
 8008268:	b002      	add	sp, #8
 800826a:	bd80      	pop	{r7, pc}

0800826c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008274:	46c0      	nop			; (mov r8, r8)
 8008276:	46bd      	mov	sp, r7
 8008278:	b002      	add	sp, #8
 800827a:	bd80      	pop	{r7, pc}

0800827c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008284:	46c0      	nop			; (mov r8, r8)
 8008286:	46bd      	mov	sp, r7
 8008288:	b002      	add	sp, #8
 800828a:	bd80      	pop	{r7, pc}

0800828c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008294:	46c0      	nop			; (mov r8, r8)
 8008296:	46bd      	mov	sp, r7
 8008298:	b002      	add	sp, #8
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082a4:	46c0      	nop			; (mov r8, r8)
 80082a6:	46bd      	mov	sp, r7
 80082a8:	b002      	add	sp, #8
 80082aa:	bd80      	pop	{r7, pc}

080082ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a34      	ldr	r2, [pc, #208]	; (8008390 <TIM_Base_SetConfig+0xe4>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d008      	beq.n	80082d6 <TIM_Base_SetConfig+0x2a>
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	2380      	movs	r3, #128	; 0x80
 80082c8:	05db      	lsls	r3, r3, #23
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d003      	beq.n	80082d6 <TIM_Base_SetConfig+0x2a>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a30      	ldr	r2, [pc, #192]	; (8008394 <TIM_Base_SetConfig+0xe8>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d108      	bne.n	80082e8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2270      	movs	r2, #112	; 0x70
 80082da:	4393      	bics	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a29      	ldr	r2, [pc, #164]	; (8008390 <TIM_Base_SetConfig+0xe4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d018      	beq.n	8008322 <TIM_Base_SetConfig+0x76>
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	2380      	movs	r3, #128	; 0x80
 80082f4:	05db      	lsls	r3, r3, #23
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d013      	beq.n	8008322 <TIM_Base_SetConfig+0x76>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a25      	ldr	r2, [pc, #148]	; (8008394 <TIM_Base_SetConfig+0xe8>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d00f      	beq.n	8008322 <TIM_Base_SetConfig+0x76>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a24      	ldr	r2, [pc, #144]	; (8008398 <TIM_Base_SetConfig+0xec>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d00b      	beq.n	8008322 <TIM_Base_SetConfig+0x76>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a23      	ldr	r2, [pc, #140]	; (800839c <TIM_Base_SetConfig+0xf0>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d007      	beq.n	8008322 <TIM_Base_SetConfig+0x76>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a22      	ldr	r2, [pc, #136]	; (80083a0 <TIM_Base_SetConfig+0xf4>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d003      	beq.n	8008322 <TIM_Base_SetConfig+0x76>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a21      	ldr	r2, [pc, #132]	; (80083a4 <TIM_Base_SetConfig+0xf8>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d108      	bne.n	8008334 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4a20      	ldr	r2, [pc, #128]	; (80083a8 <TIM_Base_SetConfig+0xfc>)
 8008326:	4013      	ands	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	4313      	orrs	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2280      	movs	r2, #128	; 0x80
 8008338:	4393      	bics	r3, r2
 800833a:	001a      	movs	r2, r3
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	4313      	orrs	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	689a      	ldr	r2, [r3, #8]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a0c      	ldr	r2, [pc, #48]	; (8008390 <TIM_Base_SetConfig+0xe4>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d00b      	beq.n	800837a <TIM_Base_SetConfig+0xce>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a0d      	ldr	r2, [pc, #52]	; (800839c <TIM_Base_SetConfig+0xf0>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d007      	beq.n	800837a <TIM_Base_SetConfig+0xce>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a0c      	ldr	r2, [pc, #48]	; (80083a0 <TIM_Base_SetConfig+0xf4>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d003      	beq.n	800837a <TIM_Base_SetConfig+0xce>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a0b      	ldr	r2, [pc, #44]	; (80083a4 <TIM_Base_SetConfig+0xf8>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d103      	bne.n	8008382 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	691a      	ldr	r2, [r3, #16]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	615a      	str	r2, [r3, #20]
}
 8008388:	46c0      	nop			; (mov r8, r8)
 800838a:	46bd      	mov	sp, r7
 800838c:	b004      	add	sp, #16
 800838e:	bd80      	pop	{r7, pc}
 8008390:	40012c00 	.word	0x40012c00
 8008394:	40000400 	.word	0x40000400
 8008398:	40002000 	.word	0x40002000
 800839c:	40014000 	.word	0x40014000
 80083a0:	40014400 	.word	0x40014400
 80083a4:	40014800 	.word	0x40014800
 80083a8:	fffffcff 	.word	0xfffffcff

080083ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	2201      	movs	r2, #1
 80083c4:	4393      	bics	r3, r2
 80083c6:	001a      	movs	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	22f0      	movs	r2, #240	; 0xf0
 80083d6:	4393      	bics	r3, r2
 80083d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	011b      	lsls	r3, r3, #4
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	220a      	movs	r2, #10
 80083e8:	4393      	bics	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	621a      	str	r2, [r3, #32]
}
 8008400:	46c0      	nop			; (mov r8, r8)
 8008402:	46bd      	mov	sp, r7
 8008404:	b006      	add	sp, #24
 8008406:	bd80      	pop	{r7, pc}

08008408 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	2210      	movs	r2, #16
 800841a:	4393      	bics	r3, r2
 800841c:	001a      	movs	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	4a0d      	ldr	r2, [pc, #52]	; (8008468 <TIM_TI2_ConfigInputStage+0x60>)
 8008432:	4013      	ands	r3, r2
 8008434:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	031b      	lsls	r3, r3, #12
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	4313      	orrs	r3, r2
 800843e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	22a0      	movs	r2, #160	; 0xa0
 8008444:	4393      	bics	r3, r2
 8008446:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	011b      	lsls	r3, r3, #4
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	4313      	orrs	r3, r2
 8008450:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	621a      	str	r2, [r3, #32]
}
 800845e:	46c0      	nop			; (mov r8, r8)
 8008460:	46bd      	mov	sp, r7
 8008462:	b006      	add	sp, #24
 8008464:	bd80      	pop	{r7, pc}
 8008466:	46c0      	nop			; (mov r8, r8)
 8008468:	ffff0fff 	.word	0xffff0fff

0800846c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2270      	movs	r2, #112	; 0x70
 8008480:	4393      	bics	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	4313      	orrs	r3, r2
 800848a:	2207      	movs	r2, #7
 800848c:	4313      	orrs	r3, r2
 800848e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	609a      	str	r2, [r3, #8]
}
 8008496:	46c0      	nop			; (mov r8, r8)
 8008498:	46bd      	mov	sp, r7
 800849a:	b004      	add	sp, #16
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	4a09      	ldr	r2, [pc, #36]	; (80084dc <TIM_ETR_SetConfig+0x3c>)
 80084b8:	4013      	ands	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	021a      	lsls	r2, r3, #8
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	431a      	orrs	r2, r3
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	609a      	str	r2, [r3, #8]
}
 80084d4:	46c0      	nop			; (mov r8, r8)
 80084d6:	46bd      	mov	sp, r7
 80084d8:	b006      	add	sp, #24
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	ffff00ff 	.word	0xffff00ff

080084e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	223c      	movs	r2, #60	; 0x3c
 80084ee:	5c9b      	ldrb	r3, [r3, r2]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d101      	bne.n	80084f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084f4:	2302      	movs	r3, #2
 80084f6:	e047      	b.n	8008588 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	223c      	movs	r2, #60	; 0x3c
 80084fc:	2101      	movs	r1, #1
 80084fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	223d      	movs	r2, #61	; 0x3d
 8008504:	2102      	movs	r1, #2
 8008506:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2270      	movs	r2, #112	; 0x70
 800851c:	4393      	bics	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	4313      	orrs	r3, r2
 8008528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a16      	ldr	r2, [pc, #88]	; (8008590 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d00f      	beq.n	800855c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	2380      	movs	r3, #128	; 0x80
 8008542:	05db      	lsls	r3, r3, #23
 8008544:	429a      	cmp	r2, r3
 8008546:	d009      	beq.n	800855c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a11      	ldr	r2, [pc, #68]	; (8008594 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d004      	beq.n	800855c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a10      	ldr	r2, [pc, #64]	; (8008598 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d10c      	bne.n	8008576 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2280      	movs	r2, #128	; 0x80
 8008560:	4393      	bics	r3, r2
 8008562:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	4313      	orrs	r3, r2
 800856c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	223d      	movs	r2, #61	; 0x3d
 800857a:	2101      	movs	r1, #1
 800857c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	223c      	movs	r2, #60	; 0x3c
 8008582:	2100      	movs	r1, #0
 8008584:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	0018      	movs	r0, r3
 800858a:	46bd      	mov	sp, r7
 800858c:	b004      	add	sp, #16
 800858e:	bd80      	pop	{r7, pc}
 8008590:	40012c00 	.word	0x40012c00
 8008594:	40000400 	.word	0x40000400
 8008598:	40014000 	.word	0x40014000

0800859c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085a4:	46c0      	nop			; (mov r8, r8)
 80085a6:	46bd      	mov	sp, r7
 80085a8:	b002      	add	sp, #8
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085b4:	46c0      	nop			; (mov r8, r8)
 80085b6:	46bd      	mov	sp, r7
 80085b8:	b002      	add	sp, #8
 80085ba:	bd80      	pop	{r7, pc}

080085bc <__errno>:
 80085bc:	4b01      	ldr	r3, [pc, #4]	; (80085c4 <__errno+0x8>)
 80085be:	6818      	ldr	r0, [r3, #0]
 80085c0:	4770      	bx	lr
 80085c2:	46c0      	nop			; (mov r8, r8)
 80085c4:	20000020 	.word	0x20000020

080085c8 <__libc_init_array>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	2600      	movs	r6, #0
 80085cc:	4d0c      	ldr	r5, [pc, #48]	; (8008600 <__libc_init_array+0x38>)
 80085ce:	4c0d      	ldr	r4, [pc, #52]	; (8008604 <__libc_init_array+0x3c>)
 80085d0:	1b64      	subs	r4, r4, r5
 80085d2:	10a4      	asrs	r4, r4, #2
 80085d4:	42a6      	cmp	r6, r4
 80085d6:	d109      	bne.n	80085ec <__libc_init_array+0x24>
 80085d8:	2600      	movs	r6, #0
 80085da:	f000 f927 	bl	800882c <_init>
 80085de:	4d0a      	ldr	r5, [pc, #40]	; (8008608 <__libc_init_array+0x40>)
 80085e0:	4c0a      	ldr	r4, [pc, #40]	; (800860c <__libc_init_array+0x44>)
 80085e2:	1b64      	subs	r4, r4, r5
 80085e4:	10a4      	asrs	r4, r4, #2
 80085e6:	42a6      	cmp	r6, r4
 80085e8:	d105      	bne.n	80085f6 <__libc_init_array+0x2e>
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	00b3      	lsls	r3, r6, #2
 80085ee:	58eb      	ldr	r3, [r5, r3]
 80085f0:	4798      	blx	r3
 80085f2:	3601      	adds	r6, #1
 80085f4:	e7ee      	b.n	80085d4 <__libc_init_array+0xc>
 80085f6:	00b3      	lsls	r3, r6, #2
 80085f8:	58eb      	ldr	r3, [r5, r3]
 80085fa:	4798      	blx	r3
 80085fc:	3601      	adds	r6, #1
 80085fe:	e7f2      	b.n	80085e6 <__libc_init_array+0x1e>
 8008600:	08008eb0 	.word	0x08008eb0
 8008604:	08008eb0 	.word	0x08008eb0
 8008608:	08008eb0 	.word	0x08008eb0
 800860c:	08008eb4 	.word	0x08008eb4

08008610 <memset>:
 8008610:	0003      	movs	r3, r0
 8008612:	1812      	adds	r2, r2, r0
 8008614:	4293      	cmp	r3, r2
 8008616:	d100      	bne.n	800861a <memset+0xa>
 8008618:	4770      	bx	lr
 800861a:	7019      	strb	r1, [r3, #0]
 800861c:	3301      	adds	r3, #1
 800861e:	e7f9      	b.n	8008614 <memset+0x4>

08008620 <srand>:
 8008620:	4b0d      	ldr	r3, [pc, #52]	; (8008658 <srand+0x38>)
 8008622:	b570      	push	{r4, r5, r6, lr}
 8008624:	681c      	ldr	r4, [r3, #0]
 8008626:	0005      	movs	r5, r0
 8008628:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10f      	bne.n	800864e <srand+0x2e>
 800862e:	2018      	movs	r0, #24
 8008630:	f000 f878 	bl	8008724 <malloc>
 8008634:	4b09      	ldr	r3, [pc, #36]	; (800865c <srand+0x3c>)
 8008636:	63a0      	str	r0, [r4, #56]	; 0x38
 8008638:	6003      	str	r3, [r0, #0]
 800863a:	4b09      	ldr	r3, [pc, #36]	; (8008660 <srand+0x40>)
 800863c:	2201      	movs	r2, #1
 800863e:	6043      	str	r3, [r0, #4]
 8008640:	4b08      	ldr	r3, [pc, #32]	; (8008664 <srand+0x44>)
 8008642:	6083      	str	r3, [r0, #8]
 8008644:	230b      	movs	r3, #11
 8008646:	8183      	strh	r3, [r0, #12]
 8008648:	2300      	movs	r3, #0
 800864a:	6102      	str	r2, [r0, #16]
 800864c:	6143      	str	r3, [r0, #20]
 800864e:	2200      	movs	r2, #0
 8008650:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008652:	611d      	str	r5, [r3, #16]
 8008654:	615a      	str	r2, [r3, #20]
 8008656:	bd70      	pop	{r4, r5, r6, pc}
 8008658:	20000020 	.word	0x20000020
 800865c:	abcd330e 	.word	0xabcd330e
 8008660:	e66d1234 	.word	0xe66d1234
 8008664:	0005deec 	.word	0x0005deec

08008668 <rand>:
 8008668:	4b12      	ldr	r3, [pc, #72]	; (80086b4 <rand+0x4c>)
 800866a:	b510      	push	{r4, lr}
 800866c:	681c      	ldr	r4, [r3, #0]
 800866e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10f      	bne.n	8008694 <rand+0x2c>
 8008674:	2018      	movs	r0, #24
 8008676:	f000 f855 	bl	8008724 <malloc>
 800867a:	4b0f      	ldr	r3, [pc, #60]	; (80086b8 <rand+0x50>)
 800867c:	63a0      	str	r0, [r4, #56]	; 0x38
 800867e:	6003      	str	r3, [r0, #0]
 8008680:	4b0e      	ldr	r3, [pc, #56]	; (80086bc <rand+0x54>)
 8008682:	2201      	movs	r2, #1
 8008684:	6043      	str	r3, [r0, #4]
 8008686:	4b0e      	ldr	r3, [pc, #56]	; (80086c0 <rand+0x58>)
 8008688:	6083      	str	r3, [r0, #8]
 800868a:	230b      	movs	r3, #11
 800868c:	8183      	strh	r3, [r0, #12]
 800868e:	2300      	movs	r3, #0
 8008690:	6102      	str	r2, [r0, #16]
 8008692:	6143      	str	r3, [r0, #20]
 8008694:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8008696:	4a0b      	ldr	r2, [pc, #44]	; (80086c4 <rand+0x5c>)
 8008698:	6920      	ldr	r0, [r4, #16]
 800869a:	6961      	ldr	r1, [r4, #20]
 800869c:	4b0a      	ldr	r3, [pc, #40]	; (80086c8 <rand+0x60>)
 800869e:	f7f7 fea9 	bl	80003f4 <__aeabi_lmul>
 80086a2:	2201      	movs	r2, #1
 80086a4:	2300      	movs	r3, #0
 80086a6:	1880      	adds	r0, r0, r2
 80086a8:	4159      	adcs	r1, r3
 80086aa:	6120      	str	r0, [r4, #16]
 80086ac:	6161      	str	r1, [r4, #20]
 80086ae:	0048      	lsls	r0, r1, #1
 80086b0:	0840      	lsrs	r0, r0, #1
 80086b2:	bd10      	pop	{r4, pc}
 80086b4:	20000020 	.word	0x20000020
 80086b8:	abcd330e 	.word	0xabcd330e
 80086bc:	e66d1234 	.word	0xe66d1234
 80086c0:	0005deec 	.word	0x0005deec
 80086c4:	4c957f2d 	.word	0x4c957f2d
 80086c8:	5851f42d 	.word	0x5851f42d

080086cc <time>:
 80086cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086ce:	4b0b      	ldr	r3, [pc, #44]	; (80086fc <time+0x30>)
 80086d0:	0004      	movs	r4, r0
 80086d2:	2200      	movs	r2, #0
 80086d4:	4669      	mov	r1, sp
 80086d6:	6818      	ldr	r0, [r3, #0]
 80086d8:	f000 f812 	bl	8008700 <_gettimeofday_r>
 80086dc:	2800      	cmp	r0, #0
 80086de:	da04      	bge.n	80086ea <time+0x1e>
 80086e0:	2201      	movs	r2, #1
 80086e2:	4252      	negs	r2, r2
 80086e4:	17d3      	asrs	r3, r2, #31
 80086e6:	9200      	str	r2, [sp, #0]
 80086e8:	9301      	str	r3, [sp, #4]
 80086ea:	9800      	ldr	r0, [sp, #0]
 80086ec:	9901      	ldr	r1, [sp, #4]
 80086ee:	2c00      	cmp	r4, #0
 80086f0:	d001      	beq.n	80086f6 <time+0x2a>
 80086f2:	6020      	str	r0, [r4, #0]
 80086f4:	6061      	str	r1, [r4, #4]
 80086f6:	b004      	add	sp, #16
 80086f8:	bd10      	pop	{r4, pc}
 80086fa:	46c0      	nop			; (mov r8, r8)
 80086fc:	20000020 	.word	0x20000020

08008700 <_gettimeofday_r>:
 8008700:	2300      	movs	r3, #0
 8008702:	b570      	push	{r4, r5, r6, lr}
 8008704:	4c06      	ldr	r4, [pc, #24]	; (8008720 <_gettimeofday_r+0x20>)
 8008706:	0005      	movs	r5, r0
 8008708:	0008      	movs	r0, r1
 800870a:	0011      	movs	r1, r2
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	f000 f885 	bl	800881c <_gettimeofday>
 8008712:	1c43      	adds	r3, r0, #1
 8008714:	d103      	bne.n	800871e <_gettimeofday_r+0x1e>
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d000      	beq.n	800871e <_gettimeofday_r+0x1e>
 800871c:	602b      	str	r3, [r5, #0]
 800871e:	bd70      	pop	{r4, r5, r6, pc}
 8008720:	20000b00 	.word	0x20000b00

08008724 <malloc>:
 8008724:	b510      	push	{r4, lr}
 8008726:	4b03      	ldr	r3, [pc, #12]	; (8008734 <malloc+0x10>)
 8008728:	0001      	movs	r1, r0
 800872a:	6818      	ldr	r0, [r3, #0]
 800872c:	f000 f804 	bl	8008738 <_malloc_r>
 8008730:	bd10      	pop	{r4, pc}
 8008732:	46c0      	nop			; (mov r8, r8)
 8008734:	20000020 	.word	0x20000020

08008738 <_malloc_r>:
 8008738:	2303      	movs	r3, #3
 800873a:	b570      	push	{r4, r5, r6, lr}
 800873c:	1ccd      	adds	r5, r1, #3
 800873e:	439d      	bics	r5, r3
 8008740:	3508      	adds	r5, #8
 8008742:	0006      	movs	r6, r0
 8008744:	2d0c      	cmp	r5, #12
 8008746:	d21e      	bcs.n	8008786 <_malloc_r+0x4e>
 8008748:	250c      	movs	r5, #12
 800874a:	42a9      	cmp	r1, r5
 800874c:	d81d      	bhi.n	800878a <_malloc_r+0x52>
 800874e:	0030      	movs	r0, r6
 8008750:	f000 f862 	bl	8008818 <__malloc_lock>
 8008754:	4a25      	ldr	r2, [pc, #148]	; (80087ec <_malloc_r+0xb4>)
 8008756:	6814      	ldr	r4, [r2, #0]
 8008758:	0021      	movs	r1, r4
 800875a:	2900      	cmp	r1, #0
 800875c:	d119      	bne.n	8008792 <_malloc_r+0x5a>
 800875e:	4c24      	ldr	r4, [pc, #144]	; (80087f0 <_malloc_r+0xb8>)
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d103      	bne.n	800876e <_malloc_r+0x36>
 8008766:	0030      	movs	r0, r6
 8008768:	f000 f844 	bl	80087f4 <_sbrk_r>
 800876c:	6020      	str	r0, [r4, #0]
 800876e:	0029      	movs	r1, r5
 8008770:	0030      	movs	r0, r6
 8008772:	f000 f83f 	bl	80087f4 <_sbrk_r>
 8008776:	1c43      	adds	r3, r0, #1
 8008778:	d12b      	bne.n	80087d2 <_malloc_r+0x9a>
 800877a:	230c      	movs	r3, #12
 800877c:	0030      	movs	r0, r6
 800877e:	6033      	str	r3, [r6, #0]
 8008780:	f000 f84b 	bl	800881a <__malloc_unlock>
 8008784:	e003      	b.n	800878e <_malloc_r+0x56>
 8008786:	2d00      	cmp	r5, #0
 8008788:	dadf      	bge.n	800874a <_malloc_r+0x12>
 800878a:	230c      	movs	r3, #12
 800878c:	6033      	str	r3, [r6, #0]
 800878e:	2000      	movs	r0, #0
 8008790:	bd70      	pop	{r4, r5, r6, pc}
 8008792:	680b      	ldr	r3, [r1, #0]
 8008794:	1b5b      	subs	r3, r3, r5
 8008796:	d419      	bmi.n	80087cc <_malloc_r+0x94>
 8008798:	2b0b      	cmp	r3, #11
 800879a:	d903      	bls.n	80087a4 <_malloc_r+0x6c>
 800879c:	600b      	str	r3, [r1, #0]
 800879e:	18cc      	adds	r4, r1, r3
 80087a0:	6025      	str	r5, [r4, #0]
 80087a2:	e003      	b.n	80087ac <_malloc_r+0x74>
 80087a4:	684b      	ldr	r3, [r1, #4]
 80087a6:	428c      	cmp	r4, r1
 80087a8:	d10d      	bne.n	80087c6 <_malloc_r+0x8e>
 80087aa:	6013      	str	r3, [r2, #0]
 80087ac:	0030      	movs	r0, r6
 80087ae:	f000 f834 	bl	800881a <__malloc_unlock>
 80087b2:	0020      	movs	r0, r4
 80087b4:	2207      	movs	r2, #7
 80087b6:	300b      	adds	r0, #11
 80087b8:	1d23      	adds	r3, r4, #4
 80087ba:	4390      	bics	r0, r2
 80087bc:	1ac3      	subs	r3, r0, r3
 80087be:	d0e7      	beq.n	8008790 <_malloc_r+0x58>
 80087c0:	425a      	negs	r2, r3
 80087c2:	50e2      	str	r2, [r4, r3]
 80087c4:	e7e4      	b.n	8008790 <_malloc_r+0x58>
 80087c6:	6063      	str	r3, [r4, #4]
 80087c8:	000c      	movs	r4, r1
 80087ca:	e7ef      	b.n	80087ac <_malloc_r+0x74>
 80087cc:	000c      	movs	r4, r1
 80087ce:	6849      	ldr	r1, [r1, #4]
 80087d0:	e7c3      	b.n	800875a <_malloc_r+0x22>
 80087d2:	2303      	movs	r3, #3
 80087d4:	1cc4      	adds	r4, r0, #3
 80087d6:	439c      	bics	r4, r3
 80087d8:	42a0      	cmp	r0, r4
 80087da:	d0e1      	beq.n	80087a0 <_malloc_r+0x68>
 80087dc:	1a21      	subs	r1, r4, r0
 80087de:	0030      	movs	r0, r6
 80087e0:	f000 f808 	bl	80087f4 <_sbrk_r>
 80087e4:	1c43      	adds	r3, r0, #1
 80087e6:	d1db      	bne.n	80087a0 <_malloc_r+0x68>
 80087e8:	e7c7      	b.n	800877a <_malloc_r+0x42>
 80087ea:	46c0      	nop			; (mov r8, r8)
 80087ec:	200004e0 	.word	0x200004e0
 80087f0:	200004e4 	.word	0x200004e4

080087f4 <_sbrk_r>:
 80087f4:	2300      	movs	r3, #0
 80087f6:	b570      	push	{r4, r5, r6, lr}
 80087f8:	4c06      	ldr	r4, [pc, #24]	; (8008814 <_sbrk_r+0x20>)
 80087fa:	0005      	movs	r5, r0
 80087fc:	0008      	movs	r0, r1
 80087fe:	6023      	str	r3, [r4, #0]
 8008800:	f7fd f98a 	bl	8005b18 <_sbrk>
 8008804:	1c43      	adds	r3, r0, #1
 8008806:	d103      	bne.n	8008810 <_sbrk_r+0x1c>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d000      	beq.n	8008810 <_sbrk_r+0x1c>
 800880e:	602b      	str	r3, [r5, #0]
 8008810:	bd70      	pop	{r4, r5, r6, pc}
 8008812:	46c0      	nop			; (mov r8, r8)
 8008814:	20000b00 	.word	0x20000b00

08008818 <__malloc_lock>:
 8008818:	4770      	bx	lr

0800881a <__malloc_unlock>:
 800881a:	4770      	bx	lr

0800881c <_gettimeofday>:
 800881c:	2258      	movs	r2, #88	; 0x58
 800881e:	2001      	movs	r0, #1
 8008820:	4b01      	ldr	r3, [pc, #4]	; (8008828 <_gettimeofday+0xc>)
 8008822:	4240      	negs	r0, r0
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	4770      	bx	lr
 8008828:	20000b00 	.word	0x20000b00

0800882c <_init>:
 800882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882e:	46c0      	nop			; (mov r8, r8)
 8008830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008832:	bc08      	pop	{r3}
 8008834:	469e      	mov	lr, r3
 8008836:	4770      	bx	lr

08008838 <_fini>:
 8008838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883a:	46c0      	nop			; (mov r8, r8)
 800883c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800883e:	bc08      	pop	{r3}
 8008840:	469e      	mov	lr, r3
 8008842:	4770      	bx	lr
